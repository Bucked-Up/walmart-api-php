<?php

/**
 * Each
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Item Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\Supplier\US\Items;

use Walmart\Models\BaseModel;

/**
 * Each Class Doc Comment
 *
 * @category Class

 * @description Indicates an object providing the trade item dimensions of the each, or individual item, being sold.

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class Each extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Each';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'eachGTIN' => 'string',
        'eachDepth' => 'float',
        'eachWidth' => 'float',
        'eachHeight' => 'float',
        'eachWeight' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'eachGTIN' => null,
        'eachDepth' => 'double',
        'eachWidth' => 'double',
        'eachHeight' => 'double',
        'eachWeight' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'eachGTIN' => false,
        'eachDepth' => false,
        'eachWidth' => false,
        'eachHeight' => false,
        'eachWeight' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'eachGTIN' => 'eachGTIN',
        'eachDepth' => 'eachDepth',
        'eachWidth' => 'eachWidth',
        'eachHeight' => 'eachHeight',
        'eachWeight' => 'eachWeight'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'eachGTIN' => 'setEachGTIN',
        'eachDepth' => 'setEachDepth',
        'eachWidth' => 'setEachWidth',
        'eachHeight' => 'setEachHeight',
        'eachWeight' => 'setEachWeight'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'eachGTIN' => 'getEachGTIN',
        'eachDepth' => 'getEachDepth',
        'eachWidth' => 'getEachWidth',
        'eachHeight' => 'getEachHeight',
        'eachWeight' => 'getEachWeight'
    ];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('eachGTIN', $data ?? [], null);
        $this->setIfExists('eachDepth', $data ?? [], null);
        $this->setIfExists('eachWidth', $data ?? [], null);
        $this->setIfExists('eachHeight', $data ?? [], null);
        $this->setIfExists('eachWeight', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];


        return $invalidProperties;
    }

    /**
     * Gets eachGTIN
     *
     * @return string|null
    
     */
    public function getEachGTIN()
    {
        return $this->container['eachGTIN'];
    }

    /**
     * Sets eachGTIN
     *
     * @param string|null $eachGTIN Indicates global trade item number (in the GTIN-14 format) that identifies the each.  The 14-digit Global Trade item number. If the returned value is less than 14 digits, add zeros at the beginning to lengthen it to 14 digits.
     *
     * @return self
    
     */
    public function setEachGTIN($eachGTIN)
    {
        if (is_null($eachGTIN)) {
            throw new \InvalidArgumentException('non-nullable eachGTIN cannot be null');
        }

        $this->container['eachGTIN'] = $eachGTIN;
        return $this;
    }

    /**
     * Gets eachDepth
     *
     * @return float|null
    
     */
    public function getEachDepth()
    {
        return $this->container['eachDepth'];
    }

    /**
     * Sets eachDepth
     *
     * @param float|null $eachDepth Indicates the longest depth (front to back) measurement (in inches).  If the trade item is the consumable (sellable) unit, this is measured with the product sitting on its natural base and facing forward. If the trade item is not the consumable (sellable) unit, this is measured with the product sitting on its natural base.  For more information, see <a href=\"https://supplierhelp.walmart.com\" target=\"_blank\">Supplier Help</a> and search for *pack dimensions*.
     *
     * @return self
    
     */
    public function setEachDepth($eachDepth)
    {
        if (is_null($eachDepth)) {
            throw new \InvalidArgumentException('non-nullable eachDepth cannot be null');
        }

        $this->container['eachDepth'] = $eachDepth;
        return $this;
    }

    /**
     * Gets eachWidth
     *
     * @return float|null
    
     */
    public function getEachWidth()
    {
        return $this->container['eachWidth'];
    }

    /**
     * Sets eachWidth
     *
     * @param float|null $eachWidth Indicates the longest horizontal (left to right) measurement (in inches).  If the trade item is the consumable (sellable) unit, this is measured with the product sitting on its natural base and facing forward. If the trade item is not the consumable (sellable) unit, this is measured with the product sitting on its natural base.  For more information, see <a href=\"https://supplierhelp.walmart.com\" target=\"_blank\">Supplier Help</a> and search for *pack dimensions*.
     *
     * @return self
    
     */
    public function setEachWidth($eachWidth)
    {
        if (is_null($eachWidth)) {
            throw new \InvalidArgumentException('non-nullable eachWidth cannot be null');
        }

        $this->container['eachWidth'] = $eachWidth;
        return $this;
    }

    /**
     * Gets eachHeight
     *
     * @return float|null
    
     */
    public function getEachHeight()
    {
        return $this->container['eachHeight'];
    }

    /**
     * Sets eachHeight
     *
     * @param float|null $eachHeight Indicates the longest vertical (top to bottom) measurement (in inches).  If the trade item is the consumable (sellable) unit, this is measured with the product sitting on its natural base and facing forward. If the trade item is not the consumable (sellable) unit, this is measured with the product sitting on its natural base.  For more information, see <a href=\"https://supplierhelp.walmart.com\" target=\"_blank\">Supplier Help</a> and search for *pack dimensions*.
     *
     * @return self
    
     */
    public function setEachHeight($eachHeight)
    {
        if (is_null($eachHeight)) {
            throw new \InvalidArgumentException('non-nullable eachHeight cannot be null');
        }

        $this->container['eachHeight'] = $eachHeight;
        return $this;
    }

    /**
     * Gets eachWeight
     *
     * @return float|null
    
     */
    public function getEachWeight()
    {
        return $this->container['eachWeight'];
    }

    /**
     * Sets eachWeight
     *
     * @param float|null $eachWeight Indicates the weight (in pounds) of the trade Item at each level, including all of its packaging materials.
     *
     * @return self
    
     */
    public function setEachWeight($eachWeight)
    {
        if (is_null($eachWeight)) {
            throw new \InvalidArgumentException('non-nullable eachWeight cannot be null');
        }

        $this->container['eachWeight'] = $eachWeight;
        return $this;
    }
}
