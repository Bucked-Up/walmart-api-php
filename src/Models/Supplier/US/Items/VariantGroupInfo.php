<?php

/**
 * VariantGroupInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Item Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\Supplier\US\Items;

use Walmart\Models\BaseModel;

/**
 * VariantGroupInfo Class Doc Comment
 *
 * @category Class

 * @description Indicates an object for additional variant group information if the item is of type Variant.

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class VariantGroupInfo extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'VariantGroupInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'isPrimary' => 'bool',
        'items' => '\Walmart\Models\Supplier\US\Items\Items[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'isPrimary' => null,
        'items' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'isPrimary' => false,
        'items' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'isPrimary' => 'isPrimary',
        'items' => 'items'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'isPrimary' => 'setIsPrimary',
        'items' => 'setItems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'isPrimary' => 'getIsPrimary',
        'items' => 'getItems'
    ];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('isPrimary', $data ?? [], null);
        $this->setIfExists('items', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];


        return $invalidProperties;
    }

    /**
     * Gets isPrimary
     *
     * @return bool|null
    
     */
    public function getIsPrimary()
    {
        return $this->container['isPrimary'];
    }

    /**
     * Sets isPrimary
     *
     * @param bool|null $isPrimary Indicates the item is a primary variant.  If `YES`, the item is a primary variant.  If `NO`, the item is not a primary variant.
     *
     * @return self
    
     */
    public function setIsPrimary($isPrimary)
    {
        if (is_null($isPrimary)) {
            throw new \InvalidArgumentException('non-nullable isPrimary cannot be null');
        }

        $this->container['isPrimary'] = $isPrimary;
        return $this;
    }

    /**
     * Gets items
     *
     * @return \Walmart\Models\Supplier\US\Items\Items[]|null
    
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \Walmart\Models\Supplier\US\Items\Items[]|null $items Indicates an array list of variant attributes used to create the variant item.
     *
     * @return self
    
     */
    public function setItems($items)
    {
        if (is_null($items)) {
            throw new \InvalidArgumentException('non-nullable items cannot be null');
        }

        $this->container['items'] = $items;
        return $this;
    }
}
