<?php

/**
 * SiteDates
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Item Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\Supplier\US\Items;

use Walmart\Models\BaseModel;

/**
 * SiteDates Class Doc Comment
 *
 * @category Class

 * @description Indicates an object for the timestamp range when the item will be available to see on Walmart.com

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class SiteDates extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'SiteDates';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'siteStartDate' => '\DateTime',
        'siteEndDate' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'siteStartDate' => 'date-time',
        'siteEndDate' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'siteStartDate' => false,
        'siteEndDate' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'siteStartDate' => 'siteStartDate',
        'siteEndDate' => 'siteEndDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'siteStartDate' => 'setSiteStartDate',
        'siteEndDate' => 'setSiteEndDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'siteStartDate' => 'getSiteStartDate',
        'siteEndDate' => 'getSiteEndDate'
    ];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('siteStartDate', $data ?? [], null);
        $this->setIfExists('siteEndDate', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];


        return $invalidProperties;
    }

    /**
     * Gets siteStartDate
     *
     * @return \DateTime|null
    
     */
    public function getSiteStartDate()
    {
        return $this->container['siteStartDate'];
    }

    /**
     * Sets siteStartDate
     *
     * @param \DateTime|null $siteStartDate Indicates the timestamp (in ISO 8601 format) when the item is first available to be published on the site.
     *
     * @return self
    
     */
    public function setSiteStartDate($siteStartDate)
    {
        if (is_null($siteStartDate)) {
            throw new \InvalidArgumentException('non-nullable siteStartDate cannot be null');
        }

        $this->container['siteStartDate'] = $siteStartDate;
        return $this;
    }

    /**
     * Gets siteEndDate
     *
     * @return \DateTime|null
    
     */
    public function getSiteEndDate()
    {
        return $this->container['siteEndDate'];
    }

    /**
     * Sets siteEndDate
     *
     * @param \DateTime|null $siteEndDate Indicates the timestamp (in ISO 8601 format) when the item will be removed from the site.
     *
     * @return self
    
     */
    public function setSiteEndDate($siteEndDate)
    {
        if (is_null($siteEndDate)) {
            throw new \InvalidArgumentException('non-nullable siteEndDate cannot be null');
        }

        $this->container['siteEndDate'] = $siteEndDate;
        return $this;
    }
}
