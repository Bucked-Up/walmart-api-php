<?php

/**
 * ShippingDimensions
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Item Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\Supplier\US\Items;

use Walmart\Models\BaseModel;

/**
 * ShippingDimensions Class Doc Comment
 *
 * @category Class

 * @description Indicates an object for the shipping dimensions for the item.  This is applicable only for DSV items.

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class ShippingDimensions extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ShippingDimensions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'shippingDimensionsHeight' => 'float',
        'shippingDimensionsWidth' => 'float',
        'shippingDimensionsDepth' => 'float',
        'shippingWeight' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'shippingDimensionsHeight' => 'double',
        'shippingDimensionsWidth' => 'double',
        'shippingDimensionsDepth' => 'double',
        'shippingWeight' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'shippingDimensionsHeight' => false,
        'shippingDimensionsWidth' => false,
        'shippingDimensionsDepth' => false,
        'shippingWeight' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'shippingDimensionsHeight' => 'ShippingDimensionsHeight',
        'shippingDimensionsWidth' => 'ShippingDimensionsWidth',
        'shippingDimensionsDepth' => 'ShippingDimensionsDepth',
        'shippingWeight' => 'ShippingWeight'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'shippingDimensionsHeight' => 'setShippingDimensionsHeight',
        'shippingDimensionsWidth' => 'setShippingDimensionsWidth',
        'shippingDimensionsDepth' => 'setShippingDimensionsDepth',
        'shippingWeight' => 'setShippingWeight'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'shippingDimensionsHeight' => 'getShippingDimensionsHeight',
        'shippingDimensionsWidth' => 'getShippingDimensionsWidth',
        'shippingDimensionsDepth' => 'getShippingDimensionsDepth',
        'shippingWeight' => 'getShippingWeight'
    ];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('shippingDimensionsHeight', $data ?? [], null);
        $this->setIfExists('shippingDimensionsWidth', $data ?? [], null);
        $this->setIfExists('shippingDimensionsDepth', $data ?? [], null);
        $this->setIfExists('shippingWeight', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];


        return $invalidProperties;
    }

    /**
     * Gets shippingDimensionsHeight
     *
     * @return float|null
    
     */
    public function getShippingDimensionsHeight()
    {
        return $this->container['shippingDimensionsHeight'];
    }

    /**
     * Sets shippingDimensionsHeight
     *
     * @param float|null $shippingDimensionsHeight Indicates the height (in inches) of the packaged shipping container.
     *
     * @return self
    
     */
    public function setShippingDimensionsHeight($shippingDimensionsHeight)
    {
        if (is_null($shippingDimensionsHeight)) {
            throw new \InvalidArgumentException('non-nullable shippingDimensionsHeight cannot be null');
        }

        $this->container['shippingDimensionsHeight'] = $shippingDimensionsHeight;
        return $this;
    }

    /**
     * Gets shippingDimensionsWidth
     *
     * @return float|null
    
     */
    public function getShippingDimensionsWidth()
    {
        return $this->container['shippingDimensionsWidth'];
    }

    /**
     * Sets shippingDimensionsWidth
     *
     * @param float|null $shippingDimensionsWidth Indicates the width (in inches) of the packaged shipping container.
     *
     * @return self
    
     */
    public function setShippingDimensionsWidth($shippingDimensionsWidth)
    {
        if (is_null($shippingDimensionsWidth)) {
            throw new \InvalidArgumentException('non-nullable shippingDimensionsWidth cannot be null');
        }

        $this->container['shippingDimensionsWidth'] = $shippingDimensionsWidth;
        return $this;
    }

    /**
     * Gets shippingDimensionsDepth
     *
     * @return float|null
    
     */
    public function getShippingDimensionsDepth()
    {
        return $this->container['shippingDimensionsDepth'];
    }

    /**
     * Sets shippingDimensionsDepth
     *
     * @param float|null $shippingDimensionsDepth Indicates the depth (in inches) of the packaged shipping container.
     *
     * @return self
    
     */
    public function setShippingDimensionsDepth($shippingDimensionsDepth)
    {
        if (is_null($shippingDimensionsDepth)) {
            throw new \InvalidArgumentException('non-nullable shippingDimensionsDepth cannot be null');
        }

        $this->container['shippingDimensionsDepth'] = $shippingDimensionsDepth;
        return $this;
    }

    /**
     * Gets shippingWeight
     *
     * @return float|null
    
     */
    public function getShippingWeight()
    {
        return $this->container['shippingWeight'];
    }

    /**
     * Sets shippingWeight
     *
     * @param float|null $shippingWeight Indicates the weight (in pounds) of the packaged shipping container.
     *
     * @return self
    
     */
    public function setShippingWeight($shippingWeight)
    {
        if (is_null($shippingWeight)) {
            throw new \InvalidArgumentException('non-nullable shippingWeight cannot be null');
        }

        $this->container['shippingWeight'] = $shippingWeight;
        return $this;
    }
}
