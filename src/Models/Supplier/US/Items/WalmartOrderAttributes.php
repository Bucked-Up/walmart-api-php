<?php

/**
 * WalmartOrderAttributes
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Item Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\Supplier\US\Items;

use Walmart\Models\BaseModel;

/**
 * WalmartOrderAttributes Class Doc Comment
 *
 * @category Class

 * @description Indicates additional attributes that Walmart uses to manage ordering items.  These attributes will align with the attributes found in the *Orderable* section of the *Omni 5.X maintenance* feedtype.

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class WalmartOrderAttributes extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'WalmartOrderAttributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'minimumAdvertisedPrice' => 'float',
        'signingDescription' => 'string',
        'shopDescription' => 'string',
        'goodsAndServicesType' => 'string',
        'sustainabilityFeatureCode' => 'string[]',
        'flexibleSpendingAccountEligible' => 'string',
        'stateRestrictions' => '\Walmart\Models\Supplier\US\Items\StateRestrictions[]',
        'chemicalAerosolPesticide' => 'string',
        'electronicsIndicator' => 'string',
        'batteryTechnologyType' => 'string',
        'hasFuelContainer' => 'string',
        'containsPaperWood' => 'string',
        'containsMercury' => 'string',
        'isCpscRegulatedInd' => 'string',
        'multipackIndicator' => 'string',
        'shipsInOriginalPackaging' => 'string',
        'packagingMarkedReturnableIndicator' => 'string',
        'hasRFID' => 'string',
        'isVarietyInd' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'minimumAdvertisedPrice' => 'float',
        'signingDescription' => null,
        'shopDescription' => null,
        'goodsAndServicesType' => null,
        'sustainabilityFeatureCode' => null,
        'flexibleSpendingAccountEligible' => null,
        'stateRestrictions' => null,
        'chemicalAerosolPesticide' => null,
        'electronicsIndicator' => null,
        'batteryTechnologyType' => null,
        'hasFuelContainer' => null,
        'containsPaperWood' => null,
        'containsMercury' => null,
        'isCpscRegulatedInd' => null,
        'multipackIndicator' => null,
        'shipsInOriginalPackaging' => null,
        'packagingMarkedReturnableIndicator' => null,
        'hasRFID' => null,
        'isVarietyInd' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'minimumAdvertisedPrice' => false,
        'signingDescription' => false,
        'shopDescription' => false,
        'goodsAndServicesType' => false,
        'sustainabilityFeatureCode' => false,
        'flexibleSpendingAccountEligible' => false,
        'stateRestrictions' => false,
        'chemicalAerosolPesticide' => false,
        'electronicsIndicator' => false,
        'batteryTechnologyType' => false,
        'hasFuelContainer' => false,
        'containsPaperWood' => false,
        'containsMercury' => false,
        'isCpscRegulatedInd' => false,
        'multipackIndicator' => false,
        'shipsInOriginalPackaging' => false,
        'packagingMarkedReturnableIndicator' => false,
        'hasRFID' => false,
        'isVarietyInd' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'minimumAdvertisedPrice' => 'MinimumAdvertisedPrice',
        'signingDescription' => 'SigningDescription',
        'shopDescription' => 'shopDescription',
        'goodsAndServicesType' => 'goods_and_services_type',
        'sustainabilityFeatureCode' => 'sustainabilityFeatureCode',
        'flexibleSpendingAccountEligible' => 'flexibleSpendingAccountEligible',
        'stateRestrictions' => 'stateRestrictions',
        'chemicalAerosolPesticide' => 'chemicalAerosolPesticide',
        'electronicsIndicator' => 'electronicsIndicator',
        'batteryTechnologyType' => 'batteryTechnologyType',
        'hasFuelContainer' => 'hasFuelContainer',
        'containsPaperWood' => 'containsPaperWood',
        'containsMercury' => 'containsMercury',
        'isCpscRegulatedInd' => 'isCpscRegulatedInd',
        'multipackIndicator' => 'multipackIndicator',
        'shipsInOriginalPackaging' => 'shipsInOriginalPackaging',
        'packagingMarkedReturnableIndicator' => 'packagingMarkedReturnableIndicator',
        'hasRFID' => 'hasRFID',
        'isVarietyInd' => 'isVarietyInd'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'minimumAdvertisedPrice' => 'setMinimumAdvertisedPrice',
        'signingDescription' => 'setSigningDescription',
        'shopDescription' => 'setShopDescription',
        'goodsAndServicesType' => 'setGoodsAndServicesType',
        'sustainabilityFeatureCode' => 'setSustainabilityFeatureCode',
        'flexibleSpendingAccountEligible' => 'setFlexibleSpendingAccountEligible',
        'stateRestrictions' => 'setStateRestrictions',
        'chemicalAerosolPesticide' => 'setChemicalAerosolPesticide',
        'electronicsIndicator' => 'setElectronicsIndicator',
        'batteryTechnologyType' => 'setBatteryTechnologyType',
        'hasFuelContainer' => 'setHasFuelContainer',
        'containsPaperWood' => 'setContainsPaperWood',
        'containsMercury' => 'setContainsMercury',
        'isCpscRegulatedInd' => 'setIsCpscRegulatedInd',
        'multipackIndicator' => 'setMultipackIndicator',
        'shipsInOriginalPackaging' => 'setShipsInOriginalPackaging',
        'packagingMarkedReturnableIndicator' => 'setPackagingMarkedReturnableIndicator',
        'hasRFID' => 'setHasRFID',
        'isVarietyInd' => 'setIsVarietyInd'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'minimumAdvertisedPrice' => 'getMinimumAdvertisedPrice',
        'signingDescription' => 'getSigningDescription',
        'shopDescription' => 'getShopDescription',
        'goodsAndServicesType' => 'getGoodsAndServicesType',
        'sustainabilityFeatureCode' => 'getSustainabilityFeatureCode',
        'flexibleSpendingAccountEligible' => 'getFlexibleSpendingAccountEligible',
        'stateRestrictions' => 'getStateRestrictions',
        'chemicalAerosolPesticide' => 'getChemicalAerosolPesticide',
        'electronicsIndicator' => 'getElectronicsIndicator',
        'batteryTechnologyType' => 'getBatteryTechnologyType',
        'hasFuelContainer' => 'getHasFuelContainer',
        'containsPaperWood' => 'getContainsPaperWood',
        'containsMercury' => 'getContainsMercury',
        'isCpscRegulatedInd' => 'getIsCpscRegulatedInd',
        'multipackIndicator' => 'getMultipackIndicator',
        'shipsInOriginalPackaging' => 'getShipsInOriginalPackaging',
        'packagingMarkedReturnableIndicator' => 'getPackagingMarkedReturnableIndicator',
        'hasRFID' => 'getHasRFID',
        'isVarietyInd' => 'getIsVarietyInd'
    ];


    public const GOODS_AND_SERVICES_TYPE_SERVICE = 'Service';

    public const GOODS_AND_SERVICES_TYPE_PHYSICAL = 'Physical';

    public const GOODS_AND_SERVICES_TYPE_DIGITAL = 'Digital';

    public const FLEXIBLE_SPENDING_ACCOUNT_ELIGIBLE_YES = 'YES';

    public const FLEXIBLE_SPENDING_ACCOUNT_ELIGIBLE_NO = 'NO';

    public const CHEMICAL_AEROSOL_PESTICIDE_YES = 'YES';

    public const CHEMICAL_AEROSOL_PESTICIDE_NO = 'NO';

    public const ELECTRONICS_INDICATOR_YES = 'YES';

    public const ELECTRONICS_INDICATOR_NO = 'NO';

    public const BATTERY_TECHNOLOGY_TYPE_LEAD_ACID__NON_SPILLABLE = 'Lead Acid (Non-Spillable)';

    public const BATTERY_TECHNOLOGY_TYPE_SILVER = 'Silver';

    public const BATTERY_TECHNOLOGY_TYPE_OTHER = 'Other';

    public const BATTERY_TECHNOLOGY_TYPE_LITHIUM_ION = 'Lithium Ion';

    public const BATTERY_TECHNOLOGY_TYPE_CARBON_ZINC = 'Carbon Zinc';

    public const BATTERY_TECHNOLOGY_TYPE_ALKALINE = 'Alkaline';

    public const BATTERY_TECHNOLOGY_TYPE_LITHIUM_PRIMARY__LITHIUM_METAL = 'Lithium Primary (Lithium Metal)';

    public const BATTERY_TECHNOLOGY_TYPE_DOES_NOT_CONTAIN_A_BATTERY = 'Does Not Contain a Battery';

    public const BATTERY_TECHNOLOGY_TYPE_LEAD_ACID = 'Lead Acid';

    public const BATTERY_TECHNOLOGY_TYPE_MAGNESIUM = 'Magnesium';

    public const BATTERY_TECHNOLOGY_TYPE_NICKEL_METAL_HYDRIDE = 'Nickel Metal Hydride';

    public const BATTERY_TECHNOLOGY_TYPE_MERCURY = 'Mercury';

    public const BATTERY_TECHNOLOGY_TYPE_MULTIPLE_TYPES = 'Multiple Types';

    public const BATTERY_TECHNOLOGY_TYPE_NICKEL_CADMIUM = 'Nickel Cadmium';

    public const BATTERY_TECHNOLOGY_TYPE_THERMAL = 'Thermal';

    public const BATTERY_TECHNOLOGY_TYPE_AGM = 'AGM';

    public const BATTERY_TECHNOLOGY_TYPE_LITHIUM_POLYMER = 'Lithium Polymer';

    public const HAS_FUEL_CONTAINER_YES = 'YES';

    public const HAS_FUEL_CONTAINER_NO = 'NO';

    public const CONTAINS_PAPER_WOOD_YES = 'YES';

    public const CONTAINS_PAPER_WOOD_NO = 'NO';

    public const CONTAINS_MERCURY_YES = 'YES';

    public const CONTAINS_MERCURY_NO = 'NO';

    public const IS_CPSC_REGULATED_IND_YES = 'YES';

    public const IS_CPSC_REGULATED_IND_NO = 'NO';

    public const MULTIPACK_INDICATOR_YES = 'YES';

    public const MULTIPACK_INDICATOR_NO = 'NO';

    public const SHIPS_IN_ORIGINAL_PACKAGING_YES = 'YES';

    public const SHIPS_IN_ORIGINAL_PACKAGING_NO = 'NO';

    public const PACKAGING_MARKED_RETURNABLE_INDICATOR_YES = 'YES';

    public const PACKAGING_MARKED_RETURNABLE_INDICATOR_NO = 'NO';

    public const HAS_RFID_YES = 'YES';

    public const HAS_RFID_NO = 'NO';

    public const IS_VARIETY_IND_YES = 'YES';

    public const IS_VARIETY_IND_NO = 'NO';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGoodsAndServicesTypeAllowableValues()
    {
        return [
            self::GOODS_AND_SERVICES_TYPE_SERVICE,
            self::GOODS_AND_SERVICES_TYPE_PHYSICAL,
            self::GOODS_AND_SERVICES_TYPE_DIGITAL,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFlexibleSpendingAccountEligibleAllowableValues()
    {
        return [
            self::FLEXIBLE_SPENDING_ACCOUNT_ELIGIBLE_YES,
            self::FLEXIBLE_SPENDING_ACCOUNT_ELIGIBLE_NO,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChemicalAerosolPesticideAllowableValues()
    {
        return [
            self::CHEMICAL_AEROSOL_PESTICIDE_YES,
            self::CHEMICAL_AEROSOL_PESTICIDE_NO,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getElectronicsIndicatorAllowableValues()
    {
        return [
            self::ELECTRONICS_INDICATOR_YES,
            self::ELECTRONICS_INDICATOR_NO,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBatteryTechnologyTypeAllowableValues()
    {
        return [
            self::BATTERY_TECHNOLOGY_TYPE_LEAD_ACID__NON_SPILLABLE,
            self::BATTERY_TECHNOLOGY_TYPE_SILVER,
            self::BATTERY_TECHNOLOGY_TYPE_OTHER,
            self::BATTERY_TECHNOLOGY_TYPE_LITHIUM_ION,
            self::BATTERY_TECHNOLOGY_TYPE_CARBON_ZINC,
            self::BATTERY_TECHNOLOGY_TYPE_ALKALINE,
            self::BATTERY_TECHNOLOGY_TYPE_LITHIUM_PRIMARY__LITHIUM_METAL,
            self::BATTERY_TECHNOLOGY_TYPE_DOES_NOT_CONTAIN_A_BATTERY,
            self::BATTERY_TECHNOLOGY_TYPE_LEAD_ACID,
            self::BATTERY_TECHNOLOGY_TYPE_MAGNESIUM,
            self::BATTERY_TECHNOLOGY_TYPE_NICKEL_METAL_HYDRIDE,
            self::BATTERY_TECHNOLOGY_TYPE_MERCURY,
            self::BATTERY_TECHNOLOGY_TYPE_MULTIPLE_TYPES,
            self::BATTERY_TECHNOLOGY_TYPE_NICKEL_CADMIUM,
            self::BATTERY_TECHNOLOGY_TYPE_THERMAL,
            self::BATTERY_TECHNOLOGY_TYPE_AGM,
            self::BATTERY_TECHNOLOGY_TYPE_LITHIUM_POLYMER,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHasFuelContainerAllowableValues()
    {
        return [
            self::HAS_FUEL_CONTAINER_YES,
            self::HAS_FUEL_CONTAINER_NO,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContainsPaperWoodAllowableValues()
    {
        return [
            self::CONTAINS_PAPER_WOOD_YES,
            self::CONTAINS_PAPER_WOOD_NO,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContainsMercuryAllowableValues()
    {
        return [
            self::CONTAINS_MERCURY_YES,
            self::CONTAINS_MERCURY_NO,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIsCpscRegulatedIndAllowableValues()
    {
        return [
            self::IS_CPSC_REGULATED_IND_YES,
            self::IS_CPSC_REGULATED_IND_NO,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMultipackIndicatorAllowableValues()
    {
        return [
            self::MULTIPACK_INDICATOR_YES,
            self::MULTIPACK_INDICATOR_NO,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShipsInOriginalPackagingAllowableValues()
    {
        return [
            self::SHIPS_IN_ORIGINAL_PACKAGING_YES,
            self::SHIPS_IN_ORIGINAL_PACKAGING_NO,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPackagingMarkedReturnableIndicatorAllowableValues()
    {
        return [
            self::PACKAGING_MARKED_RETURNABLE_INDICATOR_YES,
            self::PACKAGING_MARKED_RETURNABLE_INDICATOR_NO,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHasRFIDAllowableValues()
    {
        return [
            self::HAS_RFID_YES,
            self::HAS_RFID_NO,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIsVarietyIndAllowableValues()
    {
        return [
            self::IS_VARIETY_IND_YES,
            self::IS_VARIETY_IND_NO,
        ];
    }

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('minimumAdvertisedPrice', $data ?? [], null);
        $this->setIfExists('signingDescription', $data ?? [], null);
        $this->setIfExists('shopDescription', $data ?? [], null);
        $this->setIfExists('goodsAndServicesType', $data ?? [], null);
        $this->setIfExists('sustainabilityFeatureCode', $data ?? [], null);
        $this->setIfExists('flexibleSpendingAccountEligible', $data ?? [], null);
        $this->setIfExists('stateRestrictions', $data ?? [], null);
        $this->setIfExists('chemicalAerosolPesticide', $data ?? [], null);
        $this->setIfExists('electronicsIndicator', $data ?? [], null);
        $this->setIfExists('batteryTechnologyType', $data ?? [], null);
        $this->setIfExists('hasFuelContainer', $data ?? [], null);
        $this->setIfExists('containsPaperWood', $data ?? [], null);
        $this->setIfExists('containsMercury', $data ?? [], null);
        $this->setIfExists('isCpscRegulatedInd', $data ?? [], null);
        $this->setIfExists('multipackIndicator', $data ?? [], null);
        $this->setIfExists('shipsInOriginalPackaging', $data ?? [], null);
        $this->setIfExists('packagingMarkedReturnableIndicator', $data ?? [], null);
        $this->setIfExists('hasRFID', $data ?? [], null);
        $this->setIfExists('isVarietyInd', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getGoodsAndServicesTypeAllowableValues();
        if (!is_null($this->container['goodsAndServicesType']) && !in_array($this->container['goodsAndServicesType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'goodsAndServicesType', must be one of '%s'",
                $this->container['goodsAndServicesType'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFlexibleSpendingAccountEligibleAllowableValues();
        if (!is_null($this->container['flexibleSpendingAccountEligible']) && !in_array($this->container['flexibleSpendingAccountEligible'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'flexibleSpendingAccountEligible', must be one of '%s'",
                $this->container['flexibleSpendingAccountEligible'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getChemicalAerosolPesticideAllowableValues();
        if (!is_null($this->container['chemicalAerosolPesticide']) && !in_array($this->container['chemicalAerosolPesticide'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'chemicalAerosolPesticide', must be one of '%s'",
                $this->container['chemicalAerosolPesticide'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getElectronicsIndicatorAllowableValues();
        if (!is_null($this->container['electronicsIndicator']) && !in_array($this->container['electronicsIndicator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'electronicsIndicator', must be one of '%s'",
                $this->container['electronicsIndicator'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBatteryTechnologyTypeAllowableValues();
        if (!is_null($this->container['batteryTechnologyType']) && !in_array($this->container['batteryTechnologyType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'batteryTechnologyType', must be one of '%s'",
                $this->container['batteryTechnologyType'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHasFuelContainerAllowableValues();
        if (!is_null($this->container['hasFuelContainer']) && !in_array($this->container['hasFuelContainer'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'hasFuelContainer', must be one of '%s'",
                $this->container['hasFuelContainer'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getContainsPaperWoodAllowableValues();
        if (!is_null($this->container['containsPaperWood']) && !in_array($this->container['containsPaperWood'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'containsPaperWood', must be one of '%s'",
                $this->container['containsPaperWood'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getContainsMercuryAllowableValues();
        if (!is_null($this->container['containsMercury']) && !in_array($this->container['containsMercury'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'containsMercury', must be one of '%s'",
                $this->container['containsMercury'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIsCpscRegulatedIndAllowableValues();
        if (!is_null($this->container['isCpscRegulatedInd']) && !in_array($this->container['isCpscRegulatedInd'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'isCpscRegulatedInd', must be one of '%s'",
                $this->container['isCpscRegulatedInd'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMultipackIndicatorAllowableValues();
        if (!is_null($this->container['multipackIndicator']) && !in_array($this->container['multipackIndicator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'multipackIndicator', must be one of '%s'",
                $this->container['multipackIndicator'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getShipsInOriginalPackagingAllowableValues();
        if (!is_null($this->container['shipsInOriginalPackaging']) && !in_array($this->container['shipsInOriginalPackaging'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'shipsInOriginalPackaging', must be one of '%s'",
                $this->container['shipsInOriginalPackaging'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPackagingMarkedReturnableIndicatorAllowableValues();
        if (!is_null($this->container['packagingMarkedReturnableIndicator']) && !in_array($this->container['packagingMarkedReturnableIndicator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'packagingMarkedReturnableIndicator', must be one of '%s'",
                $this->container['packagingMarkedReturnableIndicator'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHasRFIDAllowableValues();
        if (!is_null($this->container['hasRFID']) && !in_array($this->container['hasRFID'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'hasRFID', must be one of '%s'",
                $this->container['hasRFID'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIsVarietyIndAllowableValues();
        if (!is_null($this->container['isVarietyInd']) && !in_array($this->container['isVarietyInd'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'isVarietyInd', must be one of '%s'",
                $this->container['isVarietyInd'],
                implode("', '", $allowedValues)
            );
        }


        return $invalidProperties;
    }

    /**
     * Gets minimumAdvertisedPrice
     *
     * @return float|null
    
     */
    public function getMinimumAdvertisedPrice()
    {
        return $this->container['minimumAdvertisedPrice'];
    }

    /**
     * Sets minimumAdvertisedPrice
     *
     * @param float|null $minimumAdvertisedPrice Indicates the item's lowest advertised price as agreed upon by the supplier and retailer.
     *
     * @return self
    
     */
    public function setMinimumAdvertisedPrice($minimumAdvertisedPrice)
    {
        if (is_null($minimumAdvertisedPrice)) {
            throw new \InvalidArgumentException('non-nullable minimumAdvertisedPrice cannot be null');
        }

        $this->container['minimumAdvertisedPrice'] = $minimumAdvertisedPrice;
        return $this;
    }

    /**
     * Gets signingDescription
     *
     * @return string|null
    
     */
    public function getSigningDescription()
    {
        return $this->container['signingDescription'];
    }

    /**
     * Sets signingDescription
     *
     * @param string|null $signingDescription Indicates a more detailed store description that prints on a 3 x 5 shelf sign.
     *
     * @return self
    
     */
    public function setSigningDescription($signingDescription)
    {
        if (is_null($signingDescription)) {
            throw new \InvalidArgumentException('non-nullable signingDescription cannot be null');
        }

        $this->container['signingDescription'] = $signingDescription;
        return $this;
    }

    /**
     * Gets shopDescription
     *
     * @return string|null
    
     */
    public function getShopDescription()
    {
        return $this->container['shopDescription'];
    }

    /**
     * Sets shopDescription
     *
     * @param string|null $shopDescription Indicates a description of various groupings of clothing.  Combining the fineline number with the `shopDescription` creates the ticket description. This is only used for softlines and footwear.  Fineline refers to a group of items within a department that show similar sales patterns. Softlines refers tp goods that are literally soft, such as clothing and bedding.
     *
     * @return self
    
     */
    public function setShopDescription($shopDescription)
    {
        if (is_null($shopDescription)) {
            throw new \InvalidArgumentException('non-nullable shopDescription cannot be null');
        }

        $this->container['shopDescription'] = $shopDescription;
        return $this;
    }

    /**
     * Gets goodsAndServicesType
     *
     * @return string|null
    
     */
    public function getGoodsAndServicesType()
    {
        return $this->container['goodsAndServicesType'];
    }

    /**
     * Sets goodsAndServicesType
     *
     * @param string|null $goodsAndServicesType Indicates the description of type of good or service being sold.  Valid values are:  | Value | Meaning | | ----------- | ----------- | | Service  | The item is a service. | | Physical | The item is a physical object. | | Digital  | The item is a digital or electronic product. |
     *
     * @return self
    
     */
    public function setGoodsAndServicesType($goodsAndServicesType)
    {
        if (is_null($goodsAndServicesType)) {
            throw new \InvalidArgumentException('non-nullable goodsAndServicesType cannot be null');
        }
        $allowedValues = $this->getGoodsAndServicesTypeAllowableValues();
        if (!in_array($goodsAndServicesType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'goodsAndServicesType', must be one of '%s'",
                    $goodsAndServicesType,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['goodsAndServicesType'] = $goodsAndServicesType;
        return $this;
    }

    /**
     * Gets sustainabilityFeatureCode
     *
     * @return string[]|null
    
     */
    public function getSustainabilityFeatureCode()
    {
        return $this->container['sustainabilityFeatureCode'];
    }

    /**
     * Sets sustainabilityFeatureCode
     *
     * @param string[]|null $sustainabilityFeatureCode Indicates an item's feature contributes to sustainability initiatives.
     *
     * @return self
    
     */
    public function setSustainabilityFeatureCode($sustainabilityFeatureCode)
    {
        if (is_null($sustainabilityFeatureCode)) {
            throw new \InvalidArgumentException('non-nullable sustainabilityFeatureCode cannot be null');
        }

        $this->container['sustainabilityFeatureCode'] = $sustainabilityFeatureCode;
        return $this;
    }

    /**
     * Gets flexibleSpendingAccountEligible
     *
     * @return string|null
    
     */
    public function getFlexibleSpendingAccountEligible()
    {
        return $this->container['flexibleSpendingAccountEligible'];
    }

    /**
     * Sets flexibleSpendingAccountEligible
     *
     * @param string|null $flexibleSpendingAccountEligible Indicates the item is eligible for using a flexible spending account (FSA).  If `YES`, the item is eligible for using a flexible spending account (FSA).  If `NO`, the item is not eligible for using a flexible spending account (FSA).
     *
     * @return self
    
     */
    public function setFlexibleSpendingAccountEligible($flexibleSpendingAccountEligible)
    {
        if (is_null($flexibleSpendingAccountEligible)) {
            throw new \InvalidArgumentException('non-nullable flexibleSpendingAccountEligible cannot be null');
        }
        $allowedValues = $this->getFlexibleSpendingAccountEligibleAllowableValues();
        if (!in_array($flexibleSpendingAccountEligible, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'flexibleSpendingAccountEligible', must be one of '%s'",
                    $flexibleSpendingAccountEligible,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['flexibleSpendingAccountEligible'] = $flexibleSpendingAccountEligible;
        return $this;
    }

    /**
     * Gets stateRestrictions
     *
     * @return \Walmart\Models\Supplier\US\Items\StateRestrictions[]|null
    
     */
    public function getStateRestrictions()
    {
        return $this->container['stateRestrictions'];
    }

    /**
     * Sets stateRestrictions
     *
     * @param \Walmart\Models\Supplier\US\Items\StateRestrictions[]|null $stateRestrictions Indicates a list of states and ZIP codes that the item cannot be sold in.
     *
     * @return self
    
     */
    public function setStateRestrictions($stateRestrictions)
    {
        if (is_null($stateRestrictions)) {
            throw new \InvalidArgumentException('non-nullable stateRestrictions cannot be null');
        }

        $this->container['stateRestrictions'] = $stateRestrictions;
        return $this;
    }

    /**
     * Gets chemicalAerosolPesticide
     *
     * @return string|null
    
     */
    public function getChemicalAerosolPesticide()
    {
        return $this->container['chemicalAerosolPesticide'];
    }

    /**
     * Sets chemicalAerosolPesticide
     *
     * @param string|null $chemicalAerosolPesticide Indicates the item contains a chemical, pesticide, or aerosol.  If `YES`, the item contains a chemical, pesticide, or aerosol.  If `NO`, the item does not contain a chemical, pesticide, or aerosol.  For definitions and examples, see <a href=\"https://supplierhelp.walmart.com/s/guide?article=000007868\" target=\"_blank\">WERCSmart</a>.
     *
     * @return self
    
     */
    public function setChemicalAerosolPesticide($chemicalAerosolPesticide)
    {
        if (is_null($chemicalAerosolPesticide)) {
            throw new \InvalidArgumentException('non-nullable chemicalAerosolPesticide cannot be null');
        }
        $allowedValues = $this->getChemicalAerosolPesticideAllowableValues();
        if (!in_array($chemicalAerosolPesticide, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'chemicalAerosolPesticide', must be one of '%s'",
                    $chemicalAerosolPesticide,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['chemicalAerosolPesticide'] = $chemicalAerosolPesticide;
        return $this;
    }

    /**
     * Gets electronicsIndicator
     *
     * @return string|null
    
     */
    public function getElectronicsIndicator()
    {
        return $this->container['electronicsIndicator'];
    }

    /**
     * Sets electronicsIndicator
     *
     * @param string|null $electronicsIndicator Indicates the item is electronic.  An electronic device is defined as item of merchandise containing a circuit board and/or electrical wiring, including, but not limited to, any item of merchandise with a screen.  If `YES`, the item is electronic.  If `NO`, the item is not electronic.
     *
     * @return self
    
     */
    public function setElectronicsIndicator($electronicsIndicator)
    {
        if (is_null($electronicsIndicator)) {
            throw new \InvalidArgumentException('non-nullable electronicsIndicator cannot be null');
        }
        $allowedValues = $this->getElectronicsIndicatorAllowableValues();
        if (!in_array($electronicsIndicator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'electronicsIndicator', must be one of '%s'",
                    $electronicsIndicator,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['electronicsIndicator'] = $electronicsIndicator;
        return $this;
    }

    /**
     * Gets batteryTechnologyType
     *
     * @return string|null
    
     */
    public function getBatteryTechnologyType()
    {
        return $this->container['batteryTechnologyType'];
    }

    /**
     * Sets batteryTechnologyType
     *
     * @param string|null $batteryTechnologyType Indicates the battery technology type.
     *
     * @return self
    
     */
    public function setBatteryTechnologyType($batteryTechnologyType)
    {
        if (is_null($batteryTechnologyType)) {
            throw new \InvalidArgumentException('non-nullable batteryTechnologyType cannot be null');
        }
        $allowedValues = $this->getBatteryTechnologyTypeAllowableValues();
        if (!in_array($batteryTechnologyType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'batteryTechnologyType', must be one of '%s'",
                    $batteryTechnologyType,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['batteryTechnologyType'] = $batteryTechnologyType;
        return $this;
    }

    /**
     * Gets hasFuelContainer
     *
     * @return string|null
    
     */
    public function getHasFuelContainer()
    {
        return $this->container['hasFuelContainer'];
    }

    /**
     * Sets hasFuelContainer
     *
     * @param string|null $hasFuelContainer Indicates the item has an empty container that may be filled with fluids.  Examples of fluids include any type of fuel, carbon dioxide, and propane gas.  If `YES`, the item has an empty container that may be filled with fluids.  If `NO`, the item does not an empty container that may be filled with fluids.
     *
     * @return self
    
     */
    public function setHasFuelContainer($hasFuelContainer)
    {
        if (is_null($hasFuelContainer)) {
            throw new \InvalidArgumentException('non-nullable hasFuelContainer cannot be null');
        }
        $allowedValues = $this->getHasFuelContainerAllowableValues();
        if (!in_array($hasFuelContainer, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'hasFuelContainer', must be one of '%s'",
                    $hasFuelContainer,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['hasFuelContainer'] = $hasFuelContainer;
        return $this;
    }

    /**
     * Gets containsPaperWood
     *
     * @return string|null
    
     */
    public function getContainsPaperWood()
    {
        return $this->container['containsPaperWood'];
    }

    /**
     * Sets containsPaperWood
     *
     * @param string|null $containsPaperWood Indicates any portion of the item is made from paper or wood.  Reusable packaging is packaging that is intended to stay in use with the item. For example, a wooden box that a croquet set is stored after use is considered reusable packaging.  If `YES`, some portion of the item is made from paper or wood.  If `NO`, some portion of the item is not made from paper or wood.
     *
     * @return self
    
     */
    public function setContainsPaperWood($containsPaperWood)
    {
        if (is_null($containsPaperWood)) {
            throw new \InvalidArgumentException('non-nullable containsPaperWood cannot be null');
        }
        $allowedValues = $this->getContainsPaperWoodAllowableValues();
        if (!in_array($containsPaperWood, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'containsPaperWood', must be one of '%s'",
                    $containsPaperWood,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['containsPaperWood'] = $containsPaperWood;
        return $this;
    }

    /**
     * Gets containsMercury
     *
     * @return string|null
    
     */
    public function getContainsMercury()
    {
        return $this->container['containsMercury'];
    }

    /**
     * Sets containsMercury
     *
     * @param string|null $containsMercury Indicates the item contains mercury.  This includes any component, such as reusable packaging, that has mercury. For example, a wooden box that a croquet set is stored after use is considered reusable packaging.  If `YES`, the item contains mercury.  If `NO`, the item does not contain mercury.
     *
     * @return self
    
     */
    public function setContainsMercury($containsMercury)
    {
        if (is_null($containsMercury)) {
            throw new \InvalidArgumentException('non-nullable containsMercury cannot be null');
        }
        $allowedValues = $this->getContainsMercuryAllowableValues();
        if (!in_array($containsMercury, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'containsMercury', must be one of '%s'",
                    $containsMercury,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['containsMercury'] = $containsMercury;
        return $this;
    }

    /**
     * Gets isCpscRegulatedInd
     *
     * @return string|null
    
     */
    public function getIsCpscRegulatedInd()
    {
        return $this->container['isCpscRegulatedInd'];
    }

    /**
     * Sets isCpscRegulatedInd
     *
     * @param string|null $isCpscRegulatedInd Indicates the item is likely to be regulated by the Consumer Product Safety Commission (CPSC).  If `YES`, the item is likely to be regulated by the Consumer Product Safety Commission (CPSC).  If `NO`, the item is not likely to be regulated by the Consumer Product Safety Commission (CPSC).
     *
     * @return self
    
     */
    public function setIsCpscRegulatedInd($isCpscRegulatedInd)
    {
        if (is_null($isCpscRegulatedInd)) {
            throw new \InvalidArgumentException('non-nullable isCpscRegulatedInd cannot be null');
        }
        $allowedValues = $this->getIsCpscRegulatedIndAllowableValues();
        if (!in_array($isCpscRegulatedInd, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'isCpscRegulatedInd', must be one of '%s'",
                    $isCpscRegulatedInd,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['isCpscRegulatedInd'] = $isCpscRegulatedInd;
        return $this;
    }

    /**
     * Gets multipackIndicator
     *
     * @return string|null
    
     */
    public function getMultipackIndicator()
    {
        return $this->container['multipackIndicator'];
    }

    /**
     * Sets multipackIndicator
     *
     * @param string|null $multipackIndicator Indicates the item has multiple components that may have different disposal requirements.  If `YES`, the item has multiple components that may have different disposal requirements.  If `NO`, the item does not have multiple components that may have different disposal requirements.
     *
     * @return self
    
     */
    public function setMultipackIndicator($multipackIndicator)
    {
        if (is_null($multipackIndicator)) {
            throw new \InvalidArgumentException('non-nullable multipackIndicator cannot be null');
        }
        $allowedValues = $this->getMultipackIndicatorAllowableValues();
        if (!in_array($multipackIndicator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'multipackIndicator', must be one of '%s'",
                    $multipackIndicator,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['multipackIndicator'] = $multipackIndicator;
        return $this;
    }

    /**
     * Gets shipsInOriginalPackaging
     *
     * @return string|null
    
     */
    public function getShipsInOriginalPackaging()
    {
        return $this->container['shipsInOriginalPackaging'];
    }

    /**
     * Sets shipsInOriginalPackaging
     *
     * @param string|null $shipsInOriginalPackaging Indicates the product can be shipped in the original packaging without being put in an outer box.  If `YES`, the product can be shipped in the original packaging without being put in an outer box.  If `NO`, the product cannot be shipped in the original packaging without being put in an outer box.
     *
     * @return self
    
     */
    public function setShipsInOriginalPackaging($shipsInOriginalPackaging)
    {
        if (is_null($shipsInOriginalPackaging)) {
            throw new \InvalidArgumentException('non-nullable shipsInOriginalPackaging cannot be null');
        }
        $allowedValues = $this->getShipsInOriginalPackagingAllowableValues();
        if (!in_array($shipsInOriginalPackaging, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'shipsInOriginalPackaging', must be one of '%s'",
                    $shipsInOriginalPackaging,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['shipsInOriginalPackaging'] = $shipsInOriginalPackaging;
        return $this;
    }

    /**
     * Gets packagingMarkedReturnableIndicator
     *
     * @return string|null
    
     */
    public function getPackagingMarkedReturnableIndicator()
    {
        return $this->container['packagingMarkedReturnableIndicator'];
    }

    /**
     * Sets packagingMarkedReturnableIndicator
     *
     * @param string|null $packagingMarkedReturnableIndicator Indicates the product packaging is marked as returnable with or without a deposit.  If `YES`, the product packaging is marked as returnable with or without a deposit.  If `NO`, the product packaging is not marked as returnable with or without a deposit.
     *
     * @return self
    
     */
    public function setPackagingMarkedReturnableIndicator($packagingMarkedReturnableIndicator)
    {
        if (is_null($packagingMarkedReturnableIndicator)) {
            throw new \InvalidArgumentException('non-nullable packagingMarkedReturnableIndicator cannot be null');
        }
        $allowedValues = $this->getPackagingMarkedReturnableIndicatorAllowableValues();
        if (!in_array($packagingMarkedReturnableIndicator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'packagingMarkedReturnableIndicator', must be one of '%s'",
                    $packagingMarkedReturnableIndicator,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['packagingMarkedReturnableIndicator'] = $packagingMarkedReturnableIndicator;
        return $this;
    }

    /**
     * Gets hasRFID
     *
     * @return string|null
    
     */
    public function getHasRFID()
    {
        return $this->container['hasRFID'];
    }

    /**
     * Sets hasRFID
     *
     * @param string|null $hasRFID Indicates the product includes a radio frequency identification (RFID) tracking device.  If `YES`, the product includes a radio frequency identification (RFID) tracking device.  If `NO`, the product does not include a radio frequency identification (RFID) tracking device.
     *
     * @return self
    
     */
    public function setHasRFID($hasRFID)
    {
        if (is_null($hasRFID)) {
            throw new \InvalidArgumentException('non-nullable hasRFID cannot be null');
        }
        $allowedValues = $this->getHasRFIDAllowableValues();
        if (!in_array($hasRFID, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'hasRFID', must be one of '%s'",
                    $hasRFID,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['hasRFID'] = $hasRFID;
        return $this;
    }

    /**
     * Gets isVarietyInd
     *
     * @return string|null
    
     */
    public function getIsVarietyInd()
    {
        return $this->container['isVarietyInd'];
    }

    /**
     * Sets isVarietyInd
     *
     * @param string|null $isVarietyInd Indicates assorted items will share one universal product code (UPC) and will be shipped in the same box and not as an assortment.  If `YES`, assorted items will share one universal product code (UPC).  If `NO`, assorted items will not share one universal product code (UPC).
     *
     * @return self
    
     */
    public function setIsVarietyInd($isVarietyInd)
    {
        if (is_null($isVarietyInd)) {
            throw new \InvalidArgumentException('non-nullable isVarietyInd cannot be null');
        }
        $allowedValues = $this->getIsVarietyIndAllowableValues();
        if (!in_array($isVarietyInd, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'isVarietyInd', must be one of '%s'",
                    $isVarietyInd,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['isVarietyInd'] = $isVarietyInd;
        return $this;
    }
}
