<?php

/**
 * Pallet
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Item Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\Supplier\US\Items;

use Walmart\Models\BaseModel;

/**
 * Pallet Class Doc Comment
 *
 * @category Class

 * @description Indicates an object defining trade item dimensions of the pallet that is being delivered (if applicable).

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class Pallet extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Pallet';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'palletGTIN' => 'string',
        'palletDepth' => 'float',
        'palletWidth' => 'float',
        'palletHeight' => 'float',
        'palletWeight' => 'float',
        'qtySellableItemsPallet' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'palletGTIN' => null,
        'palletDepth' => 'double',
        'palletWidth' => 'double',
        'palletHeight' => 'double',
        'palletWeight' => 'double',
        'qtySellableItemsPallet' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'palletGTIN' => false,
        'palletDepth' => false,
        'palletWidth' => false,
        'palletHeight' => false,
        'palletWeight' => false,
        'qtySellableItemsPallet' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'palletGTIN' => 'palletGTIN',
        'palletDepth' => 'palletDepth',
        'palletWidth' => 'palletWidth',
        'palletHeight' => 'palletHeight',
        'palletWeight' => 'palletWeight',
        'qtySellableItemsPallet' => 'qtySellableItemsPallet'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'palletGTIN' => 'setPalletGTIN',
        'palletDepth' => 'setPalletDepth',
        'palletWidth' => 'setPalletWidth',
        'palletHeight' => 'setPalletHeight',
        'palletWeight' => 'setPalletWeight',
        'qtySellableItemsPallet' => 'setQtySellableItemsPallet'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'palletGTIN' => 'getPalletGTIN',
        'palletDepth' => 'getPalletDepth',
        'palletWidth' => 'getPalletWidth',
        'palletHeight' => 'getPalletHeight',
        'palletWeight' => 'getPalletWeight',
        'qtySellableItemsPallet' => 'getQtySellableItemsPallet'
    ];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('palletGTIN', $data ?? [], null);
        $this->setIfExists('palletDepth', $data ?? [], null);
        $this->setIfExists('palletWidth', $data ?? [], null);
        $this->setIfExists('palletHeight', $data ?? [], null);
        $this->setIfExists('palletWeight', $data ?? [], null);
        $this->setIfExists('qtySellableItemsPallet', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];


        return $invalidProperties;
    }

    /**
     * Gets palletGTIN
     *
     * @return string|null
    
     */
    public function getPalletGTIN()
    {
        return $this->container['palletGTIN'];
    }

    /**
     * Sets palletGTIN
     *
     * @param string|null $palletGTIN Indicates global trade item number (in the GTIN-14 format) that identifies the pallet.  The 14-digit Global Trade item number. If the returned value is less than 14 digits, add zeros at the beginning to lengthen it to 14 digits.
     *
     * @return self
    
     */
    public function setPalletGTIN($palletGTIN)
    {
        if (is_null($palletGTIN)) {
            throw new \InvalidArgumentException('non-nullable palletGTIN cannot be null');
        }

        $this->container['palletGTIN'] = $palletGTIN;
        return $this;
    }

    /**
     * Gets palletDepth
     *
     * @return float|null
    
     */
    public function getPalletDepth()
    {
        return $this->container['palletDepth'];
    }

    /**
     * Sets palletDepth
     *
     * @param float|null $palletDepth Indicates the longest horizontal (front to back) measurement (in inches).  If the trade item is the consumable (sellable) unit, this is measured with the product sitting on its natural base and facing forward. If the trade item is not the consumable (sellable) unit, this is measured with the product sitting on its natural base.  For more information, see <a href=\"https://supplierhelp.walmart.com\" target=\"_blank\">Supplier Help</a> and search for *pack dimensions*.
     *
     * @return self
    
     */
    public function setPalletDepth($palletDepth)
    {
        if (is_null($palletDepth)) {
            throw new \InvalidArgumentException('non-nullable palletDepth cannot be null');
        }

        $this->container['palletDepth'] = $palletDepth;
        return $this;
    }

    /**
     * Gets palletWidth
     *
     * @return float|null
    
     */
    public function getPalletWidth()
    {
        return $this->container['palletWidth'];
    }

    /**
     * Sets palletWidth
     *
     * @param float|null $palletWidth Indicates the longest horizontal (left to right) measurement (in inches).  If the trade item is the consumable (sellable) unit, this is measured with the product sitting on its natural base and facing forward. If the trade item is not the consumable (sellable) unit, this is measured with the product sitting on its natural base.  For more information, see <a href=\"https://supplierhelp.walmart.com\" target=\"_blank\">Supplier Help</a> and search for *pack dimensions*.
     *
     * @return self
    
     */
    public function setPalletWidth($palletWidth)
    {
        if (is_null($palletWidth)) {
            throw new \InvalidArgumentException('non-nullable palletWidth cannot be null');
        }

        $this->container['palletWidth'] = $palletWidth;
        return $this;
    }

    /**
     * Gets palletHeight
     *
     * @return float|null
    
     */
    public function getPalletHeight()
    {
        return $this->container['palletHeight'];
    }

    /**
     * Sets palletHeight
     *
     * @param float|null $palletHeight Indicates the longest horizontal (top to bottom) measurement (in inches).  If the trade item is the consumable (sellable) unit, this is measured with the product sitting on its natural base and facing forward. If the trade item is not the consumable (sellable) unit, this is measured with the product sitting on its natural base.  For more information, see <a href=\"https://supplierhelp.walmart.com\" target=\"_blank\">Supplier Help</a> and search for *pack dimensions*.
     *
     * @return self
    
     */
    public function setPalletHeight($palletHeight)
    {
        if (is_null($palletHeight)) {
            throw new \InvalidArgumentException('non-nullable palletHeight cannot be null');
        }

        $this->container['palletHeight'] = $palletHeight;
        return $this;
    }

    /**
     * Gets palletWeight
     *
     * @return float|null
    
     */
    public function getPalletWeight()
    {
        return $this->container['palletWeight'];
    }

    /**
     * Sets palletWeight
     *
     * @param float|null $palletWeight Indicates the weight (in pounds) of the trade item at the pallet level, including all of its packaging materials.
     *
     * @return self
    
     */
    public function setPalletWeight($palletWeight)
    {
        if (is_null($palletWeight)) {
            throw new \InvalidArgumentException('non-nullable palletWeight cannot be null');
        }

        $this->container['palletWeight'] = $palletWeight;
        return $this;
    }

    /**
     * Gets qtySellableItemsPallet
     *
     * @return int|null
    
     */
    public function getQtySellableItemsPallet()
    {
        return $this->container['qtySellableItemsPallet'];
    }

    /**
     * Sets qtySellableItemsPallet
     *
     * @param int|null $qtySellableItemsPallet Indicates the total number of sellable units in the pallet.
     *
     * @return self
    
     */
    public function setQtySellableItemsPallet($qtySellableItemsPallet)
    {
        if (is_null($qtySellableItemsPallet)) {
            throw new \InvalidArgumentException('non-nullable qtySellableItemsPallet cannot be null');
        }

        $this->container['qtySellableItemsPallet'] = $qtySellableItemsPallet;
        return $this;
    }
}
