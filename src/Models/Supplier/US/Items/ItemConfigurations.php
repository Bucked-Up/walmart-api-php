<?php

/**
 * ItemConfigurations
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Item Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\Supplier\US\Items;

use Walmart\Models\BaseModel;

/**
 * ItemConfigurations Class Doc Comment
 *
 * @category Class

 * @description Indicates an array of objects detailing the item configuration.  This view shows one item for every Walmart item number, or the specific item configurations that suppliers sell to the merchant.

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class ItemConfigurations extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ItemConfigurations';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'walmartItemNumber' => 'string',
        'channelSold' => 'string',
        'fulfillmentMethod' => 'string',
        'tradeItemSyncStatusCode' => 'string',
        'supplyItemEffectiveDate' => '\DateTime',
        'supplyItemStatusCode' => 'string',
        'supplyItemStatusChangeDate' => '\DateTime',
        'walmartDepartmentNumber' => 'string',
        'buyingRegionCode' => 'string',
        'finelineNbr' => 'int',
        'accountingDepartmentNbr' => 'string',
        'supplyItemCreateDate' => '\DateTime',
        'seasonYear' => 'int',
        'seasonCode' => 'string',
        'unitCost' => 'float',
        'countryOfOriginAssembly' => 'string',
        'batchNumberIndicator' => 'string',
        'factoryId' => 'string[]',
        'shippingDimensions' => '\Walmart\Models\Supplier\US\Items\ShippingDimensions',
        'mustShipAlone' => 'string',
        'supplierMinimumOrderQuantity' => 'int',
        'replenishItemSubType' => 'int',
        'supplyItemExpireDate' => '\DateTime',
        'informationProviderGLN' => 'string',
        'supplierStockID' => 'string',
        'consumerItemNumber' => 'string',
        'nationalDrugCode10' => 'string',
        'nationalDrugCode11' => 'string',
        'nationalDrugCode12' => 'string',
        'markupPercentage' => 'float',
        'prePriceLabelAmount' => 'float',
        'countryOfOriginComponents' => 'string[]',
        'allowedTimeInWarehouseQty' => 'int',
        'palletRoundingPercent' => 'float',
        'warehouseMinLifeRemainingtoReceiveQuantity' => 'int',
        'isConveyable' => 'string',
        'specialHandlingInstructionCode' => 'string',
        'idealTemperatureRangeLowQty' => 'string',
        'idealTemperatureRangeHighQty' => 'string',
        'isTemperatureSensitive' => 'string',
        'acceptableTemperatureRangeLowQty' => 'string',
        'acceptableTemperatureRangeHighQty' => 'string',
        'isOversized' => 'string',
        'exclusiveSupplyDCNbr' => 'int',
        'isMasterCarton' => 'string',
        'orderSizingFactorQty' => 'float',
        'rppc' => 'string',
        'warehousePackQuantity' => 'int',
        'warehousePackGtin' => 'string',
        'isBreakPack' => 'string',
        'palletTi' => 'int',
        'palletHi' => 'int',
        'orderableGTIN' => 'string',
        'vendorPackQuantity' => 'int',
        'each' => '\Walmart\Models\Supplier\US\Items\Each',
        'innerPack' => '\Walmart\Models\Supplier\US\Items\InnerPack',
        'case' => '\Walmart\Models\Supplier\US\Items\ModelCase',
        'pallet' => '\Walmart\Models\Supplier\US\Items\Pallet',
        'publishedGTIN' => 'string',
        'palletSizeType' => 'string',
        'tradeItemNetWeight' => 'float',
        'isDEAReported' => 'string',
        'orderablePackWeightFormat' => 'string',
        'storeMinimumLifeRemainingToReceive' => 'int',
        'plu' => 'int',
        'orderablePackType' => 'string',
        'sendTraitCodes' => 'string',
        'omitTraitCodes' => 'string',
        'destinationFormatCode' => 'string[]',
        'isCancelWhenOutInd' => 'string',
        'specialConsiderationCode' => 'string',
        'storeReceiptDescription' => 'string',
        'storeLabelDescription' => 'string',
        'shelf1Color' => 'string',
        'shelf2Size' => 'string',
        'isWeighableAtRegister' => 'string',
        'isBackroomScaleInd' => 'string',
        'hasRFID' => 'string',
        'hasSecurityTag' => 'string',
        'supplyItemSecondaryDescription' => 'string',
        'isShelfRotationInd' => 'string',
        'isCorporateReplenishable' => 'string',
        'isReplenishedByUnitInd' => 'string',
        'mbmTypeCode' => 'string',
        'replenishmentItemType' => 'string',
        'crushFactorCode' => 'string',
        'warehouseAlignmentCode' => 'string',
        'segregationCode' => 'string',
        'commodityId' => 'string',
        'warehouseAreaCode' => 'string',
        'warehouseRotationType' => 'int',
        'eachDataCarriers' => '\Walmart\Models\Supplier\US\Items\EachDataCarriers[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'walmartItemNumber' => null,
        'channelSold' => null,
        'fulfillmentMethod' => null,
        'tradeItemSyncStatusCode' => null,
        'supplyItemEffectiveDate' => 'date-time',
        'supplyItemStatusCode' => null,
        'supplyItemStatusChangeDate' => 'date-time',
        'walmartDepartmentNumber' => null,
        'buyingRegionCode' => null,
        'finelineNbr' => 'int32',
        'accountingDepartmentNbr' => null,
        'supplyItemCreateDate' => 'date-time',
        'seasonYear' => 'int32',
        'seasonCode' => null,
        'unitCost' => null,
        'countryOfOriginAssembly' => null,
        'batchNumberIndicator' => null,
        'factoryId' => null,
        'shippingDimensions' => null,
        'mustShipAlone' => null,
        'supplierMinimumOrderQuantity' => 'int32',
        'replenishItemSubType' => 'int32',
        'supplyItemExpireDate' => 'date-time',
        'informationProviderGLN' => null,
        'supplierStockID' => null,
        'consumerItemNumber' => null,
        'nationalDrugCode10' => null,
        'nationalDrugCode11' => null,
        'nationalDrugCode12' => null,
        'markupPercentage' => 'double',
        'prePriceLabelAmount' => 'double',
        'countryOfOriginComponents' => null,
        'allowedTimeInWarehouseQty' => 'int32',
        'palletRoundingPercent' => 'double',
        'warehouseMinLifeRemainingtoReceiveQuantity' => 'int32',
        'isConveyable' => null,
        'specialHandlingInstructionCode' => null,
        'idealTemperatureRangeLowQty' => null,
        'idealTemperatureRangeHighQty' => null,
        'isTemperatureSensitive' => null,
        'acceptableTemperatureRangeLowQty' => null,
        'acceptableTemperatureRangeHighQty' => null,
        'isOversized' => null,
        'exclusiveSupplyDCNbr' => 'int32',
        'isMasterCarton' => null,
        'orderSizingFactorQty' => 'double',
        'rppc' => null,
        'warehousePackQuantity' => 'int32',
        'warehousePackGtin' => null,
        'isBreakPack' => null,
        'palletTi' => 'int32',
        'palletHi' => 'int32',
        'orderableGTIN' => null,
        'vendorPackQuantity' => 'int32',
        'each' => null,
        'innerPack' => null,
        'case' => null,
        'pallet' => null,
        'publishedGTIN' => null,
        'palletSizeType' => null,
        'tradeItemNetWeight' => 'double',
        'isDEAReported' => null,
        'orderablePackWeightFormat' => null,
        'storeMinimumLifeRemainingToReceive' => 'int32',
        'plu' => 'int32',
        'orderablePackType' => null,
        'sendTraitCodes' => null,
        'omitTraitCodes' => null,
        'destinationFormatCode' => null,
        'isCancelWhenOutInd' => null,
        'specialConsiderationCode' => null,
        'storeReceiptDescription' => null,
        'storeLabelDescription' => null,
        'shelf1Color' => null,
        'shelf2Size' => null,
        'isWeighableAtRegister' => null,
        'isBackroomScaleInd' => null,
        'hasRFID' => null,
        'hasSecurityTag' => null,
        'supplyItemSecondaryDescription' => null,
        'isShelfRotationInd' => null,
        'isCorporateReplenishable' => null,
        'isReplenishedByUnitInd' => null,
        'mbmTypeCode' => null,
        'replenishmentItemType' => null,
        'crushFactorCode' => null,
        'warehouseAlignmentCode' => null,
        'segregationCode' => null,
        'commodityId' => null,
        'warehouseAreaCode' => null,
        'warehouseRotationType' => 'int32',
        'eachDataCarriers' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'walmartItemNumber' => false,
        'channelSold' => false,
        'fulfillmentMethod' => false,
        'tradeItemSyncStatusCode' => false,
        'supplyItemEffectiveDate' => false,
        'supplyItemStatusCode' => false,
        'supplyItemStatusChangeDate' => false,
        'walmartDepartmentNumber' => false,
        'buyingRegionCode' => false,
        'finelineNbr' => false,
        'accountingDepartmentNbr' => false,
        'supplyItemCreateDate' => false,
        'seasonYear' => false,
        'seasonCode' => false,
        'unitCost' => false,
        'countryOfOriginAssembly' => false,
        'batchNumberIndicator' => false,
        'factoryId' => false,
        'shippingDimensions' => false,
        'mustShipAlone' => false,
        'supplierMinimumOrderQuantity' => false,
        'replenishItemSubType' => false,
        'supplyItemExpireDate' => false,
        'informationProviderGLN' => false,
        'supplierStockID' => false,
        'consumerItemNumber' => false,
        'nationalDrugCode10' => false,
        'nationalDrugCode11' => false,
        'nationalDrugCode12' => false,
        'markupPercentage' => false,
        'prePriceLabelAmount' => false,
        'countryOfOriginComponents' => false,
        'allowedTimeInWarehouseQty' => false,
        'palletRoundingPercent' => false,
        'warehouseMinLifeRemainingtoReceiveQuantity' => false,
        'isConveyable' => false,
        'specialHandlingInstructionCode' => false,
        'idealTemperatureRangeLowQty' => false,
        'idealTemperatureRangeHighQty' => false,
        'isTemperatureSensitive' => false,
        'acceptableTemperatureRangeLowQty' => false,
        'acceptableTemperatureRangeHighQty' => false,
        'isOversized' => false,
        'exclusiveSupplyDCNbr' => false,
        'isMasterCarton' => false,
        'orderSizingFactorQty' => false,
        'rppc' => false,
        'warehousePackQuantity' => false,
        'warehousePackGtin' => false,
        'isBreakPack' => false,
        'palletTi' => false,
        'palletHi' => false,
        'orderableGTIN' => false,
        'vendorPackQuantity' => false,
        'each' => false,
        'innerPack' => false,
        'case' => false,
        'pallet' => false,
        'publishedGTIN' => false,
        'palletSizeType' => false,
        'tradeItemNetWeight' => false,
        'isDEAReported' => false,
        'orderablePackWeightFormat' => false,
        'storeMinimumLifeRemainingToReceive' => false,
        'plu' => false,
        'orderablePackType' => false,
        'sendTraitCodes' => false,
        'omitTraitCodes' => false,
        'destinationFormatCode' => false,
        'isCancelWhenOutInd' => false,
        'specialConsiderationCode' => false,
        'storeReceiptDescription' => false,
        'storeLabelDescription' => false,
        'shelf1Color' => false,
        'shelf2Size' => false,
        'isWeighableAtRegister' => false,
        'isBackroomScaleInd' => false,
        'hasRFID' => false,
        'hasSecurityTag' => false,
        'supplyItemSecondaryDescription' => false,
        'isShelfRotationInd' => false,
        'isCorporateReplenishable' => false,
        'isReplenishedByUnitInd' => false,
        'mbmTypeCode' => false,
        'replenishmentItemType' => false,
        'crushFactorCode' => false,
        'warehouseAlignmentCode' => false,
        'segregationCode' => false,
        'commodityId' => false,
        'warehouseAreaCode' => false,
        'warehouseRotationType' => false,
        'eachDataCarriers' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'walmartItemNumber' => 'walmartItemNumber',
        'channelSold' => 'channelSold',
        'fulfillmentMethod' => 'fulfillmentMethod',
        'tradeItemSyncStatusCode' => 'tradeItemSyncStatusCode',
        'supplyItemEffectiveDate' => 'supplyItemEffectiveDate',
        'supplyItemStatusCode' => 'supplyItemStatusCode',
        'supplyItemStatusChangeDate' => 'supplyItemStatusChangeDate',
        'walmartDepartmentNumber' => 'walmartDepartmentNumber',
        'buyingRegionCode' => 'buyingRegionCode',
        'finelineNbr' => 'finelineNbr',
        'accountingDepartmentNbr' => 'accountingDepartmentNbr',
        'supplyItemCreateDate' => 'supplyItemCreateDate',
        'seasonYear' => 'seasonYear',
        'seasonCode' => 'seasonCode',
        'unitCost' => 'unitCost',
        'countryOfOriginAssembly' => 'countryOfOriginAssembly',
        'batchNumberIndicator' => 'batchNumberIndicator',
        'factoryId' => 'factoryId',
        'shippingDimensions' => 'shippingDimensions',
        'mustShipAlone' => 'MustShipAlone',
        'supplierMinimumOrderQuantity' => 'supplierMinimumOrderQuantity',
        'replenishItemSubType' => 'replenishItemSubType',
        'supplyItemExpireDate' => 'supplyItemExpireDate',
        'informationProviderGLN' => 'informationProviderGLN',
        'supplierStockID' => 'supplierStockID',
        'consumerItemNumber' => 'consumerItemNumber',
        'nationalDrugCode10' => 'nationalDrugCode10',
        'nationalDrugCode11' => 'nationalDrugCode11',
        'nationalDrugCode12' => 'nationalDrugCode12',
        'markupPercentage' => 'markupPercentage',
        'prePriceLabelAmount' => 'prePriceLabelAmount',
        'countryOfOriginComponents' => 'countryOfOriginComponents',
        'allowedTimeInWarehouseQty' => 'allowedTimeInWarehouseQty',
        'palletRoundingPercent' => 'palletRoundingPercent',
        'warehouseMinLifeRemainingtoReceiveQuantity' => 'warehouseMinLifeRemainingtoReceiveQuantity',
        'isConveyable' => 'isConveyable',
        'specialHandlingInstructionCode' => 'specialHandlingInstructionCode',
        'idealTemperatureRangeLowQty' => 'idealTemperatureRangeLowQty',
        'idealTemperatureRangeHighQty' => 'idealTemperatureRangeHighQty',
        'isTemperatureSensitive' => 'isTemperatureSensitive',
        'acceptableTemperatureRangeLowQty' => 'acceptableTemperatureRangeLowQty',
        'acceptableTemperatureRangeHighQty' => 'acceptableTemperatureRangeHighQty',
        'isOversized' => 'isOversized',
        'exclusiveSupplyDCNbr' => 'exclusiveSupplyDCNbr',
        'isMasterCarton' => 'isMasterCarton',
        'orderSizingFactorQty' => 'orderSizingFactorQty',
        'rppc' => 'rppc',
        'warehousePackQuantity' => 'warehousePackQuantity',
        'warehousePackGtin' => 'warehousePackGtin',
        'isBreakPack' => 'isBreakPack',
        'palletTi' => 'palletTi',
        'palletHi' => 'palletHi',
        'orderableGTIN' => 'orderableGTIN',
        'vendorPackQuantity' => 'vendorPackQuantity',
        'each' => 'each',
        'innerPack' => 'innerPack',
        'case' => 'case',
        'pallet' => 'pallet',
        'publishedGTIN' => 'publishedGTIN',
        'palletSizeType' => 'palletSizeType',
        'tradeItemNetWeight' => 'tradeItemNetWeight',
        'isDEAReported' => 'isDEAReported',
        'orderablePackWeightFormat' => 'orderablePackWeightFormat',
        'storeMinimumLifeRemainingToReceive' => 'storeMinimumLifeRemainingToReceive',
        'plu' => 'plu',
        'orderablePackType' => 'orderable_pack_type',
        'sendTraitCodes' => 'sendTraitCodes',
        'omitTraitCodes' => 'omitTraitCodes',
        'destinationFormatCode' => 'destinationFormatCode',
        'isCancelWhenOutInd' => 'isCancelWhenOutInd',
        'specialConsiderationCode' => 'specialConsiderationCode',
        'storeReceiptDescription' => 'storeReceiptDescription',
        'storeLabelDescription' => 'storeLabelDescription',
        'shelf1Color' => 'shelf1Color',
        'shelf2Size' => 'shelf2Size',
        'isWeighableAtRegister' => 'isWeighableAtRegister',
        'isBackroomScaleInd' => 'isBackroomScaleInd',
        'hasRFID' => 'hasRFID',
        'hasSecurityTag' => 'hasSecurityTag',
        'supplyItemSecondaryDescription' => 'supplyItemSecondaryDescription',
        'isShelfRotationInd' => 'isShelfRotationInd',
        'isCorporateReplenishable' => 'isCorporateReplenishable',
        'isReplenishedByUnitInd' => 'isReplenishedByUnitInd',
        'mbmTypeCode' => 'mbmTypeCode',
        'replenishmentItemType' => 'replenishmentItemType',
        'crushFactorCode' => 'crushFactorCode',
        'warehouseAlignmentCode' => 'warehouseAlignmentCode',
        'segregationCode' => 'segregationCode',
        'commodityId' => 'commodityId',
        'warehouseAreaCode' => 'warehouseAreaCode',
        'warehouseRotationType' => 'warehouseRotationType',
        'eachDataCarriers' => 'eachDataCarriers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'walmartItemNumber' => 'setWalmartItemNumber',
        'channelSold' => 'setChannelSold',
        'fulfillmentMethod' => 'setFulfillmentMethod',
        'tradeItemSyncStatusCode' => 'setTradeItemSyncStatusCode',
        'supplyItemEffectiveDate' => 'setSupplyItemEffectiveDate',
        'supplyItemStatusCode' => 'setSupplyItemStatusCode',
        'supplyItemStatusChangeDate' => 'setSupplyItemStatusChangeDate',
        'walmartDepartmentNumber' => 'setWalmartDepartmentNumber',
        'buyingRegionCode' => 'setBuyingRegionCode',
        'finelineNbr' => 'setFinelineNbr',
        'accountingDepartmentNbr' => 'setAccountingDepartmentNbr',
        'supplyItemCreateDate' => 'setSupplyItemCreateDate',
        'seasonYear' => 'setSeasonYear',
        'seasonCode' => 'setSeasonCode',
        'unitCost' => 'setUnitCost',
        'countryOfOriginAssembly' => 'setCountryOfOriginAssembly',
        'batchNumberIndicator' => 'setBatchNumberIndicator',
        'factoryId' => 'setFactoryId',
        'shippingDimensions' => 'setShippingDimensions',
        'mustShipAlone' => 'setMustShipAlone',
        'supplierMinimumOrderQuantity' => 'setSupplierMinimumOrderQuantity',
        'replenishItemSubType' => 'setReplenishItemSubType',
        'supplyItemExpireDate' => 'setSupplyItemExpireDate',
        'informationProviderGLN' => 'setInformationProviderGLN',
        'supplierStockID' => 'setSupplierStockID',
        'consumerItemNumber' => 'setConsumerItemNumber',
        'nationalDrugCode10' => 'setNationalDrugCode10',
        'nationalDrugCode11' => 'setNationalDrugCode11',
        'nationalDrugCode12' => 'setNationalDrugCode12',
        'markupPercentage' => 'setMarkupPercentage',
        'prePriceLabelAmount' => 'setPrePriceLabelAmount',
        'countryOfOriginComponents' => 'setCountryOfOriginComponents',
        'allowedTimeInWarehouseQty' => 'setAllowedTimeInWarehouseQty',
        'palletRoundingPercent' => 'setPalletRoundingPercent',
        'warehouseMinLifeRemainingtoReceiveQuantity' => 'setWarehouseMinLifeRemainingtoReceiveQuantity',
        'isConveyable' => 'setIsConveyable',
        'specialHandlingInstructionCode' => 'setSpecialHandlingInstructionCode',
        'idealTemperatureRangeLowQty' => 'setIdealTemperatureRangeLowQty',
        'idealTemperatureRangeHighQty' => 'setIdealTemperatureRangeHighQty',
        'isTemperatureSensitive' => 'setIsTemperatureSensitive',
        'acceptableTemperatureRangeLowQty' => 'setAcceptableTemperatureRangeLowQty',
        'acceptableTemperatureRangeHighQty' => 'setAcceptableTemperatureRangeHighQty',
        'isOversized' => 'setIsOversized',
        'exclusiveSupplyDCNbr' => 'setExclusiveSupplyDCNbr',
        'isMasterCarton' => 'setIsMasterCarton',
        'orderSizingFactorQty' => 'setOrderSizingFactorQty',
        'rppc' => 'setRppc',
        'warehousePackQuantity' => 'setWarehousePackQuantity',
        'warehousePackGtin' => 'setWarehousePackGtin',
        'isBreakPack' => 'setIsBreakPack',
        'palletTi' => 'setPalletTi',
        'palletHi' => 'setPalletHi',
        'orderableGTIN' => 'setOrderableGTIN',
        'vendorPackQuantity' => 'setVendorPackQuantity',
        'each' => 'setEach',
        'innerPack' => 'setInnerPack',
        'case' => 'setCase',
        'pallet' => 'setPallet',
        'publishedGTIN' => 'setPublishedGTIN',
        'palletSizeType' => 'setPalletSizeType',
        'tradeItemNetWeight' => 'setTradeItemNetWeight',
        'isDEAReported' => 'setIsDEAReported',
        'orderablePackWeightFormat' => 'setOrderablePackWeightFormat',
        'storeMinimumLifeRemainingToReceive' => 'setStoreMinimumLifeRemainingToReceive',
        'plu' => 'setPlu',
        'orderablePackType' => 'setOrderablePackType',
        'sendTraitCodes' => 'setSendTraitCodes',
        'omitTraitCodes' => 'setOmitTraitCodes',
        'destinationFormatCode' => 'setDestinationFormatCode',
        'isCancelWhenOutInd' => 'setIsCancelWhenOutInd',
        'specialConsiderationCode' => 'setSpecialConsiderationCode',
        'storeReceiptDescription' => 'setStoreReceiptDescription',
        'storeLabelDescription' => 'setStoreLabelDescription',
        'shelf1Color' => 'setShelf1Color',
        'shelf2Size' => 'setShelf2Size',
        'isWeighableAtRegister' => 'setIsWeighableAtRegister',
        'isBackroomScaleInd' => 'setIsBackroomScaleInd',
        'hasRFID' => 'setHasRFID',
        'hasSecurityTag' => 'setHasSecurityTag',
        'supplyItemSecondaryDescription' => 'setSupplyItemSecondaryDescription',
        'isShelfRotationInd' => 'setIsShelfRotationInd',
        'isCorporateReplenishable' => 'setIsCorporateReplenishable',
        'isReplenishedByUnitInd' => 'setIsReplenishedByUnitInd',
        'mbmTypeCode' => 'setMbmTypeCode',
        'replenishmentItemType' => 'setReplenishmentItemType',
        'crushFactorCode' => 'setCrushFactorCode',
        'warehouseAlignmentCode' => 'setWarehouseAlignmentCode',
        'segregationCode' => 'setSegregationCode',
        'commodityId' => 'setCommodityId',
        'warehouseAreaCode' => 'setWarehouseAreaCode',
        'warehouseRotationType' => 'setWarehouseRotationType',
        'eachDataCarriers' => 'setEachDataCarriers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'walmartItemNumber' => 'getWalmartItemNumber',
        'channelSold' => 'getChannelSold',
        'fulfillmentMethod' => 'getFulfillmentMethod',
        'tradeItemSyncStatusCode' => 'getTradeItemSyncStatusCode',
        'supplyItemEffectiveDate' => 'getSupplyItemEffectiveDate',
        'supplyItemStatusCode' => 'getSupplyItemStatusCode',
        'supplyItemStatusChangeDate' => 'getSupplyItemStatusChangeDate',
        'walmartDepartmentNumber' => 'getWalmartDepartmentNumber',
        'buyingRegionCode' => 'getBuyingRegionCode',
        'finelineNbr' => 'getFinelineNbr',
        'accountingDepartmentNbr' => 'getAccountingDepartmentNbr',
        'supplyItemCreateDate' => 'getSupplyItemCreateDate',
        'seasonYear' => 'getSeasonYear',
        'seasonCode' => 'getSeasonCode',
        'unitCost' => 'getUnitCost',
        'countryOfOriginAssembly' => 'getCountryOfOriginAssembly',
        'batchNumberIndicator' => 'getBatchNumberIndicator',
        'factoryId' => 'getFactoryId',
        'shippingDimensions' => 'getShippingDimensions',
        'mustShipAlone' => 'getMustShipAlone',
        'supplierMinimumOrderQuantity' => 'getSupplierMinimumOrderQuantity',
        'replenishItemSubType' => 'getReplenishItemSubType',
        'supplyItemExpireDate' => 'getSupplyItemExpireDate',
        'informationProviderGLN' => 'getInformationProviderGLN',
        'supplierStockID' => 'getSupplierStockID',
        'consumerItemNumber' => 'getConsumerItemNumber',
        'nationalDrugCode10' => 'getNationalDrugCode10',
        'nationalDrugCode11' => 'getNationalDrugCode11',
        'nationalDrugCode12' => 'getNationalDrugCode12',
        'markupPercentage' => 'getMarkupPercentage',
        'prePriceLabelAmount' => 'getPrePriceLabelAmount',
        'countryOfOriginComponents' => 'getCountryOfOriginComponents',
        'allowedTimeInWarehouseQty' => 'getAllowedTimeInWarehouseQty',
        'palletRoundingPercent' => 'getPalletRoundingPercent',
        'warehouseMinLifeRemainingtoReceiveQuantity' => 'getWarehouseMinLifeRemainingtoReceiveQuantity',
        'isConveyable' => 'getIsConveyable',
        'specialHandlingInstructionCode' => 'getSpecialHandlingInstructionCode',
        'idealTemperatureRangeLowQty' => 'getIdealTemperatureRangeLowQty',
        'idealTemperatureRangeHighQty' => 'getIdealTemperatureRangeHighQty',
        'isTemperatureSensitive' => 'getIsTemperatureSensitive',
        'acceptableTemperatureRangeLowQty' => 'getAcceptableTemperatureRangeLowQty',
        'acceptableTemperatureRangeHighQty' => 'getAcceptableTemperatureRangeHighQty',
        'isOversized' => 'getIsOversized',
        'exclusiveSupplyDCNbr' => 'getExclusiveSupplyDCNbr',
        'isMasterCarton' => 'getIsMasterCarton',
        'orderSizingFactorQty' => 'getOrderSizingFactorQty',
        'rppc' => 'getRppc',
        'warehousePackQuantity' => 'getWarehousePackQuantity',
        'warehousePackGtin' => 'getWarehousePackGtin',
        'isBreakPack' => 'getIsBreakPack',
        'palletTi' => 'getPalletTi',
        'palletHi' => 'getPalletHi',
        'orderableGTIN' => 'getOrderableGTIN',
        'vendorPackQuantity' => 'getVendorPackQuantity',
        'each' => 'getEach',
        'innerPack' => 'getInnerPack',
        'case' => 'getCase',
        'pallet' => 'getPallet',
        'publishedGTIN' => 'getPublishedGTIN',
        'palletSizeType' => 'getPalletSizeType',
        'tradeItemNetWeight' => 'getTradeItemNetWeight',
        'isDEAReported' => 'getIsDEAReported',
        'orderablePackWeightFormat' => 'getOrderablePackWeightFormat',
        'storeMinimumLifeRemainingToReceive' => 'getStoreMinimumLifeRemainingToReceive',
        'plu' => 'getPlu',
        'orderablePackType' => 'getOrderablePackType',
        'sendTraitCodes' => 'getSendTraitCodes',
        'omitTraitCodes' => 'getOmitTraitCodes',
        'destinationFormatCode' => 'getDestinationFormatCode',
        'isCancelWhenOutInd' => 'getIsCancelWhenOutInd',
        'specialConsiderationCode' => 'getSpecialConsiderationCode',
        'storeReceiptDescription' => 'getStoreReceiptDescription',
        'storeLabelDescription' => 'getStoreLabelDescription',
        'shelf1Color' => 'getShelf1Color',
        'shelf2Size' => 'getShelf2Size',
        'isWeighableAtRegister' => 'getIsWeighableAtRegister',
        'isBackroomScaleInd' => 'getIsBackroomScaleInd',
        'hasRFID' => 'getHasRFID',
        'hasSecurityTag' => 'getHasSecurityTag',
        'supplyItemSecondaryDescription' => 'getSupplyItemSecondaryDescription',
        'isShelfRotationInd' => 'getIsShelfRotationInd',
        'isCorporateReplenishable' => 'getIsCorporateReplenishable',
        'isReplenishedByUnitInd' => 'getIsReplenishedByUnitInd',
        'mbmTypeCode' => 'getMbmTypeCode',
        'replenishmentItemType' => 'getReplenishmentItemType',
        'crushFactorCode' => 'getCrushFactorCode',
        'warehouseAlignmentCode' => 'getWarehouseAlignmentCode',
        'segregationCode' => 'getSegregationCode',
        'commodityId' => 'getCommodityId',
        'warehouseAreaCode' => 'getWarehouseAreaCode',
        'warehouseRotationType' => 'getWarehouseRotationType',
        'eachDataCarriers' => 'getEachDataCarriers'
    ];


    public const CHANNEL_SOLD_DSV = 'DSV';

    public const CHANNEL_SOLD_ONLINE = 'Online';

    public const CHANNEL_SOLD_STORE = 'Store';

    public const FULFILLMENT_METHOD_DSV = 'DSV';

    public const FULFILLMENT_METHOD_DSD = 'DSD';

    public const FULFILLMENT_METHOD_WAREHOUSE = 'Warehouse';

    public const FULFILLMENT_METHOD_SEASON_WAREHOUSE = 'Season_Warehouse';

    public const FULFILLMENT_METHOD_ASSEMBLY_DISTRIBUTION = 'Assembly_Distribution';

    public const FULFILLMENT_METHOD_PROMO = 'promo';

    public const FULFILLMENT_METHOD_IMPORT = 'import';

    public const FULFILLMENT_METHOD_IMPORT_WAREHOUSE = 'import_warehouse';

    public const FULFILLMENT_METHOD_IMPORT_SEASONAL = 'import_seasonal';

    public const TRADE_ITEM_SYNC_STATUS_CODE_NOT_SYNCHRONIZED = 'Not Synchronized';

    public const TRADE_ITEM_SYNC_STATUS_CODE_SYNCHRONIZED = 'Synchronized';

    public const SUPPLY_ITEM_STATUS_CODE_A = 'A';

    public const SUPPLY_ITEM_STATUS_CODE_D = 'D';

    public const SUPPLY_ITEM_STATUS_CODE_I = 'I';

    public const BATCH_NUMBER_INDICATOR_YES = 'YES';

    public const BATCH_NUMBER_INDICATOR_NO = 'NO';

    public const IS_CONVEYABLE_YES = 'YES';

    public const IS_CONVEYABLE_NO = 'NO';

    public const IS_TEMPERATURE_SENSITIVE_YES = 'YES';

    public const IS_TEMPERATURE_SENSITIVE_NO = 'NO';

    public const IS_OVERSIZED_YES = 'YES';

    public const IS_OVERSIZED_NO = 'NO';

    public const IS_MASTER_CARTON_YES = 'YES';

    public const IS_MASTER_CARTON_NO = 'NO';

    public const RPPC_YES = 'YES';

    public const RPPC_NO = 'NO';

    public const IS_BREAK_PACK_YES = 'YES';

    public const IS_BREAK_PACK_NO = 'NO';

    public const PALLET_SIZE_TYPE_LARGE = 'Large';

    public const PALLET_SIZE_TYPE_SMALL = 'Small';

    public const IS_DEA_REPORTED_YES = 'YES';

    public const IS_DEA_REPORTED_NO = 'NO';

    public const ORDERABLE_PACK_WEIGHT_FORMAT_FIXED = 'Fixed';

    public const ORDERABLE_PACK_WEIGHT_FORMAT_VARIABLE = 'Variable';

    public const ORDERABLE_PACK_TYPE_EA = 'EA';

    public const ORDERABLE_PACK_TYPE_CASE_PACK = 'Case_Pack';

    public const ORDERABLE_PACK_TYPE_PALLET = 'Pallet';

    public const ORDERABLE_PACK_TYPE_INNER_PACK = 'Inner_Pack';

    public const DESTINATION_FORMAT_CODE_WM = 'WM';

    public const DESTINATION_FORMAT_CODE_SC = 'SC';

    public const DESTINATION_FORMAT_CODE_PALLET = 'Pallet';

    public const DESTINATION_FORMAT_CODE_INNER_PACK = 'Inner_Pack';

    public const IS_CANCEL_WHEN_OUT_IND_YES = 'YES';

    public const IS_CANCEL_WHEN_OUT_IND_NO = 'NO';

    public const SPECIAL_CONSIDERATION_CODE__1 = '1';

    public const SPECIAL_CONSIDERATION_CODE__2 = '2';

    public const SPECIAL_CONSIDERATION_CODE__3 = '3';

    public const SPECIAL_CONSIDERATION_CODE__4 = '4';

    public const IS_WEIGHABLE_AT_REGISTER_YES = 'YES';

    public const IS_WEIGHABLE_AT_REGISTER_NO = 'NO';

    public const IS_BACKROOM_SCALE_IND_YES = 'YES';

    public const IS_BACKROOM_SCALE_IND_NO = 'NO';

    public const HAS_RFID_YES = 'YES';

    public const HAS_RFID_NO = 'NO';

    public const HAS_SECURITY_TAG_YES = 'YES';

    public const HAS_SECURITY_TAG_NO = 'NO';

    public const IS_SHELF_ROTATION_IND_YES = 'YES';

    public const IS_SHELF_ROTATION_IND_NO = 'NO';

    public const IS_CORPORATE_REPLENISHABLE_YES = 'YES';

    public const IS_CORPORATE_REPLENISHABLE_NO = 'NO';

    public const IS_REPLENISHED_BY_UNIT_IND_YES = 'YES';

    public const IS_REPLENISHED_BY_UNIT_IND_NO = 'NO';

    public const MBM_TYPE_CODE_H = 'H';

    public const MBM_TYPE_CODE_P = 'P';

    public const MBM_TYPE_CODE_M = 'M';

    public const MBM_TYPE_CODE_I = 'I';

    public const REPLENISHMENT_ITEM_TYPE__03 = '03';

    public const REPLENISHMENT_ITEM_TYPE__07 = '07';

    public const REPLENISHMENT_ITEM_TYPE__20 = '20';

    public const REPLENISHMENT_ITEM_TYPE__22 = '22';

    public const REPLENISHMENT_ITEM_TYPE__33 = '33';

    public const REPLENISHMENT_ITEM_TYPE__37 = '37';

    public const REPLENISHMENT_ITEM_TYPE__40 = '40';

    public const REPLENISHMENT_ITEM_TYPE__42 = '42';

    public const REPLENISHMENT_ITEM_TYPE__43 = '43';

    public const CRUSH_FACTOR_CODE__1___STRONGEST = '1 - Strongest';

    public const CRUSH_FACTOR_CODE__2___LESS_STRONG = '2 - Less Strong';

    public const CRUSH_FACTOR_CODE_LEAST_STRONG = 'Least Strong';

    public const SEGREGATION_CODE__13___HBA = '13 - HBA';

    public const SEGREGATION_CODE__8___ANIMAL_FOOD = '8 - Animal Food';

    public const SEGREGATION_CODE__12___PESTICIDES_INSECTICIDES = '12 - Pesticides/Insecticides';

    public const SEGREGATION_CODE__3___CHEMICAL = '3 - Chemical';

    public const SEGREGATION_CODE__9___AMMUNITION_NONMETAL_JACKET = '9 - Ammunition-Nonmetal Jacket';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChannelSoldAllowableValues()
    {
        return [
            self::CHANNEL_SOLD_DSV,
            self::CHANNEL_SOLD_ONLINE,
            self::CHANNEL_SOLD_STORE,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFulfillmentMethodAllowableValues()
    {
        return [
            self::FULFILLMENT_METHOD_DSV,
            self::FULFILLMENT_METHOD_DSD,
            self::FULFILLMENT_METHOD_WAREHOUSE,
            self::FULFILLMENT_METHOD_SEASON_WAREHOUSE,
            self::FULFILLMENT_METHOD_ASSEMBLY_DISTRIBUTION,
            self::FULFILLMENT_METHOD_PROMO,
            self::FULFILLMENT_METHOD_IMPORT,
            self::FULFILLMENT_METHOD_IMPORT_WAREHOUSE,
            self::FULFILLMENT_METHOD_IMPORT_SEASONAL,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTradeItemSyncStatusCodeAllowableValues()
    {
        return [
            self::TRADE_ITEM_SYNC_STATUS_CODE_NOT_SYNCHRONIZED,
            self::TRADE_ITEM_SYNC_STATUS_CODE_SYNCHRONIZED,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSupplyItemStatusCodeAllowableValues()
    {
        return [
            self::SUPPLY_ITEM_STATUS_CODE_A,
            self::SUPPLY_ITEM_STATUS_CODE_D,
            self::SUPPLY_ITEM_STATUS_CODE_I,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBatchNumberIndicatorAllowableValues()
    {
        return [
            self::BATCH_NUMBER_INDICATOR_YES,
            self::BATCH_NUMBER_INDICATOR_NO,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIsConveyableAllowableValues()
    {
        return [
            self::IS_CONVEYABLE_YES,
            self::IS_CONVEYABLE_NO,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIsTemperatureSensitiveAllowableValues()
    {
        return [
            self::IS_TEMPERATURE_SENSITIVE_YES,
            self::IS_TEMPERATURE_SENSITIVE_NO,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIsOversizedAllowableValues()
    {
        return [
            self::IS_OVERSIZED_YES,
            self::IS_OVERSIZED_NO,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIsMasterCartonAllowableValues()
    {
        return [
            self::IS_MASTER_CARTON_YES,
            self::IS_MASTER_CARTON_NO,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRppcAllowableValues()
    {
        return [
            self::RPPC_YES,
            self::RPPC_NO,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIsBreakPackAllowableValues()
    {
        return [
            self::IS_BREAK_PACK_YES,
            self::IS_BREAK_PACK_NO,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPalletSizeTypeAllowableValues()
    {
        return [
            self::PALLET_SIZE_TYPE_LARGE,
            self::PALLET_SIZE_TYPE_SMALL,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIsDEAReportedAllowableValues()
    {
        return [
            self::IS_DEA_REPORTED_YES,
            self::IS_DEA_REPORTED_NO,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderablePackWeightFormatAllowableValues()
    {
        return [
            self::ORDERABLE_PACK_WEIGHT_FORMAT_FIXED,
            self::ORDERABLE_PACK_WEIGHT_FORMAT_VARIABLE,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderablePackTypeAllowableValues()
    {
        return [
            self::ORDERABLE_PACK_TYPE_EA,
            self::ORDERABLE_PACK_TYPE_CASE_PACK,
            self::ORDERABLE_PACK_TYPE_PALLET,
            self::ORDERABLE_PACK_TYPE_INNER_PACK,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDestinationFormatCodeAllowableValues()
    {
        return [
            self::DESTINATION_FORMAT_CODE_WM,
            self::DESTINATION_FORMAT_CODE_SC,
            self::DESTINATION_FORMAT_CODE_PALLET,
            self::DESTINATION_FORMAT_CODE_INNER_PACK,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIsCancelWhenOutIndAllowableValues()
    {
        return [
            self::IS_CANCEL_WHEN_OUT_IND_YES,
            self::IS_CANCEL_WHEN_OUT_IND_NO,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSpecialConsiderationCodeAllowableValues()
    {
        return [
            self::SPECIAL_CONSIDERATION_CODE__1,
            self::SPECIAL_CONSIDERATION_CODE__2,
            self::SPECIAL_CONSIDERATION_CODE__3,
            self::SPECIAL_CONSIDERATION_CODE__4,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIsWeighableAtRegisterAllowableValues()
    {
        return [
            self::IS_WEIGHABLE_AT_REGISTER_YES,
            self::IS_WEIGHABLE_AT_REGISTER_NO,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIsBackroomScaleIndAllowableValues()
    {
        return [
            self::IS_BACKROOM_SCALE_IND_YES,
            self::IS_BACKROOM_SCALE_IND_NO,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHasRFIDAllowableValues()
    {
        return [
            self::HAS_RFID_YES,
            self::HAS_RFID_NO,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHasSecurityTagAllowableValues()
    {
        return [
            self::HAS_SECURITY_TAG_YES,
            self::HAS_SECURITY_TAG_NO,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIsShelfRotationIndAllowableValues()
    {
        return [
            self::IS_SHELF_ROTATION_IND_YES,
            self::IS_SHELF_ROTATION_IND_NO,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIsCorporateReplenishableAllowableValues()
    {
        return [
            self::IS_CORPORATE_REPLENISHABLE_YES,
            self::IS_CORPORATE_REPLENISHABLE_NO,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIsReplenishedByUnitIndAllowableValues()
    {
        return [
            self::IS_REPLENISHED_BY_UNIT_IND_YES,
            self::IS_REPLENISHED_BY_UNIT_IND_NO,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMbmTypeCodeAllowableValues()
    {
        return [
            self::MBM_TYPE_CODE_H,
            self::MBM_TYPE_CODE_P,
            self::MBM_TYPE_CODE_M,
            self::MBM_TYPE_CODE_I,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReplenishmentItemTypeAllowableValues()
    {
        return [
            self::REPLENISHMENT_ITEM_TYPE__03,
            self::REPLENISHMENT_ITEM_TYPE__07,
            self::REPLENISHMENT_ITEM_TYPE__20,
            self::REPLENISHMENT_ITEM_TYPE__22,
            self::REPLENISHMENT_ITEM_TYPE__33,
            self::REPLENISHMENT_ITEM_TYPE__37,
            self::REPLENISHMENT_ITEM_TYPE__40,
            self::REPLENISHMENT_ITEM_TYPE__42,
            self::REPLENISHMENT_ITEM_TYPE__43,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCrushFactorCodeAllowableValues()
    {
        return [
            self::CRUSH_FACTOR_CODE__1___STRONGEST,
            self::CRUSH_FACTOR_CODE__2___LESS_STRONG,
            self::CRUSH_FACTOR_CODE_LEAST_STRONG,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSegregationCodeAllowableValues()
    {
        return [
            self::SEGREGATION_CODE__13___HBA,
            self::SEGREGATION_CODE__8___ANIMAL_FOOD,
            self::SEGREGATION_CODE__12___PESTICIDES_INSECTICIDES,
            self::SEGREGATION_CODE__3___CHEMICAL,
            self::SEGREGATION_CODE__9___AMMUNITION_NONMETAL_JACKET,
        ];
    }

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('walmartItemNumber', $data ?? [], null);
        $this->setIfExists('channelSold', $data ?? [], null);
        $this->setIfExists('fulfillmentMethod', $data ?? [], null);
        $this->setIfExists('tradeItemSyncStatusCode', $data ?? [], null);
        $this->setIfExists('supplyItemEffectiveDate', $data ?? [], null);
        $this->setIfExists('supplyItemStatusCode', $data ?? [], null);
        $this->setIfExists('supplyItemStatusChangeDate', $data ?? [], null);
        $this->setIfExists('walmartDepartmentNumber', $data ?? [], null);
        $this->setIfExists('buyingRegionCode', $data ?? [], null);
        $this->setIfExists('finelineNbr', $data ?? [], null);
        $this->setIfExists('accountingDepartmentNbr', $data ?? [], null);
        $this->setIfExists('supplyItemCreateDate', $data ?? [], null);
        $this->setIfExists('seasonYear', $data ?? [], null);
        $this->setIfExists('seasonCode', $data ?? [], null);
        $this->setIfExists('unitCost', $data ?? [], null);
        $this->setIfExists('countryOfOriginAssembly', $data ?? [], null);
        $this->setIfExists('batchNumberIndicator', $data ?? [], null);
        $this->setIfExists('factoryId', $data ?? [], null);
        $this->setIfExists('shippingDimensions', $data ?? [], null);
        $this->setIfExists('mustShipAlone', $data ?? [], null);
        $this->setIfExists('supplierMinimumOrderQuantity', $data ?? [], null);
        $this->setIfExists('replenishItemSubType', $data ?? [], null);
        $this->setIfExists('supplyItemExpireDate', $data ?? [], null);
        $this->setIfExists('informationProviderGLN', $data ?? [], null);
        $this->setIfExists('supplierStockID', $data ?? [], null);
        $this->setIfExists('consumerItemNumber', $data ?? [], null);
        $this->setIfExists('nationalDrugCode10', $data ?? [], null);
        $this->setIfExists('nationalDrugCode11', $data ?? [], null);
        $this->setIfExists('nationalDrugCode12', $data ?? [], null);
        $this->setIfExists('markupPercentage', $data ?? [], null);
        $this->setIfExists('prePriceLabelAmount', $data ?? [], null);
        $this->setIfExists('countryOfOriginComponents', $data ?? [], null);
        $this->setIfExists('allowedTimeInWarehouseQty', $data ?? [], null);
        $this->setIfExists('palletRoundingPercent', $data ?? [], null);
        $this->setIfExists('warehouseMinLifeRemainingtoReceiveQuantity', $data ?? [], null);
        $this->setIfExists('isConveyable', $data ?? [], null);
        $this->setIfExists('specialHandlingInstructionCode', $data ?? [], null);
        $this->setIfExists('idealTemperatureRangeLowQty', $data ?? [], null);
        $this->setIfExists('idealTemperatureRangeHighQty', $data ?? [], null);
        $this->setIfExists('isTemperatureSensitive', $data ?? [], null);
        $this->setIfExists('acceptableTemperatureRangeLowQty', $data ?? [], null);
        $this->setIfExists('acceptableTemperatureRangeHighQty', $data ?? [], null);
        $this->setIfExists('isOversized', $data ?? [], null);
        $this->setIfExists('exclusiveSupplyDCNbr', $data ?? [], null);
        $this->setIfExists('isMasterCarton', $data ?? [], null);
        $this->setIfExists('orderSizingFactorQty', $data ?? [], null);
        $this->setIfExists('rppc', $data ?? [], null);
        $this->setIfExists('warehousePackQuantity', $data ?? [], null);
        $this->setIfExists('warehousePackGtin', $data ?? [], null);
        $this->setIfExists('isBreakPack', $data ?? [], null);
        $this->setIfExists('palletTi', $data ?? [], null);
        $this->setIfExists('palletHi', $data ?? [], null);
        $this->setIfExists('orderableGTIN', $data ?? [], null);
        $this->setIfExists('vendorPackQuantity', $data ?? [], null);
        $this->setIfExists('each', $data ?? [], null);
        $this->setIfExists('innerPack', $data ?? [], null);
        $this->setIfExists('case', $data ?? [], null);
        $this->setIfExists('pallet', $data ?? [], null);
        $this->setIfExists('publishedGTIN', $data ?? [], null);
        $this->setIfExists('palletSizeType', $data ?? [], null);
        $this->setIfExists('tradeItemNetWeight', $data ?? [], null);
        $this->setIfExists('isDEAReported', $data ?? [], null);
        $this->setIfExists('orderablePackWeightFormat', $data ?? [], null);
        $this->setIfExists('storeMinimumLifeRemainingToReceive', $data ?? [], null);
        $this->setIfExists('plu', $data ?? [], null);
        $this->setIfExists('orderablePackType', $data ?? [], null);
        $this->setIfExists('sendTraitCodes', $data ?? [], null);
        $this->setIfExists('omitTraitCodes', $data ?? [], null);
        $this->setIfExists('destinationFormatCode', $data ?? [], null);
        $this->setIfExists('isCancelWhenOutInd', $data ?? [], null);
        $this->setIfExists('specialConsiderationCode', $data ?? [], null);
        $this->setIfExists('storeReceiptDescription', $data ?? [], null);
        $this->setIfExists('storeLabelDescription', $data ?? [], null);
        $this->setIfExists('shelf1Color', $data ?? [], null);
        $this->setIfExists('shelf2Size', $data ?? [], null);
        $this->setIfExists('isWeighableAtRegister', $data ?? [], null);
        $this->setIfExists('isBackroomScaleInd', $data ?? [], null);
        $this->setIfExists('hasRFID', $data ?? [], null);
        $this->setIfExists('hasSecurityTag', $data ?? [], null);
        $this->setIfExists('supplyItemSecondaryDescription', $data ?? [], null);
        $this->setIfExists('isShelfRotationInd', $data ?? [], null);
        $this->setIfExists('isCorporateReplenishable', $data ?? [], null);
        $this->setIfExists('isReplenishedByUnitInd', $data ?? [], null);
        $this->setIfExists('mbmTypeCode', $data ?? [], null);
        $this->setIfExists('replenishmentItemType', $data ?? [], null);
        $this->setIfExists('crushFactorCode', $data ?? [], null);
        $this->setIfExists('warehouseAlignmentCode', $data ?? [], null);
        $this->setIfExists('segregationCode', $data ?? [], null);
        $this->setIfExists('commodityId', $data ?? [], null);
        $this->setIfExists('warehouseAreaCode', $data ?? [], null);
        $this->setIfExists('warehouseRotationType', $data ?? [], null);
        $this->setIfExists('eachDataCarriers', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getChannelSoldAllowableValues();
        if (!is_null($this->container['channelSold']) && !in_array($this->container['channelSold'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'channelSold', must be one of '%s'",
                $this->container['channelSold'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFulfillmentMethodAllowableValues();
        if (!is_null($this->container['fulfillmentMethod']) && !in_array($this->container['fulfillmentMethod'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fulfillmentMethod', must be one of '%s'",
                $this->container['fulfillmentMethod'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTradeItemSyncStatusCodeAllowableValues();
        if (!is_null($this->container['tradeItemSyncStatusCode']) && !in_array($this->container['tradeItemSyncStatusCode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tradeItemSyncStatusCode', must be one of '%s'",
                $this->container['tradeItemSyncStatusCode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSupplyItemStatusCodeAllowableValues();
        if (!is_null($this->container['supplyItemStatusCode']) && !in_array($this->container['supplyItemStatusCode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'supplyItemStatusCode', must be one of '%s'",
                $this->container['supplyItemStatusCode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBatchNumberIndicatorAllowableValues();
        if (!is_null($this->container['batchNumberIndicator']) && !in_array($this->container['batchNumberIndicator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'batchNumberIndicator', must be one of '%s'",
                $this->container['batchNumberIndicator'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIsConveyableAllowableValues();
        if (!is_null($this->container['isConveyable']) && !in_array($this->container['isConveyable'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'isConveyable', must be one of '%s'",
                $this->container['isConveyable'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIsTemperatureSensitiveAllowableValues();
        if (!is_null($this->container['isTemperatureSensitive']) && !in_array($this->container['isTemperatureSensitive'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'isTemperatureSensitive', must be one of '%s'",
                $this->container['isTemperatureSensitive'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIsOversizedAllowableValues();
        if (!is_null($this->container['isOversized']) && !in_array($this->container['isOversized'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'isOversized', must be one of '%s'",
                $this->container['isOversized'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIsMasterCartonAllowableValues();
        if (!is_null($this->container['isMasterCarton']) && !in_array($this->container['isMasterCarton'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'isMasterCarton', must be one of '%s'",
                $this->container['isMasterCarton'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRppcAllowableValues();
        if (!is_null($this->container['rppc']) && !in_array($this->container['rppc'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rppc', must be one of '%s'",
                $this->container['rppc'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIsBreakPackAllowableValues();
        if (!is_null($this->container['isBreakPack']) && !in_array($this->container['isBreakPack'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'isBreakPack', must be one of '%s'",
                $this->container['isBreakPack'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPalletSizeTypeAllowableValues();
        if (!is_null($this->container['palletSizeType']) && !in_array($this->container['palletSizeType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'palletSizeType', must be one of '%s'",
                $this->container['palletSizeType'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIsDEAReportedAllowableValues();
        if (!is_null($this->container['isDEAReported']) && !in_array($this->container['isDEAReported'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'isDEAReported', must be one of '%s'",
                $this->container['isDEAReported'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOrderablePackWeightFormatAllowableValues();
        if (!is_null($this->container['orderablePackWeightFormat']) && !in_array($this->container['orderablePackWeightFormat'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'orderablePackWeightFormat', must be one of '%s'",
                $this->container['orderablePackWeightFormat'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOrderablePackTypeAllowableValues();
        if (!is_null($this->container['orderablePackType']) && !in_array($this->container['orderablePackType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'orderablePackType', must be one of '%s'",
                $this->container['orderablePackType'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIsCancelWhenOutIndAllowableValues();
        if (!is_null($this->container['isCancelWhenOutInd']) && !in_array($this->container['isCancelWhenOutInd'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'isCancelWhenOutInd', must be one of '%s'",
                $this->container['isCancelWhenOutInd'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSpecialConsiderationCodeAllowableValues();
        if (!is_null($this->container['specialConsiderationCode']) && !in_array($this->container['specialConsiderationCode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'specialConsiderationCode', must be one of '%s'",
                $this->container['specialConsiderationCode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIsWeighableAtRegisterAllowableValues();
        if (!is_null($this->container['isWeighableAtRegister']) && !in_array($this->container['isWeighableAtRegister'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'isWeighableAtRegister', must be one of '%s'",
                $this->container['isWeighableAtRegister'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIsBackroomScaleIndAllowableValues();
        if (!is_null($this->container['isBackroomScaleInd']) && !in_array($this->container['isBackroomScaleInd'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'isBackroomScaleInd', must be one of '%s'",
                $this->container['isBackroomScaleInd'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHasRFIDAllowableValues();
        if (!is_null($this->container['hasRFID']) && !in_array($this->container['hasRFID'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'hasRFID', must be one of '%s'",
                $this->container['hasRFID'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHasSecurityTagAllowableValues();
        if (!is_null($this->container['hasSecurityTag']) && !in_array($this->container['hasSecurityTag'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'hasSecurityTag', must be one of '%s'",
                $this->container['hasSecurityTag'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIsShelfRotationIndAllowableValues();
        if (!is_null($this->container['isShelfRotationInd']) && !in_array($this->container['isShelfRotationInd'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'isShelfRotationInd', must be one of '%s'",
                $this->container['isShelfRotationInd'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIsCorporateReplenishableAllowableValues();
        if (!is_null($this->container['isCorporateReplenishable']) && !in_array($this->container['isCorporateReplenishable'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'isCorporateReplenishable', must be one of '%s'",
                $this->container['isCorporateReplenishable'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIsReplenishedByUnitIndAllowableValues();
        if (!is_null($this->container['isReplenishedByUnitInd']) && !in_array($this->container['isReplenishedByUnitInd'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'isReplenishedByUnitInd', must be one of '%s'",
                $this->container['isReplenishedByUnitInd'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMbmTypeCodeAllowableValues();
        if (!is_null($this->container['mbmTypeCode']) && !in_array($this->container['mbmTypeCode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mbmTypeCode', must be one of '%s'",
                $this->container['mbmTypeCode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getReplenishmentItemTypeAllowableValues();
        if (!is_null($this->container['replenishmentItemType']) && !in_array($this->container['replenishmentItemType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'replenishmentItemType', must be one of '%s'",
                $this->container['replenishmentItemType'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCrushFactorCodeAllowableValues();
        if (!is_null($this->container['crushFactorCode']) && !in_array($this->container['crushFactorCode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'crushFactorCode', must be one of '%s'",
                $this->container['crushFactorCode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSegregationCodeAllowableValues();
        if (!is_null($this->container['segregationCode']) && !in_array($this->container['segregationCode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'segregationCode', must be one of '%s'",
                $this->container['segregationCode'],
                implode("', '", $allowedValues)
            );
        }


        return $invalidProperties;
    }

    /**
     * Gets walmartItemNumber
     *
     * @return string|null
    
     */
    public function getWalmartItemNumber()
    {
        return $this->container['walmartItemNumber'];
    }

    /**
     * Sets walmartItemNumber
     *
     * @param string|null $walmartItemNumber Indicates the internal number assigned to a supplier that is linked to the GTIN.  The item number represents the configuration of how they will sell, ship, and replenish their merchandise. Multiple item numbers may be associated to the GTIN to support numerous agreements between the supplier and buyer.
     *
     * @return self
    
     */
    public function setWalmartItemNumber($walmartItemNumber)
    {
        if (is_null($walmartItemNumber)) {
            throw new \InvalidArgumentException('non-nullable walmartItemNumber cannot be null');
        }

        $this->container['walmartItemNumber'] = $walmartItemNumber;
        return $this;
    }

    /**
     * Gets channelSold
     *
     * @return string|null
    
     */
    public function getChannelSold()
    {
        return $this->container['channelSold'];
    }

    /**
     * Sets channelSold
     *
     * @param string|null $channelSold Indicates the channel that the item will be sold through to Walmart customers.  Valid values are:  | Value | Meaning | | --- | ----------- | | DSV | Dropship vendor. Items are fulfilled directly by the supplier through drop ship vending. | | Online | Online. Items are only sold online and fulfilled through a Walmart fulfillment center. | | Stores | In store. Items are sold to customers in stores and online in certain cases. |
     *
     * @return self
    
     */
    public function setChannelSold($channelSold)
    {
        if (is_null($channelSold)) {
            throw new \InvalidArgumentException('non-nullable channelSold cannot be null');
        }
        $allowedValues = $this->getChannelSoldAllowableValues();
        if (!in_array($channelSold, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'channelSold', must be one of '%s'",
                    $channelSold,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['channelSold'] = $channelSold;
        return $this;
    }

    /**
     * Gets fulfillmentMethod
     *
     * @return string|null
    
     */
    public function getFulfillmentMethod()
    {
        return $this->container['fulfillmentMethod'];
    }

    /**
     * Sets fulfillmentMethod
     *
     * @param string|null $fulfillmentMethod Indicates the channel the item is fulfilled to Walmart.
     *
     * @return self
    
     */
    public function setFulfillmentMethod($fulfillmentMethod)
    {
        if (is_null($fulfillmentMethod)) {
            throw new \InvalidArgumentException('non-nullable fulfillmentMethod cannot be null');
        }
        $allowedValues = $this->getFulfillmentMethodAllowableValues();
        if (!in_array($fulfillmentMethod, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fulfillmentMethod', must be one of '%s'",
                    $fulfillmentMethod,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['fulfillmentMethod'] = $fulfillmentMethod;
        return $this;
    }

    /**
     * Gets tradeItemSyncStatusCode
     *
     * @return string|null
    
     */
    public function getTradeItemSyncStatusCode()
    {
        return $this->container['tradeItemSyncStatusCode'];
    }

    /**
     * Sets tradeItemSyncStatusCode
     *
     * @param string|null $tradeItemSyncStatusCode Indicates the trade item sync status code.  This defines the state of the trade item being synchronized from the global data synchronisation network (GDSN).
     *
     * @return self
    
     */
    public function setTradeItemSyncStatusCode($tradeItemSyncStatusCode)
    {
        if (is_null($tradeItemSyncStatusCode)) {
            throw new \InvalidArgumentException('non-nullable tradeItemSyncStatusCode cannot be null');
        }
        $allowedValues = $this->getTradeItemSyncStatusCodeAllowableValues();
        if (!in_array($tradeItemSyncStatusCode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tradeItemSyncStatusCode', must be one of '%s'",
                    $tradeItemSyncStatusCode,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['tradeItemSyncStatusCode'] = $tradeItemSyncStatusCode;
        return $this;
    }

    /**
     * Gets supplyItemEffectiveDate
     *
     * @return \DateTime|null
    
     */
    public function getSupplyItemEffectiveDate()
    {
        return $this->container['supplyItemEffectiveDate'];
    }

    /**
     * Sets supplyItemEffectiveDate
     *
     * @param \DateTime|null $supplyItemEffectiveDate Indicates the timestamp (in ISO 8601 format) that the item is valid for or replenishable for.
     *
     * @return self
    
     */
    public function setSupplyItemEffectiveDate($supplyItemEffectiveDate)
    {
        if (is_null($supplyItemEffectiveDate)) {
            throw new \InvalidArgumentException('non-nullable supplyItemEffectiveDate cannot be null');
        }

        $this->container['supplyItemEffectiveDate'] = $supplyItemEffectiveDate;
        return $this;
    }

    /**
     * Gets supplyItemStatusCode
     *
     * @return string|null
    
     */
    public function getSupplyItemStatusCode()
    {
        return $this->container['supplyItemStatusCode'];
    }

    /**
     * Sets supplyItemStatusCode
     *
     * @param string|null $supplyItemStatusCode Indicates the status of an item’s ability to be used for replenishment, store orders, and e-commerce orders.  Valid values are:  | Value | Meaning | | --- | ----------- | | A | Active | | D | Discontinued | | I | Inactive |
     *
     * @return self
    
     */
    public function setSupplyItemStatusCode($supplyItemStatusCode)
    {
        if (is_null($supplyItemStatusCode)) {
            throw new \InvalidArgumentException('non-nullable supplyItemStatusCode cannot be null');
        }
        $allowedValues = $this->getSupplyItemStatusCodeAllowableValues();
        if (!in_array($supplyItemStatusCode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'supplyItemStatusCode', must be one of '%s'",
                    $supplyItemStatusCode,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['supplyItemStatusCode'] = $supplyItemStatusCode;
        return $this;
    }

    /**
     * Gets supplyItemStatusChangeDate
     *
     * @return \DateTime|null
    
     */
    public function getSupplyItemStatusChangeDate()
    {
        return $this->container['supplyItemStatusChangeDate'];
    }

    /**
     * Sets supplyItemStatusChangeDate
     *
     * @param \DateTime|null $supplyItemStatusChangeDate Indicates the timestamp (in ISO 8601 format) that the item status code last changed for this supply item.
     *
     * @return self
    
     */
    public function setSupplyItemStatusChangeDate($supplyItemStatusChangeDate)
    {
        if (is_null($supplyItemStatusChangeDate)) {
            throw new \InvalidArgumentException('non-nullable supplyItemStatusChangeDate cannot be null');
        }

        $this->container['supplyItemStatusChangeDate'] = $supplyItemStatusChangeDate;
        return $this;
    }

    /**
     * Gets walmartDepartmentNumber
     *
     * @return string|null
    
     */
    public function getWalmartDepartmentNumber()
    {
        return $this->container['walmartDepartmentNumber'];
    }

    /**
     * Sets walmartDepartmentNumber
     *
     * @param string|null $walmartDepartmentNumber Indicates the financial department under which items are ordered or replenished.
     *
     * @return self
    
     */
    public function setWalmartDepartmentNumber($walmartDepartmentNumber)
    {
        if (is_null($walmartDepartmentNumber)) {
            throw new \InvalidArgumentException('non-nullable walmartDepartmentNumber cannot be null');
        }

        $this->container['walmartDepartmentNumber'] = $walmartDepartmentNumber;
        return $this;
    }

    /**
     * Gets buyingRegionCode
     *
     * @return string|null
    
     */
    public function getBuyingRegionCode()
    {
        return $this->container['buyingRegionCode'];
    }

    /**
     * Sets buyingRegionCode
     *
     * @param string|null $buyingRegionCode Indicates the code of the region that the item is being sold in.  Items that are shared among all regions, or if selling on both online and in stores the buying region code is 0. Valid values are: 0 - Corporate 1 - Alaska 2 - Hawaii 3 - Puerto Rico 6 - eCommerce 7 - Export
     *
     * @return self
    
     */
    public function setBuyingRegionCode($buyingRegionCode)
    {
        if (is_null($buyingRegionCode)) {
            throw new \InvalidArgumentException('non-nullable buyingRegionCode cannot be null');
        }

        $this->container['buyingRegionCode'] = $buyingRegionCode;
        return $this;
    }

    /**
     * Gets finelineNbr
     *
     * @return int|null
    
     */
    public function getFinelineNbr()
    {
        return $this->container['finelineNbr'];
    }

    /**
     * Sets finelineNbr
     *
     * @param int|null $finelineNbr Indicates the fineline number part of the item number grouping hierarchy.  The fineline is created by merchandising to group items more specifically than department number.  Fineline refers to a group of items within a department that show similar sales patterns.
     *
     * @return self
    
     */
    public function setFinelineNbr($finelineNbr)
    {
        if (is_null($finelineNbr)) {
            throw new \InvalidArgumentException('non-nullable finelineNbr cannot be null');
        }

        $this->container['finelineNbr'] = $finelineNbr;
        return $this;
    }

    /**
     * Gets accountingDepartmentNbr
     *
     * @return string|null
    
     */
    public function getAccountingDepartmentNbr()
    {
        return $this->container['accountingDepartmentNbr'];
    }

    /**
     * Sets accountingDepartmentNbr
     *
     * @param string|null $accountingDepartmentNbr Indicates the financial department under which sales and purchases are booked.  Multiple Ordering Departments can roll up to a single Accounting Department.
     *
     * @return self
    
     */
    public function setAccountingDepartmentNbr($accountingDepartmentNbr)
    {
        if (is_null($accountingDepartmentNbr)) {
            throw new \InvalidArgumentException('non-nullable accountingDepartmentNbr cannot be null');
        }

        $this->container['accountingDepartmentNbr'] = $accountingDepartmentNbr;
        return $this;
    }

    /**
     * Gets supplyItemCreateDate
     *
     * @return \DateTime|null
    
     */
    public function getSupplyItemCreateDate()
    {
        return $this->container['supplyItemCreateDate'];
    }

    /**
     * Sets supplyItemCreateDate
     *
     * @param \DateTime|null $supplyItemCreateDate Indicates the timestamp (in ISO 8601 format) that the item was create in the system.
     *
     * @return self
    
     */
    public function setSupplyItemCreateDate($supplyItemCreateDate)
    {
        if (is_null($supplyItemCreateDate)) {
            throw new \InvalidArgumentException('non-nullable supplyItemCreateDate cannot be null');
        }

        $this->container['supplyItemCreateDate'] = $supplyItemCreateDate;
        return $this;
    }

    /**
     * Gets seasonYear
     *
     * @return int|null
    
     */
    public function getSeasonYear()
    {
        return $this->container['seasonYear'];
    }

    /**
     * Sets seasonYear
     *
     * @param int|null $seasonYear Indicates the four-digit year for that item that it is associated with.
     *
     * @return self
    
     */
    public function setSeasonYear($seasonYear)
    {
        if (is_null($seasonYear)) {
            throw new \InvalidArgumentException('non-nullable seasonYear cannot be null');
        }

        $this->container['seasonYear'] = $seasonYear;
        return $this;
    }

    /**
     * Gets seasonCode
     *
     * @return string|null
    
     */
    public function getSeasonCode()
    {
        return $this->container['seasonCode'];
    }

    /**
     * Sets seasonCode
     *
     * @param string|null $seasonCode Indicates the code for the apparel season.  Valid values are: 0- Basic 1- Spring 2- Summer 3- BTS/Fall 4- Winter
     *
     * @return self
    
     */
    public function setSeasonCode($seasonCode)
    {
        if (is_null($seasonCode)) {
            throw new \InvalidArgumentException('non-nullable seasonCode cannot be null');
        }

        $this->container['seasonCode'] = $seasonCode;
        return $this;
    }

    /**
     * Gets unitCost
     *
     * @return float|null
    
     */
    public function getUnitCost()
    {
        return $this->container['unitCost'];
    }

    /**
     * Sets unitCost
     *
     * @param float|null $unitCost Indicates the price (in US dollars) Walmart is paying the supplier per unit.  This value is limited to two digits places, no commas, or currency symbol.
     *
     * @return self
    
     */
    public function setUnitCost($unitCost)
    {
        if (is_null($unitCost)) {
            throw new \InvalidArgumentException('non-nullable unitCost cannot be null');
        }

        $this->container['unitCost'] = $unitCost;
        return $this;
    }

    /**
     * Gets countryOfOriginAssembly
     *
     * @return string|null
    
     */
    public function getCountryOfOriginAssembly()
    {
        return $this->container['countryOfOriginAssembly'];
    }

    /**
     * Sets countryOfOriginAssembly
     *
     * @param string|null $countryOfOriginAssembly Indicates the country code (in the two-letter IS0 3166 format) where the item or its components are manufactured, produced, or grown.  Valid values include, but are not limited to: CA - Canada CN - China GB - Great Britain MX - Mexico UK - United Kingdom US - United States VN - Vietnam
     *
     * @return self
    
     */
    public function setCountryOfOriginAssembly($countryOfOriginAssembly)
    {
        if (is_null($countryOfOriginAssembly)) {
            throw new \InvalidArgumentException('non-nullable countryOfOriginAssembly cannot be null');
        }

        $this->container['countryOfOriginAssembly'] = $countryOfOriginAssembly;
        return $this;
    }

    /**
     * Gets batchNumberIndicator
     *
     * @return string|null
    
     */
    public function getBatchNumberIndicator()
    {
        return $this->container['batchNumberIndicator'];
    }

    /**
     * Sets batchNumberIndicator
     *
     * @param string|null $batchNumberIndicator Indicates the item has a batch or lot number.  If YES, the item has a batch or lot number.  If NO, the item does not have a batch or lot number.
     *
     * @return self
    
     */
    public function setBatchNumberIndicator($batchNumberIndicator)
    {
        if (is_null($batchNumberIndicator)) {
            throw new \InvalidArgumentException('non-nullable batchNumberIndicator cannot be null');
        }
        $allowedValues = $this->getBatchNumberIndicatorAllowableValues();
        if (!in_array($batchNumberIndicator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'batchNumberIndicator', must be one of '%s'",
                    $batchNumberIndicator,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['batchNumberIndicator'] = $batchNumberIndicator;
        return $this;
    }

    /**
     * Gets factoryId
     *
     * @return string[]|null
    
     */
    public function getFactoryId()
    {
        return $this->container['factoryId'];
    }

    /**
     * Sets factoryId
     *
     * @param string[]|null $factoryId Indicates the Walmart factory ID of the factory where this item will be manufactured.  This value is applicable only for items requiring factory disclosure to Walmart. If factory disclosure is not required for the item, None is returned.  Factory IDs can be obtained by disclosing factory information in the Supplier Profile on Retail Link.
     *
     * @return self
    
     */
    public function setFactoryId($factoryId)
    {
        if (is_null($factoryId)) {
            throw new \InvalidArgumentException('non-nullable factoryId cannot be null');
        }

        $this->container['factoryId'] = $factoryId;
        return $this;
    }

    /**
     * Gets shippingDimensions
     *
     * @return \Walmart\Models\Supplier\US\Items\ShippingDimensions|null
    
     */
    public function getShippingDimensions()
    {
        return $this->container['shippingDimensions'];
    }

    /**
     * Sets shippingDimensions
     *
     * @param \Walmart\Models\Supplier\US\Items\ShippingDimensions|null $shippingDimensions shippingDimensions
     *
     * @return self
    
     */
    public function setShippingDimensions($shippingDimensions)
    {
        if (is_null($shippingDimensions)) {
            throw new \InvalidArgumentException('non-nullable shippingDimensions cannot be null');
        }

        $this->container['shippingDimensions'] = $shippingDimensions;
        return $this;
    }

    /**
     * Gets mustShipAlone
     *
     * @return string|null
    
     */
    public function getMustShipAlone()
    {
        return $this->container['mustShipAlone'];
    }

    /**
     * Sets mustShipAlone
     *
     * @param string|null $mustShipAlone Indicates the item must ship by itself and not with another item in the same box.  If YES, the item must ship by itself and not with another item in the same box. The item will not be grouped for ship price calculation.  If NO, the item can be shipped with another item in the same box.
     *
     * @return self
    
     */
    public function setMustShipAlone($mustShipAlone)
    {
        if (is_null($mustShipAlone)) {
            throw new \InvalidArgumentException('non-nullable mustShipAlone cannot be null');
        }

        $this->container['mustShipAlone'] = $mustShipAlone;
        return $this;
    }

    /**
     * Gets supplierMinimumOrderQuantity
     *
     * @return int|null
    
     */
    public function getSupplierMinimumOrderQuantity()
    {
        return $this->container['supplierMinimumOrderQuantity'];
    }

    /**
     * Sets supplierMinimumOrderQuantity
     *
     * @param int|null $supplierMinimumOrderQuantity Indicates the minimum amount or items the warehouse or store can order from a supplier.  The value is in cases for grocery and each for hardlines. Hardlines are defined as consumer durables and can usually be distinguished in a retailer's inventory by whether they come in boxes.  In hardlines, the minimum order quantity must be a multiple of warehouse pack quantity. This is the quantity of the item that comes into the warehouse.
     *
     * @return self
    
     */
    public function setSupplierMinimumOrderQuantity($supplierMinimumOrderQuantity)
    {
        if (is_null($supplierMinimumOrderQuantity)) {
            throw new \InvalidArgumentException('non-nullable supplierMinimumOrderQuantity cannot be null');
        }

        $this->container['supplierMinimumOrderQuantity'] = $supplierMinimumOrderQuantity;
        return $this;
    }

    /**
     * Gets replenishItemSubType
     *
     * @return int|null
    
     */
    public function getReplenishItemSubType()
    {
        return $this->container['replenishItemSubType'];
    }

    /**
     * Sets replenishItemSubType
     *
     * @param int|null $replenishItemSubType Indicates how the product is ordered and delivered to the store.  This is combined with the parameter itemType.
     *
     * @return self
    
     */
    public function setReplenishItemSubType($replenishItemSubType)
    {
        if (is_null($replenishItemSubType)) {
            throw new \InvalidArgumentException('non-nullable replenishItemSubType cannot be null');
        }

        $this->container['replenishItemSubType'] = $replenishItemSubType;
        return $this;
    }

    /**
     * Gets supplyItemExpireDate
     *
     * @return \DateTime|null
    
     */
    public function getSupplyItemExpireDate()
    {
        return $this->container['supplyItemExpireDate'];
    }

    /**
     * Sets supplyItemExpireDate
     *
     * @param \DateTime|null $supplyItemExpireDate Indicates the timestamp (in ISO 8601 format) when to remove an item from the stores and eventually purge from the item file.
     *
     * @return self
    
     */
    public function setSupplyItemExpireDate($supplyItemExpireDate)
    {
        if (is_null($supplyItemExpireDate)) {
            throw new \InvalidArgumentException('non-nullable supplyItemExpireDate cannot be null');
        }

        $this->container['supplyItemExpireDate'] = $supplyItemExpireDate;
        return $this;
    }

    /**
     * Gets informationProviderGLN
     *
     * @return string|null
    
     */
    public function getInformationProviderGLN()
    {
        return $this->container['informationProviderGLN'];
    }

    /**
     * Sets informationProviderGLN
     *
     * @param string|null $informationProviderGLN Indicates the Global Location Number (GLN) used to identify the party providing the product information.
     *
     * @return self
    
     */
    public function setInformationProviderGLN($informationProviderGLN)
    {
        if (is_null($informationProviderGLN)) {
            throw new \InvalidArgumentException('non-nullable informationProviderGLN cannot be null');
        }

        $this->container['informationProviderGLN'] = $informationProviderGLN;
        return $this;
    }

    /**
     * Gets supplierStockID
     *
     * @return string|null
    
     */
    public function getSupplierStockID()
    {
        return $this->container['supplierStockID'];
    }

    /**
     * Sets supplierStockID
     *
     * @param string|null $supplierStockID Indicates the number that appears on the Walmart in-store shelf label to identify the product to customers.  This value is also used by Walmart supply chain.
     *
     * @return self
    
     */
    public function setSupplierStockID($supplierStockID)
    {
        if (is_null($supplierStockID)) {
            throw new \InvalidArgumentException('non-nullable supplierStockID cannot be null');
        }

        $this->container['supplierStockID'] = $supplierStockID;
        return $this;
    }

    /**
     * Gets consumerItemNumber
     *
     * @return string|null
    
     */
    public function getConsumerItemNumber()
    {
        return $this->container['consumerItemNumber'];
    }

    /**
     * Sets consumerItemNumber
     *
     * @param string|null $consumerItemNumber Indicates an item number listed as an identical item to the customer.  This is used for grouping like items together on a single shelf.
     *
     * @return self
    
     */
    public function setConsumerItemNumber($consumerItemNumber)
    {
        if (is_null($consumerItemNumber)) {
            throw new \InvalidArgumentException('non-nullable consumerItemNumber cannot be null');
        }

        $this->container['consumerItemNumber'] = $consumerItemNumber;
        return $this;
    }

    /**
     * Gets nationalDrugCode10
     *
     * @return string|null
    
     */
    public function getNationalDrugCode10()
    {
        return $this->container['nationalDrugCode10'];
    }

    /**
     * Sets nationalDrugCode10
     *
     * @param string|null $nationalDrugCode10 Indicates the National Drug Code 10 (NDC 10).  The NDC 10 value is an industry-wide code used to identify a prescription product and is displayed on the drug packaging, and can exist in three different numerical formats, 4-4-2, 5-3-2 and 5-4-1. NDC 10 is a unique 10-digit value consisting of a 3-segment number assigned to each medication listed under Section 510 of the U.S. Federal Food, Drug, and Cosmetic Act.
     *
     * @return self
    
     */
    public function setNationalDrugCode10($nationalDrugCode10)
    {
        if (is_null($nationalDrugCode10)) {
            throw new \InvalidArgumentException('non-nullable nationalDrugCode10 cannot be null');
        }

        $this->container['nationalDrugCode10'] = $nationalDrugCode10;
        return $this;
    }

    /**
     * Gets nationalDrugCode11
     *
     * @return string|null
    
     */
    public function getNationalDrugCode11()
    {
        return $this->container['nationalDrugCode11'];
    }

    /**
     * Sets nationalDrugCode11
     *
     * @param string|null $nationalDrugCode11 Indicates the National Drug Code 11 (NDC 11).  The NDC 11 is a unique 11-digit value consisting of a 3-segment number assigned to each medication listed under Section 510 of the U.S. Federal Food, Drug, and Cosmetic Act. The NDC 11 value is used for adjudication and financial reconciliation of pharmaceuticals can exist in only one format, 5-4-2, where a zero is inserted to the left of each of the segments as needed to achieve an 11-digit format.
     *
     * @return self
    
     */
    public function setNationalDrugCode11($nationalDrugCode11)
    {
        if (is_null($nationalDrugCode11)) {
            throw new \InvalidArgumentException('non-nullable nationalDrugCode11 cannot be null');
        }

        $this->container['nationalDrugCode11'] = $nationalDrugCode11;
        return $this;
    }

    /**
     * Gets nationalDrugCode12
     *
     * @return string|null
    
     */
    public function getNationalDrugCode12()
    {
        return $this->container['nationalDrugCode12'];
    }

    /**
     * Sets nationalDrugCode12
     *
     * @param string|null $nationalDrugCode12 Indicates the National Drug Code 12 (NDC 12).  The NDC 12 is a unique 12-digit value consisting of a 3-segment number assigned to each medication listed under Section 510 of the U.S. Federal Food, Drug, and Cosmetic Act.
     *
     * @return self
    
     */
    public function setNationalDrugCode12($nationalDrugCode12)
    {
        if (is_null($nationalDrugCode12)) {
            throw new \InvalidArgumentException('non-nullable nationalDrugCode12 cannot be null');
        }

        $this->container['nationalDrugCode12'] = $nationalDrugCode12;
        return $this;
    }

    /**
     * Gets markupPercentage
     *
     * @return float|null
    
     */
    public function getMarkupPercentage()
    {
        return $this->container['markupPercentage'];
    }

    /**
     * Sets markupPercentage
     *
     * @param float|null $markupPercentage Indicates the percentage of profit margin.
     *
     * @return self
    
     */
    public function setMarkupPercentage($markupPercentage)
    {
        if (is_null($markupPercentage)) {
            throw new \InvalidArgumentException('non-nullable markupPercentage cannot be null');
        }

        $this->container['markupPercentage'] = $markupPercentage;
        return $this;
    }

    /**
     * Gets prePriceLabelAmount
     *
     * @return float|null
    
     */
    public function getPrePriceLabelAmount()
    {
        return $this->container['prePriceLabelAmount'];
    }

    /**
     * Sets prePriceLabelAmount
     *
     * @param float|null $prePriceLabelAmount Indicates the selling price printed on the sellable product by the manufacturer.
     *
     * @return self
    
     */
    public function setPrePriceLabelAmount($prePriceLabelAmount)
    {
        if (is_null($prePriceLabelAmount)) {
            throw new \InvalidArgumentException('non-nullable prePriceLabelAmount cannot be null');
        }

        $this->container['prePriceLabelAmount'] = $prePriceLabelAmount;
        return $this;
    }

    /**
     * Gets countryOfOriginComponents
     *
     * @return string[]|null
    
     */
    public function getCountryOfOriginComponents()
    {
        return $this->container['countryOfOriginComponents'];
    }

    /**
     * Sets countryOfOriginComponents
     *
     * @param string[]|null $countryOfOriginComponents Indicates the country code (in the two-letter IS0 3166 format) where the item components or raw materials were sourced.  Valid values include, but are not limited to: CA - Canada CN - China GB - Great Britain MX - Mexico UK - United Kingdom US - United States VN - Vietnam
     *
     * @return self
    
     */
    public function setCountryOfOriginComponents($countryOfOriginComponents)
    {
        if (is_null($countryOfOriginComponents)) {
            throw new \InvalidArgumentException('non-nullable countryOfOriginComponents cannot be null');
        }

        $this->container['countryOfOriginComponents'] = $countryOfOriginComponents;
        return $this;
    }

    /**
     * Gets allowedTimeInWarehouseQty
     *
     * @return int|null
    
     */
    public function getAllowedTimeInWarehouseQty()
    {
        return $this->container['allowedTimeInWarehouseQty'];
    }

    /**
     * Sets allowedTimeInWarehouseQty
     *
     * @param int|null $allowedTimeInWarehouseQty Indicates the expected life, in days, of the product once it is received at the warehouse.  This value is the number of days the warehouse has to get the item to the store. The merchandise may be rejected by the DC if there is less that the guaranteed number of days remaining in the life of the product.
     *
     * @return self
    
     */
    public function setAllowedTimeInWarehouseQty($allowedTimeInWarehouseQty)
    {
        if (is_null($allowedTimeInWarehouseQty)) {
            throw new \InvalidArgumentException('non-nullable allowedTimeInWarehouseQty cannot be null');
        }

        $this->container['allowedTimeInWarehouseQty'] = $allowedTimeInWarehouseQty;
        return $this;
    }

    /**
     * Gets palletRoundingPercent
     *
     * @return float|null
    
     */
    public function getPalletRoundingPercent()
    {
        return $this->container['palletRoundingPercent'];
    }

    /**
     * Sets palletRoundingPercent
     *
     * @param float|null $palletRoundingPercent Indicates the supplier order rounding percent.  This represents the percentage of a full warehouse pallet that will trigger a full pallet pull.
     *
     * @return self
    
     */
    public function setPalletRoundingPercent($palletRoundingPercent)
    {
        if (is_null($palletRoundingPercent)) {
            throw new \InvalidArgumentException('non-nullable palletRoundingPercent cannot be null');
        }

        $this->container['palletRoundingPercent'] = $palletRoundingPercent;
        return $this;
    }

    /**
     * Gets warehouseMinLifeRemainingtoReceiveQuantity
     *
     * @return int|null
    
     */
    public function getWarehouseMinLifeRemainingtoReceiveQuantity()
    {
        return $this->container['warehouseMinLifeRemainingtoReceiveQuantity'];
    }

    /**
     * Sets warehouseMinLifeRemainingtoReceiveQuantity
     *
     * @param int|null $warehouseMinLifeRemainingtoReceiveQuantity Indicates the minimum number of days of shelf life of the product.  This is the expiration date determined by the seller upon receipt by the buyer.
     *
     * @return self
    
     */
    public function setWarehouseMinLifeRemainingtoReceiveQuantity($warehouseMinLifeRemainingtoReceiveQuantity)
    {
        if (is_null($warehouseMinLifeRemainingtoReceiveQuantity)) {
            throw new \InvalidArgumentException('non-nullable warehouseMinLifeRemainingtoReceiveQuantity cannot be null');
        }

        $this->container['warehouseMinLifeRemainingtoReceiveQuantity'] = $warehouseMinLifeRemainingtoReceiveQuantity;
        return $this;
    }

    /**
     * Gets isConveyable
     *
     * @return string|null
    
     */
    public function getIsConveyable()
    {
        return $this->container['isConveyable'];
    }

    /**
     * Sets isConveyable
     *
     * @param string|null $isConveyable Indicates the warehouse pack may be put on a conveyor belt in the warehouse.  If YES, the warehouse pack may be put on a conveyor belt in the warehouse.  If NO, the warehouse pack may not be put on a conveyor belt in the warehouse.
     *
     * @return self
    
     */
    public function setIsConveyable($isConveyable)
    {
        if (is_null($isConveyable)) {
            throw new \InvalidArgumentException('non-nullable isConveyable cannot be null');
        }
        $allowedValues = $this->getIsConveyableAllowableValues();
        if (!in_array($isConveyable, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'isConveyable', must be one of '%s'",
                    $isConveyable,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['isConveyable'] = $isConveyable;
        return $this;
    }

    /**
     * Gets specialHandlingInstructionCode
     *
     * @return string|null
    
     */
    public function getSpecialHandlingInstructionCode()
    {
        return $this->container['specialHandlingInstructionCode'];
    }

    /**
     * Sets specialHandlingInstructionCode
     *
     * @param string|null $specialHandlingInstructionCode Indicates instructions on how to handle the product through the shipment and delivery processes.  For example, it may consider what type of pallet base is used such as a CHEP pallet, or slip sheet.
     *
     * @return self
    
     */
    public function setSpecialHandlingInstructionCode($specialHandlingInstructionCode)
    {
        if (is_null($specialHandlingInstructionCode)) {
            throw new \InvalidArgumentException('non-nullable specialHandlingInstructionCode cannot be null');
        }

        $this->container['specialHandlingInstructionCode'] = $specialHandlingInstructionCode;
        return $this;
    }

    /**
     * Gets idealTemperatureRangeLowQty
     *
     * @return string|null
    
     */
    public function getIdealTemperatureRangeLowQty()
    {
        return $this->container['idealTemperatureRangeLowQty'];
    }

    /**
     * Sets idealTemperatureRangeLowQty
     *
     * @param string|null $idealTemperatureRangeLowQty This is the lowest ideal temperature (in Fahrenheit) for this merchandise.
     *
     * @return self
    
     */
    public function setIdealTemperatureRangeLowQty($idealTemperatureRangeLowQty)
    {
        if (is_null($idealTemperatureRangeLowQty)) {
            throw new \InvalidArgumentException('non-nullable idealTemperatureRangeLowQty cannot be null');
        }

        $this->container['idealTemperatureRangeLowQty'] = $idealTemperatureRangeLowQty;
        return $this;
    }

    /**
     * Gets idealTemperatureRangeHighQty
     *
     * @return string|null
    
     */
    public function getIdealTemperatureRangeHighQty()
    {
        return $this->container['idealTemperatureRangeHighQty'];
    }

    /**
     * Sets idealTemperatureRangeHighQty
     *
     * @param string|null $idealTemperatureRangeHighQty Indicates the highest ideal temperature (in Fahrenheit) for this merchandise.
     *
     * @return self
    
     */
    public function setIdealTemperatureRangeHighQty($idealTemperatureRangeHighQty)
    {
        if (is_null($idealTemperatureRangeHighQty)) {
            throw new \InvalidArgumentException('non-nullable idealTemperatureRangeHighQty cannot be null');
        }

        $this->container['idealTemperatureRangeHighQty'] = $idealTemperatureRangeHighQty;
        return $this;
    }

    /**
     * Gets isTemperatureSensitive
     *
     * @return string|null
    
     */
    public function getIsTemperatureSensitive()
    {
        return $this->container['isTemperatureSensitive'];
    }

    /**
     * Sets isTemperatureSensitive
     *
     * @param string|null $isTemperatureSensitive Indicates the item is prone to freezing or melting that may adversely affect it.  If YES, the item is prone to freezing or melting.  If NO, the item is not prone to freezing or melting.
     *
     * @return self
    
     */
    public function setIsTemperatureSensitive($isTemperatureSensitive)
    {
        if (is_null($isTemperatureSensitive)) {
            throw new \InvalidArgumentException('non-nullable isTemperatureSensitive cannot be null');
        }
        $allowedValues = $this->getIsTemperatureSensitiveAllowableValues();
        if (!in_array($isTemperatureSensitive, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'isTemperatureSensitive', must be one of '%s'",
                    $isTemperatureSensitive,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['isTemperatureSensitive'] = $isTemperatureSensitive;
        return $this;
    }

    /**
     * Gets acceptableTemperatureRangeLowQty
     *
     * @return string|null
    
     */
    public function getAcceptableTemperatureRangeLowQty()
    {
        return $this->container['acceptableTemperatureRangeLowQty'];
    }

    /**
     * Sets acceptableTemperatureRangeLowQty
     *
     * @param string|null $acceptableTemperatureRangeLowQty Indicates the minimum temperature (in Fahrenheit) the product can be stored or transported.
     *
     * @return self
    
     */
    public function setAcceptableTemperatureRangeLowQty($acceptableTemperatureRangeLowQty)
    {
        if (is_null($acceptableTemperatureRangeLowQty)) {
            throw new \InvalidArgumentException('non-nullable acceptableTemperatureRangeLowQty cannot be null');
        }

        $this->container['acceptableTemperatureRangeLowQty'] = $acceptableTemperatureRangeLowQty;
        return $this;
    }

    /**
     * Gets acceptableTemperatureRangeHighQty
     *
     * @return string|null
    
     */
    public function getAcceptableTemperatureRangeHighQty()
    {
        return $this->container['acceptableTemperatureRangeHighQty'];
    }

    /**
     * Sets acceptableTemperatureRangeHighQty
     *
     * @param string|null $acceptableTemperatureRangeHighQty Indicates the maximum temperature (in Fahrenheit) the product can be stored or transported.
     *
     * @return self
    
     */
    public function setAcceptableTemperatureRangeHighQty($acceptableTemperatureRangeHighQty)
    {
        if (is_null($acceptableTemperatureRangeHighQty)) {
            throw new \InvalidArgumentException('non-nullable acceptableTemperatureRangeHighQty cannot be null');
        }

        $this->container['acceptableTemperatureRangeHighQty'] = $acceptableTemperatureRangeHighQty;
        return $this;
    }

    /**
     * Gets isOversized
     *
     * @return string|null
    
     */
    public function getIsOversized()
    {
        return $this->container['isOversized'];
    }

    /**
     * Sets isOversized
     *
     * @param string|null $isOversized Indicates the item is oversized.  An oversize item is any item with at least one dimension greater than 50\" and/or a weight of more than 150 pounds.  If YES, the item is oversized.  If NO, the item is not oversized.
     *
     * @return self
    
     */
    public function setIsOversized($isOversized)
    {
        if (is_null($isOversized)) {
            throw new \InvalidArgumentException('non-nullable isOversized cannot be null');
        }
        $allowedValues = $this->getIsOversizedAllowableValues();
        if (!in_array($isOversized, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'isOversized', must be one of '%s'",
                    $isOversized,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['isOversized'] = $isOversized;
        return $this;
    }

    /**
     * Gets exclusiveSupplyDCNbr
     *
     * @return int|null
    
     */
    public function getExclusiveSupplyDCNbr()
    {
        return $this->container['exclusiveSupplyDCNbr'];
    }

    /**
     * Sets exclusiveSupplyDCNbr
     *
     * @param int|null $exclusiveSupplyDCNbr Indicates the item is supplied exclusively from the distribution center listed.  This is also known as Item Forced Warehouse.
     *
     * @return self
    
     */
    public function setExclusiveSupplyDCNbr($exclusiveSupplyDCNbr)
    {
        if (is_null($exclusiveSupplyDCNbr)) {
            throw new \InvalidArgumentException('non-nullable exclusiveSupplyDCNbr cannot be null');
        }

        $this->container['exclusiveSupplyDCNbr'] = $exclusiveSupplyDCNbr;
        return $this;
    }

    /**
     * Gets isMasterCarton
     *
     * @return string|null
    
     */
    public function getIsMasterCarton()
    {
        return $this->container['isMasterCarton'];
    }

    /**
     * Sets isMasterCarton
     *
     * @param string|null $isMasterCarton Indicates the supplier ships a carton that contains multiple orderable packs.  If YES, the supplier ships a carton that contains multiple orderable packs.  If NO, the supplier does not ship a carton that contains multiple orderable packs.
     *
     * @return self
    
     */
    public function setIsMasterCarton($isMasterCarton)
    {
        if (is_null($isMasterCarton)) {
            throw new \InvalidArgumentException('non-nullable isMasterCarton cannot be null');
        }
        $allowedValues = $this->getIsMasterCartonAllowableValues();
        if (!in_array($isMasterCarton, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'isMasterCarton', must be one of '%s'",
                    $isMasterCarton,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['isMasterCarton'] = $isMasterCarton;
        return $this;
    }

    /**
     * Gets orderSizingFactorQty
     *
     * @return float|null
    
     */
    public function getOrderSizingFactorQty()
    {
        return $this->container['orderSizingFactorQty'];
    }

    /**
     * Sets orderSizingFactorQty
     *
     * @param float|null $orderSizingFactorQty Indicates a trade item specification other than gross, net weight, or cubic feet for a line trade item or a transaction.
     *
     * @return self
    
     */
    public function setOrderSizingFactorQty($orderSizingFactorQty)
    {
        if (is_null($orderSizingFactorQty)) {
            throw new \InvalidArgumentException('non-nullable orderSizingFactorQty cannot be null');
        }

        $this->container['orderSizingFactorQty'] = $orderSizingFactorQty;
        return $this;
    }

    /**
     * Gets rppc
     *
     * @return string|null
    
     */
    public function getRppc()
    {
        return $this->container['rppc'];
    }

    /**
     * Sets rppc
     *
     * @param string|null $rppc Indicates the product packaged is in a rigid plastic packaging container (rppc) that meets ALL of the given criteria.  If YES, the product packaged is in a rigid plastic packaging container (rppc).  If NO, the product packaged is not in a rigid plastic packaging container (rppc).
     *
     * @return self
    
     */
    public function setRppc($rppc)
    {
        if (is_null($rppc)) {
            throw new \InvalidArgumentException('non-nullable rppc cannot be null');
        }
        $allowedValues = $this->getRppcAllowableValues();
        if (!in_array($rppc, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rppc', must be one of '%s'",
                    $rppc,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['rppc'] = $rppc;
        return $this;
    }

    /**
     * Gets warehousePackQuantity
     *
     * @return int|null
    
     */
    public function getWarehousePackQuantity()
    {
        return $this->container['warehousePackQuantity'];
    }

    /**
     * Sets warehousePackQuantity
     *
     * @param int|null $warehousePackQuantity Indicates the total consumable selling units in a break pack (warehouse pack).
     *
     * @return self
    
     */
    public function setWarehousePackQuantity($warehousePackQuantity)
    {
        if (is_null($warehousePackQuantity)) {
            throw new \InvalidArgumentException('non-nullable warehousePackQuantity cannot be null');
        }

        $this->container['warehousePackQuantity'] = $warehousePackQuantity;
        return $this;
    }

    /**
     * Gets warehousePackGtin
     *
     * @return string|null
    
     */
    public function getWarehousePackGtin()
    {
        return $this->container['warehousePackGtin'];
    }

    /**
     * Sets warehousePackGtin
     *
     * @param string|null $warehousePackGtin Indicates the GTIN located on an internal container when orderable pack is made up of additional shipping containers.
     *
     * @return self
    
     */
    public function setWarehousePackGtin($warehousePackGtin)
    {
        if (is_null($warehousePackGtin)) {
            throw new \InvalidArgumentException('non-nullable warehousePackGtin cannot be null');
        }

        $this->container['warehousePackGtin'] = $warehousePackGtin;
        return $this;
    }

    /**
     * Gets isBreakPack
     *
     * @return string|null
    
     */
    public function getIsBreakPack()
    {
        return $this->container['isBreakPack'];
    }

    /**
     * Sets isBreakPack
     *
     * @param string|null $isBreakPack Indicates the orderable configuration must be opened at the Walmart distribution center.  This is required to send the next level lower Trade Item to the store.  If `YES`, the orderable configuration must be opened at the Walmart distribution center.  If `NO`, the orderable configuration is not required be opened only at the Walmart distribution center.
     *
     * @return self
    
     */
    public function setIsBreakPack($isBreakPack)
    {
        if (is_null($isBreakPack)) {
            throw new \InvalidArgumentException('non-nullable isBreakPack cannot be null');
        }
        $allowedValues = $this->getIsBreakPackAllowableValues();
        if (!in_array($isBreakPack, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'isBreakPack', must be one of '%s'",
                    $isBreakPack,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['isBreakPack'] = $isBreakPack;
        return $this;
    }

    /**
     * Gets palletTi
     *
     * @return int|null
    
     */
    public function getPalletTi()
    {
        return $this->container['palletTi'];
    }

    /**
     * Sets palletTi
     *
     * @param int|null $palletTi Indicates the number of trade items contained on a single layer of a pallet.  This is the GTIN Walmart is ordering (Orderable GTIN).
     *
     * @return self
    
     */
    public function setPalletTi($palletTi)
    {
        if (is_null($palletTi)) {
            throw new \InvalidArgumentException('non-nullable palletTi cannot be null');
        }

        $this->container['palletTi'] = $palletTi;
        return $this;
    }

    /**
     * Gets palletHi
     *
     * @return int|null
    
     */
    public function getPalletHi()
    {
        return $this->container['palletHi'];
    }

    /**
     * Sets palletHi
     *
     * @param int|null $palletHi Indicates the number of layers that a pallet contains.  This is the GTIN Walmart is ordering (Orderable GTIN).
     *
     * @return self
    
     */
    public function setPalletHi($palletHi)
    {
        if (is_null($palletHi)) {
            throw new \InvalidArgumentException('non-nullable palletHi cannot be null');
        }

        $this->container['palletHi'] = $palletHi;
        return $this;
    }

    /**
     * Gets orderableGTIN
     *
     * @return string|null
    
     */
    public function getOrderableGTIN()
    {
        return $this->container['orderableGTIN'];
    }

    /**
     * Sets orderableGTIN
     *
     * @param string|null $orderableGTIN Indicates global trade item number (in the GTIN-14 format) that identifies the pack ordered from a supplier and shipped to a Walmart facility.  The 14-digit Global Trade item number. If the returned value is less than 14 digits, add zeros at the beginning to lengthen it to 14 digits.
     *
     * @return self
    
     */
    public function setOrderableGTIN($orderableGTIN)
    {
        if (is_null($orderableGTIN)) {
            throw new \InvalidArgumentException('non-nullable orderableGTIN cannot be null');
        }

        $this->container['orderableGTIN'] = $orderableGTIN;
        return $this;
    }

    /**
     * Gets vendorPackQuantity
     *
     * @return int|null
    
     */
    public function getVendorPackQuantity()
    {
        return $this->container['vendorPackQuantity'];
    }

    /**
     * Sets vendorPackQuantity
     *
     * @param int|null $vendorPackQuantity Indicates the total number of consumable units (or selling units) within a pack.  This is when goods are ordered from a supplier and shipped to a Walmart facility.
     *
     * @return self
    
     */
    public function setVendorPackQuantity($vendorPackQuantity)
    {
        if (is_null($vendorPackQuantity)) {
            throw new \InvalidArgumentException('non-nullable vendorPackQuantity cannot be null');
        }

        $this->container['vendorPackQuantity'] = $vendorPackQuantity;
        return $this;
    }

    /**
     * Gets each
     *
     * @return \Walmart\Models\Supplier\US\Items\Each|null
    
     */
    public function getEach()
    {
        return $this->container['each'];
    }

    /**
     * Sets each
     *
     * @param \Walmart\Models\Supplier\US\Items\Each|null $each each
     *
     * @return self
    
     */
    public function setEach($each)
    {
        if (is_null($each)) {
            throw new \InvalidArgumentException('non-nullable each cannot be null');
        }

        $this->container['each'] = $each;
        return $this;
    }

    /**
     * Gets innerPack
     *
     * @return \Walmart\Models\Supplier\US\Items\InnerPack|null
    
     */
    public function getInnerPack()
    {
        return $this->container['innerPack'];
    }

    /**
     * Sets innerPack
     *
     * @param \Walmart\Models\Supplier\US\Items\InnerPack|null $innerPack innerPack
     *
     * @return self
    
     */
    public function setInnerPack($innerPack)
    {
        if (is_null($innerPack)) {
            throw new \InvalidArgumentException('non-nullable innerPack cannot be null');
        }

        $this->container['innerPack'] = $innerPack;
        return $this;
    }

    /**
     * Gets case
     *
     * @return \Walmart\Models\Supplier\US\Items\ModelCase|null
    
     */
    public function getCase()
    {
        return $this->container['case'];
    }

    /**
     * Sets case
     *
     * @param \Walmart\Models\Supplier\US\Items\ModelCase|null $case case
     *
     * @return self
    
     */
    public function setCase($case)
    {
        if (is_null($case)) {
            throw new \InvalidArgumentException('non-nullable case cannot be null');
        }

        $this->container['case'] = $case;
        return $this;
    }

    /**
     * Gets pallet
     *
     * @return \Walmart\Models\Supplier\US\Items\Pallet|null
    
     */
    public function getPallet()
    {
        return $this->container['pallet'];
    }

    /**
     * Sets pallet
     *
     * @param \Walmart\Models\Supplier\US\Items\Pallet|null $pallet pallet
     *
     * @return self
    
     */
    public function setPallet($pallet)
    {
        if (is_null($pallet)) {
            throw new \InvalidArgumentException('non-nullable pallet cannot be null');
        }

        $this->container['pallet'] = $pallet;
        return $this;
    }

    /**
     * Gets publishedGTIN
     *
     * @return string|null
    
     */
    public function getPublishedGTIN()
    {
        return $this->container['publishedGTIN'];
    }

    /**
     * Sets publishedGTIN
     *
     * @param string|null $publishedGTIN Indicates the GTIN-14 number for the highest level of the item hierarchy that was published for the item through the global data synchronisation network (GDSN).  The 14-digit Global Trade item number. If the returned value is less than 14 digits, add zeros at the beginning to lengthen it to 14 digits.
     *
     * @return self
    
     */
    public function setPublishedGTIN($publishedGTIN)
    {
        if (is_null($publishedGTIN)) {
            throw new \InvalidArgumentException('non-nullable publishedGTIN cannot be null');
        }

        $this->container['publishedGTIN'] = $publishedGTIN;
        return $this;
    }

    /**
     * Gets palletSizeType
     *
     * @return string|null
    
     */
    public function getPalletSizeType()
    {
        return $this->container['palletSizeType'];
    }

    /**
     * Sets palletSizeType
     *
     * @param string|null $palletSizeType Valid values are:  | Value | Meaning | | --- | ----------- | | Large | (4' x 4') | | Small | (3' x 3') |
     *
     * @return self
    
     */
    public function setPalletSizeType($palletSizeType)
    {
        if (is_null($palletSizeType)) {
            throw new \InvalidArgumentException('non-nullable palletSizeType cannot be null');
        }
        $allowedValues = $this->getPalletSizeTypeAllowableValues();
        if (!in_array($palletSizeType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'palletSizeType', must be one of '%s'",
                    $palletSizeType,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['palletSizeType'] = $palletSizeType;
        return $this;
    }

    /**
     * Gets tradeItemNetWeight
     *
     * @return float|null
    
     */
    public function getTradeItemNetWeight()
    {
        return $this->container['tradeItemNetWeight'];
    }

    /**
     * Sets tradeItemNetWeight
     *
     * @param float|null $tradeItemNetWeight Indicates the net weight of the supplier pack case (vndr_out_wt).  This excludes the weight of the case packaging.
     *
     * @return self
    
     */
    public function setTradeItemNetWeight($tradeItemNetWeight)
    {
        if (is_null($tradeItemNetWeight)) {
            throw new \InvalidArgumentException('non-nullable tradeItemNetWeight cannot be null');
        }

        $this->container['tradeItemNetWeight'] = $tradeItemNetWeight;
        return $this;
    }

    /**
     * Gets isDEAReported
     *
     * @return string|null
    
     */
    public function getIsDEAReported()
    {
        return $this->container['isDEAReported'];
    }

    /**
     * Sets isDEAReported
     *
     * @param string|null $isDEAReported Indicates this item needs to be reported to the drug enforcement agency (DEA) when received at the distribution centers.  If `YES`, this item needs to be reported to the drug enforcement agency (DEA).  If `NO`, this item does not need to be reported to the drug enforcement agency (DEA).
     *
     * @return self
    
     */
    public function setIsDEAReported($isDEAReported)
    {
        if (is_null($isDEAReported)) {
            throw new \InvalidArgumentException('non-nullable isDEAReported cannot be null');
        }
        $allowedValues = $this->getIsDEAReportedAllowableValues();
        if (!in_array($isDEAReported, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'isDEAReported', must be one of '%s'",
                    $isDEAReported,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['isDEAReported'] = $isDEAReported;
        return $this;
    }

    /**
     * Gets orderablePackWeightFormat
     *
     * @return string|null
    
     */
    public function getOrderablePackWeightFormat()
    {
        return $this->container['orderablePackWeightFormat'];
    }

    /**
     * Sets orderablePackWeightFormat
     *
     * @param string|null $orderablePackWeightFormat Indicates the trade item pack weight is fixed or variable.  Valid values are:  | Value | Meaning | | --- | ----------- | | Fixed | The weight of the item configuration will not change. | | Variable | The weight of the item will change. |
     *
     * @return self
    
     */
    public function setOrderablePackWeightFormat($orderablePackWeightFormat)
    {
        if (is_null($orderablePackWeightFormat)) {
            throw new \InvalidArgumentException('non-nullable orderablePackWeightFormat cannot be null');
        }
        $allowedValues = $this->getOrderablePackWeightFormatAllowableValues();
        if (!in_array($orderablePackWeightFormat, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'orderablePackWeightFormat', must be one of '%s'",
                    $orderablePackWeightFormat,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['orderablePackWeightFormat'] = $orderablePackWeightFormat;
        return $this;
    }

    /**
     * Gets storeMinimumLifeRemainingToReceive
     *
     * @return int|null
    
     */
    public function getStoreMinimumLifeRemainingToReceive()
    {
        return $this->container['storeMinimumLifeRemainingToReceive'];
    }

    /**
     * Sets storeMinimumLifeRemainingToReceive
     *
     * @param int|null $storeMinimumLifeRemainingToReceive Indicates the minimum number of days that must remain in the life of the product in order to receive it at the store.
     *
     * @return self
    
     */
    public function setStoreMinimumLifeRemainingToReceive($storeMinimumLifeRemainingToReceive)
    {
        if (is_null($storeMinimumLifeRemainingToReceive)) {
            throw new \InvalidArgumentException('non-nullable storeMinimumLifeRemainingToReceive cannot be null');
        }

        $this->container['storeMinimumLifeRemainingToReceive'] = $storeMinimumLifeRemainingToReceive;
        return $this;
    }

    /**
     * Gets plu
     *
     * @return int|null
    
     */
    public function getPlu()
    {
        return $this->container['plu'];
    }

    /**
     * Sets plu
     *
     * @param int|null $plu Indicates the price lookup number.  This value is utilized through the weighing system either through the scales at the back or at the front registers.  The price is set by the weight of the item.
     *
     * @return self
    
     */
    public function setPlu($plu)
    {
        if (is_null($plu)) {
            throw new \InvalidArgumentException('non-nullable plu cannot be null');
        }

        $this->container['plu'] = $plu;
        return $this;
    }

    /**
     * Gets orderablePackType
     *
     * @return string|null
    
     */
    public function getOrderablePackType()
    {
        return $this->container['orderablePackType'];
    }

    /**
     * Sets orderablePackType
     *
     * @param string|null $orderablePackType Indicates the orderable pack for pre-items.  Valid values are:  | Value | Meaning | | --- | ----------- | | EA | The orderable unit is a single item (Each). | | Case_Pack | The orderable unit is a case pack. | | Pallet | The orderable unit is a pallet. | | Inner_Pack | The orderable unit is an inner pack. |
     *
     * @return self
    
     */
    public function setOrderablePackType($orderablePackType)
    {
        if (is_null($orderablePackType)) {
            throw new \InvalidArgumentException('non-nullable orderablePackType cannot be null');
        }
        $allowedValues = $this->getOrderablePackTypeAllowableValues();
        if (!in_array($orderablePackType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'orderablePackType', must be one of '%s'",
                    $orderablePackType,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['orderablePackType'] = $orderablePackType;
        return $this;
    }

    /**
     * Gets sendTraitCodes
     *
     * @return string|null
    
     */
    public function getSendTraitCodes()
    {
        return $this->container['sendTraitCodes'];
    }

    /**
     * Sets sendTraitCodes
     *
     * @param string|null $sendTraitCodes Indicates the list of traits that will be used to send a supply item to the list of stores that result from the trait logic.
     *
     * @return self
    
     */
    public function setSendTraitCodes($sendTraitCodes)
    {
        if (is_null($sendTraitCodes)) {
            throw new \InvalidArgumentException('non-nullable sendTraitCodes cannot be null');
        }

        $this->container['sendTraitCodes'] = $sendTraitCodes;
        return $this;
    }

    /**
     * Gets omitTraitCodes
     *
     * @return string|null
    
     */
    public function getOmitTraitCodes()
    {
        return $this->container['omitTraitCodes'];
    }

    /**
     * Sets omitTraitCodes
     *
     * @param string|null $omitTraitCodes Indicates the list of traits which is used to prevent the item from being sent to the stores that result from the trait logic.
     *
     * @return self
    
     */
    public function setOmitTraitCodes($omitTraitCodes)
    {
        if (is_null($omitTraitCodes)) {
            throw new \InvalidArgumentException('non-nullable omitTraitCodes cannot be null');
        }

        $this->container['omitTraitCodes'] = $omitTraitCodes;
        return $this;
    }

    /**
     * Gets destinationFormatCode
     *
     * @return string[]|null
    
     */
    public function getDestinationFormatCode()
    {
        return $this->container['destinationFormatCode'];
    }

    /**
     * Sets destinationFormatCode
     *
     * @param string[]|null $destinationFormatCode Indicates the store format the item is destined for.  Store formats include:   | Value | Meaning | | --- | ----------- | | WM | Walmart | | SC | Sam's Club | | NM | Neighborhood Market |
     *
     * @return self
    
     */
    public function setDestinationFormatCode($destinationFormatCode)
    {
        if (is_null($destinationFormatCode)) {
            throw new \InvalidArgumentException('non-nullable destinationFormatCode cannot be null');
        }
        $allowedValues = $this->getDestinationFormatCodeAllowableValues();
        if (array_diff($destinationFormatCode, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'destinationFormatCode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['destinationFormatCode'] = $destinationFormatCode;
        return $this;
    }

    /**
     * Gets isCancelWhenOutInd
     *
     * @return string|null
    
     */
    public function getIsCancelWhenOutInd()
    {
        return $this->container['isCancelWhenOutInd'];
    }

    /**
     * Sets isCancelWhenOutInd
     *
     * @param string|null $isCancelWhenOutInd Indicates the automatic deletion process on warehouse type items.  If `YES`, the system will stop the inbound orders to the distribution centers, while still allowing the stores to pull from their appropriate distribution center. When all the inventories are cleared from the warehouse slots the item will automatically flip to deleted status.  If `NO`, the system will not stop the inbound orders to the distribution centers.
     *
     * @return self
    
     */
    public function setIsCancelWhenOutInd($isCancelWhenOutInd)
    {
        if (is_null($isCancelWhenOutInd)) {
            throw new \InvalidArgumentException('non-nullable isCancelWhenOutInd cannot be null');
        }
        $allowedValues = $this->getIsCancelWhenOutIndAllowableValues();
        if (!in_array($isCancelWhenOutInd, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'isCancelWhenOutInd', must be one of '%s'",
                    $isCancelWhenOutInd,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['isCancelWhenOutInd'] = $isCancelWhenOutInd;
        return $this;
    }

    /**
     * Gets specialConsiderationCode
     *
     * @return string|null
    
     */
    public function getSpecialConsiderationCode()
    {
        return $this->container['specialConsiderationCode'];
    }

    /**
     * Sets specialConsiderationCode
     *
     * @param string|null $specialConsiderationCode Indicates the code for items that requires special consideration for receipt, internal shipment or display.  These are the unique codes assigned based on characteristics.  Valid values are:   | Value | Meaning | | --- | ----------- | | 1 | High Demand Items | | 2 | Retail Price Exceeds $5000 | | 3 | High Theft Items | | 4 | Lock Required Items |
     *
     * @return self
    
     */
    public function setSpecialConsiderationCode($specialConsiderationCode)
    {
        if (is_null($specialConsiderationCode)) {
            throw new \InvalidArgumentException('non-nullable specialConsiderationCode cannot be null');
        }
        $allowedValues = $this->getSpecialConsiderationCodeAllowableValues();
        if (!in_array($specialConsiderationCode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'specialConsiderationCode', must be one of '%s'",
                    $specialConsiderationCode,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['specialConsiderationCode'] = $specialConsiderationCode;
        return $this;
    }

    /**
     * Gets storeReceiptDescription
     *
     * @return string|null
    
     */
    public function getStoreReceiptDescription()
    {
        return $this->container['storeReceiptDescription'];
    }

    /**
     * Sets storeReceiptDescription
     *
     * @param string|null $storeReceiptDescription Indicates to the description to print on the customer's receipt and prompts at the register when the items are scanned.  This is for stores only. Description must be simple and brief so the customer can identify their purchase.
     *
     * @return self
    
     */
    public function setStoreReceiptDescription($storeReceiptDescription)
    {
        if (is_null($storeReceiptDescription)) {
            throw new \InvalidArgumentException('non-nullable storeReceiptDescription cannot be null');
        }

        $this->container['storeReceiptDescription'] = $storeReceiptDescription;
        return $this;
    }

    /**
     * Gets storeLabelDescription
     *
     * @return string|null
    
     */
    public function getStoreLabelDescription()
    {
        return $this->container['storeLabelDescription'];
    }

    /**
     * Sets storeLabelDescription
     *
     * @param string|null $storeLabelDescription Indicates a description that is displayed as the primary description on the shelf label at the store.  Also known as *Shelf Label Item Description 1*.
     *
     * @return self
    
     */
    public function setStoreLabelDescription($storeLabelDescription)
    {
        if (is_null($storeLabelDescription)) {
            throw new \InvalidArgumentException('non-nullable storeLabelDescription cannot be null');
        }

        $this->container['storeLabelDescription'] = $storeLabelDescription;
        return $this;
    }

    /**
     * Gets shelf1Color
     *
     * @return string|null
    
     */
    public function getShelf1Color()
    {
        return $this->container['shelf1Color'];
    }

    /**
     * Sets shelf1Color
     *
     * @param string|null $shelf1Color Indicates a 6 character field used to further describe customer selection points about the merchandise.  It is displayed as one of two choices of additional information the shelf labels in the stores and clubs. Previously referred to as Color; can be used for descriptors specific to the product.
     *
     * @return self
    
     */
    public function setShelf1Color($shelf1Color)
    {
        if (is_null($shelf1Color)) {
            throw new \InvalidArgumentException('non-nullable shelf1Color cannot be null');
        }

        $this->container['shelf1Color'] = $shelf1Color;
        return $this;
    }

    /**
     * Gets shelf2Size
     *
     * @return string|null
    
     */
    public function getShelf2Size()
    {
        return $this->container['shelf2Size'];
    }

    /**
     * Sets shelf2Size
     *
     * @param string|null $shelf2Size Indicates a 6 character field used to further describe customer selection points about the merchandise.  It is displayed as one of two choices of additional information the shelf labels in the stores and clubs. Previously referred to as Size, this can be used for descriptors specific to the product.
     *
     * @return self
    
     */
    public function setShelf2Size($shelf2Size)
    {
        if (is_null($shelf2Size)) {
            throw new \InvalidArgumentException('non-nullable shelf2Size cannot be null');
        }

        $this->container['shelf2Size'] = $shelf2Size;
        return $this;
    }

    /**
     * Gets isWeighableAtRegister
     *
     * @return string|null
    
     */
    public function getIsWeighableAtRegister()
    {
        return $this->container['isWeighableAtRegister'];
    }

    /**
     * Sets isWeighableAtRegister
     *
     * @param string|null $isWeighableAtRegister Indicates the item is weighable at front register.  If `YES`, the item is weighable at front register.  If `NO`, the item is not weighable at front register.
     *
     * @return self
    
     */
    public function setIsWeighableAtRegister($isWeighableAtRegister)
    {
        if (is_null($isWeighableAtRegister)) {
            throw new \InvalidArgumentException('non-nullable isWeighableAtRegister cannot be null');
        }
        $allowedValues = $this->getIsWeighableAtRegisterAllowableValues();
        if (!in_array($isWeighableAtRegister, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'isWeighableAtRegister', must be one of '%s'",
                    $isWeighableAtRegister,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['isWeighableAtRegister'] = $isWeighableAtRegister;
        return $this;
    }

    /**
     * Gets isBackroomScaleInd
     *
     * @return string|null
    
     */
    public function getIsBackroomScaleInd()
    {
        return $this->container['isBackroomScaleInd'];
    }

    /**
     * Sets isBackroomScaleInd
     *
     * @param string|null $isBackroomScaleInd Indicates that backroom scales are used to ticket merchandise.  This includes the total retail based on the weight or count of the goods placed on the scale and price per measurement.  The total amount is applied to the printed price embedded barcode which allows the cashier to scan at the register and charge the customer the correct amount. This is used mostly in the deli, bakery, produce, and meat.  If `YES`, backroom scales are used to ticket merchandise. Items will be required to be weighed and marked before the customer takes the goods to the register.  If `NO`, backroom scales are not used to ticket merchandise.
     *
     * @return self
    
     */
    public function setIsBackroomScaleInd($isBackroomScaleInd)
    {
        if (is_null($isBackroomScaleInd)) {
            throw new \InvalidArgumentException('non-nullable isBackroomScaleInd cannot be null');
        }
        $allowedValues = $this->getIsBackroomScaleIndAllowableValues();
        if (!in_array($isBackroomScaleInd, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'isBackroomScaleInd', must be one of '%s'",
                    $isBackroomScaleInd,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['isBackroomScaleInd'] = $isBackroomScaleInd;
        return $this;
    }

    /**
     * Gets hasRFID
     *
     * @return string|null
    
     */
    public function getHasRFID()
    {
        return $this->container['hasRFID'];
    }

    /**
     * Sets hasRFID
     *
     * @param string|null $hasRFID Indicates the product includes a radio frequency identification (RFID) tracking device to see where the merchandise is located.  If `YES`, the product includes a radio frequency identification (RFID).  If `NO`, the product does not include a radio frequency identification (RFID).
     *
     * @return self
    
     */
    public function setHasRFID($hasRFID)
    {
        if (is_null($hasRFID)) {
            throw new \InvalidArgumentException('non-nullable hasRFID cannot be null');
        }
        $allowedValues = $this->getHasRFIDAllowableValues();
        if (!in_array($hasRFID, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'hasRFID', must be one of '%s'",
                    $hasRFID,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['hasRFID'] = $hasRFID;
        return $this;
    }

    /**
     * Gets hasSecurityTag
     *
     * @return string|null
    
     */
    public function getHasSecurityTag()
    {
        return $this->container['hasSecurityTag'];
    }

    /**
     * Sets hasSecurityTag
     *
     * @param string|null $hasSecurityTag Indicates the item is secured by an electronic tag supplied by the merchandise supplier.  This tag is intended to reduce theft of merchandise and is meant to be deactivated at the register. If the electronic tag is not deactivated at point-of-sale register, the tag will be sensed by security equipment at a store entrance or exit and result in an alarm.  If `YES`, the item is secured by an electronic tag supplied by the merchandise supplier.  If `NO`, the item is not secured by an electronic tag supplied by the merchandise supplier.
     *
     * @return self
    
     */
    public function setHasSecurityTag($hasSecurityTag)
    {
        if (is_null($hasSecurityTag)) {
            throw new \InvalidArgumentException('non-nullable hasSecurityTag cannot be null');
        }
        $allowedValues = $this->getHasSecurityTagAllowableValues();
        if (!in_array($hasSecurityTag, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'hasSecurityTag', must be one of '%s'",
                    $hasSecurityTag,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['hasSecurityTag'] = $hasSecurityTag;
        return $this;
    }

    /**
     * Gets supplyItemSecondaryDescription
     *
     * @return string|null
    
     */
    public function getSupplyItemSecondaryDescription()
    {
        return $this->container['supplyItemSecondaryDescription'];
    }

    /**
     * Sets supplyItemSecondaryDescription
     *
     * @param string|null $supplyItemSecondaryDescription Indicates the item is for the home office only.  Exceptions department 5 and 6 WPM also uses this description for their labels.
     *
     * @return self
    
     */
    public function setSupplyItemSecondaryDescription($supplyItemSecondaryDescription)
    {
        if (is_null($supplyItemSecondaryDescription)) {
            throw new \InvalidArgumentException('non-nullable supplyItemSecondaryDescription cannot be null');
        }

        $this->container['supplyItemSecondaryDescription'] = $supplyItemSecondaryDescription;
        return $this;
    }

    /**
     * Gets isShelfRotationInd
     *
     * @return string|null
    
     */
    public function getIsShelfRotationInd()
    {
        return $this->container['isShelfRotationInd'];
    }

    /**
     * Sets isShelfRotationInd
     *
     * @param string|null $isShelfRotationInd Indicates older merchandise should be moved to the front of the shelf.  If `YES`, older merchandise should be moved to the front of the shelf.  If `NO`, older merchandise does not need to be moved to the front of the shelf.
     *
     * @return self
    
     */
    public function setIsShelfRotationInd($isShelfRotationInd)
    {
        if (is_null($isShelfRotationInd)) {
            throw new \InvalidArgumentException('non-nullable isShelfRotationInd cannot be null');
        }
        $allowedValues = $this->getIsShelfRotationIndAllowableValues();
        if (!in_array($isShelfRotationInd, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'isShelfRotationInd', must be one of '%s'",
                    $isShelfRotationInd,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['isShelfRotationInd'] = $isShelfRotationInd;
        return $this;
    }

    /**
     * Gets isCorporateReplenishable
     *
     * @return string|null
    
     */
    public function getIsCorporateReplenishable()
    {
        return $this->container['isCorporateReplenishable'];
    }

    /**
     * Sets isCorporateReplenishable
     *
     * @param string|null $isCorporateReplenishable Indicates the item is re-orderable by the stores.  Indicates the item is re-orderable by the stores.   If `YES`, the item is re-orderable by the stores.  If `NO`, the item is not re-orderable by the stores.
     *
     * @return self
    
     */
    public function setIsCorporateReplenishable($isCorporateReplenishable)
    {
        if (is_null($isCorporateReplenishable)) {
            throw new \InvalidArgumentException('non-nullable isCorporateReplenishable cannot be null');
        }
        $allowedValues = $this->getIsCorporateReplenishableAllowableValues();
        if (!in_array($isCorporateReplenishable, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'isCorporateReplenishable', must be one of '%s'",
                    $isCorporateReplenishable,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['isCorporateReplenishable'] = $isCorporateReplenishable;
        return $this;
    }

    /**
     * Gets isReplenishedByUnitInd
     *
     * @return string|null
    
     */
    public function getIsReplenishedByUnitInd()
    {
        return $this->container['isReplenishedByUnitInd'];
    }

    /**
     * Sets isReplenishedByUnitInd
     *
     * @param string|null $isReplenishedByUnitInd Indicates the item is sold to the customer by weight.  This uses a random weight barcode (price embedded) and is ordered from the warehouse in units determined by the pack quantity.  If `YES`, the item is sold to the customer by weight.  If `NO`, the item is not sold to the customer by weight.
     *
     * @return self
    
     */
    public function setIsReplenishedByUnitInd($isReplenishedByUnitInd)
    {
        if (is_null($isReplenishedByUnitInd)) {
            throw new \InvalidArgumentException('non-nullable isReplenishedByUnitInd cannot be null');
        }
        $allowedValues = $this->getIsReplenishedByUnitIndAllowableValues();
        if (!in_array($isReplenishedByUnitInd, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'isReplenishedByUnitInd', must be one of '%s'",
                    $isReplenishedByUnitInd,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['isReplenishedByUnitInd'] = $isReplenishedByUnitInd;
        return $this;
    }

    /**
     * Gets mbmTypeCode
     *
     * @return string|null
    
     */
    public function getMbmTypeCode()
    {
        return $this->container['mbmTypeCode'];
    }

    /**
     * Sets mbmTypeCode
     *
     * @param string|null $mbmTypeCode Indicates the modular based merchandise type.  This is the status of an item in reference to the modular. Valid values are:   | Value | Meaning | | --- | ----------- | | H | Hold. This is the default when item is created. | | P | Pending. The items removed from modular. They may not be carried in the future. | | M | Modular Driven. This is replenishable for stores based on modular. | | I | Item Driven. This is replenishable for stores based on the traits. |
     *
     * @return self
    
     */
    public function setMbmTypeCode($mbmTypeCode)
    {
        if (is_null($mbmTypeCode)) {
            throw new \InvalidArgumentException('non-nullable mbmTypeCode cannot be null');
        }
        $allowedValues = $this->getMbmTypeCodeAllowableValues();
        if (!in_array($mbmTypeCode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mbmTypeCode', must be one of '%s'",
                    $mbmTypeCode,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['mbmTypeCode'] = $mbmTypeCode;
        return $this;
    }

    /**
     * Gets replenishmentItemType
     *
     * @return string|null
    
     */
    public function getReplenishmentItemType()
    {
        return $this->container['replenishmentItemType'];
    }

    /**
     * Sets replenishmentItemType
     *
     * @param string|null $replenishmentItemType Indicates the type of replenishment for an item. Valid values are:   | Value | Meaning | | ----------- | ----------- | | 03 | Promotional | | 07 | DSD Direct Store Delivery | | 20 | Warehouse | | 22 | Seasonal Warehouse | | 33 | Assembly Distribution | | 37 | Assembly Ship and Bill | | 40 | Import Warehouse | | 42 | Import Seasonal Warehouse | | 43 | Import |
     *
     * @return self
    
     */
    public function setReplenishmentItemType($replenishmentItemType)
    {
        if (is_null($replenishmentItemType)) {
            throw new \InvalidArgumentException('non-nullable replenishmentItemType cannot be null');
        }
        $allowedValues = $this->getReplenishmentItemTypeAllowableValues();
        if (!in_array($replenishmentItemType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'replenishmentItemType', must be one of '%s'",
                    $replenishmentItemType,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['replenishmentItemType'] = $replenishmentItemType;
        return $this;
    }

    /**
     * Gets crushFactorCode
     *
     * @return string|null
    
     */
    public function getCrushFactorCode()
    {
        return $this->container['crushFactorCode'];
    }

    /**
     * Sets crushFactorCode
     *
     * @param string|null $crushFactorCode Indicates the code used by logistics to represents how prone a case is to being crushed when stacked on a pallet or truck.  Valid values are:  | Value | Meaning | | ----------- | ----------- | | 1 | Strongest | | 2 | Less Strong | | 3 | Least Strong |
     *
     * @return self
    
     */
    public function setCrushFactorCode($crushFactorCode)
    {
        if (is_null($crushFactorCode)) {
            throw new \InvalidArgumentException('non-nullable crushFactorCode cannot be null');
        }
        $allowedValues = $this->getCrushFactorCodeAllowableValues();
        if (!in_array($crushFactorCode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'crushFactorCode', must be one of '%s'",
                    $crushFactorCode,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['crushFactorCode'] = $crushFactorCode;
        return $this;
    }

    /**
     * Gets warehouseAlignmentCode
     *
     * @return string|null
    
     */
    public function getWarehouseAlignmentCode()
    {
        return $this->container['warehouseAlignmentCode'];
    }

    /**
     * Sets warehouseAlignmentCode
     *
     * @param string|null $warehouseAlignmentCode Indicates the code for the warehouse location is generated on purchase orders for merchandise which has different needs during distribution.   Valid values are:  | Value | Meaning | | ----------- | ----------- | | AP | Apparel Network | | CI | Regional Network | | PX | Pharmacy Replenishment | | RX | Pharmacy | | R0 | Slow Dry Phase I |
     *
     * @return self
    
     */
    public function setWarehouseAlignmentCode($warehouseAlignmentCode)
    {
        if (is_null($warehouseAlignmentCode)) {
            throw new \InvalidArgumentException('non-nullable warehouseAlignmentCode cannot be null');
        }

        $this->container['warehouseAlignmentCode'] = $warehouseAlignmentCode;
        return $this;
    }

    /**
     * Gets segregationCode
     *
     * @return string|null
    
     */
    public function getSegregationCode()
    {
        return $this->container['segregationCode'];
    }

    /**
     * Sets segregationCode
     *
     * @param string|null $segregationCode Indicates the classification of items for slotting requirements to allow segregation of merchandise.  Valid values are:  | Value | Meaning | | ----------- | ----------- | | 3 | Chemical | | 8 | Animal Food | | 9 | Ammunition-Nonmetal Jacket | | 12 | Pesticides/Insecticides | | 13 | HBA |
     *
     * @return self
    
     */
    public function setSegregationCode($segregationCode)
    {
        if (is_null($segregationCode)) {
            throw new \InvalidArgumentException('non-nullable segregationCode cannot be null');
        }
        $allowedValues = $this->getSegregationCodeAllowableValues();
        if (!in_array($segregationCode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'segregationCode', must be one of '%s'",
                    $segregationCode,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['segregationCode'] = $segregationCode;
        return $this;
    }

    /**
     * Gets commodityId
     *
     * @return string|null
    
     */
    public function getCommodityId()
    {
        return $this->container['commodityId'];
    }

    /**
     * Sets commodityId
     *
     * @param string|null $commodityId Indicates  to group together items that can be shipped on the same truck.  Valid values are:  | Value | Meaning | | ----------- | ----------- | | 132 | Commodity Group 30 | | 110 | Commodity Group 11 | | 123 | Commodity Group 24 |
     *
     * @return self
    
     */
    public function setCommodityId($commodityId)
    {
        if (is_null($commodityId)) {
            throw new \InvalidArgumentException('non-nullable commodityId cannot be null');
        }

        $this->container['commodityId'] = $commodityId;
        return $this;
    }

    /**
     * Gets warehouseAreaCode
     *
     * @return string|null
    
     */
    public function getWarehouseAreaCode()
    {
        return $this->container['warehouseAreaCode'];
    }

    /**
     * Sets warehouseAreaCode
     *
     * @param string|null $warehouseAreaCode Identifies types of merchandise to be stored in specific areas of a warehouse.  Valid values are:  | Value | Meaning | | ----------- | ----------- | | 1 | Fresh Meat | | 4 | Frozen | | 10 | Shoes |
     *
     * @return self
    
     */
    public function setWarehouseAreaCode($warehouseAreaCode)
    {
        if (is_null($warehouseAreaCode)) {
            throw new \InvalidArgumentException('non-nullable warehouseAreaCode cannot be null');
        }

        $this->container['warehouseAreaCode'] = $warehouseAreaCode;
        return $this;
    }

    /**
     * Gets warehouseRotationType
     *
     * @return int|null
    
     */
    public function getWarehouseRotationType()
    {
        return $this->container['warehouseRotationType'];
    }

    /**
     * Sets warehouseRotationType
     *
     * @param int|null $warehouseRotationType Indicates how an item is rotated in a warehouse (grocery or regional).  Valid values are:  | Value | Meaning | | ----------- | ----------- | | 1 | Normal | Rotate by Received Date. This a normal rotation that can be determined by the distribution center. | | 2 | Strict | Rotate by Received Date. This is strict first in, first out rotation. | | 3 | Strict | Rotate by Sell By Date | | 4 | Strict | Rotate by Sequence Number |
     *
     * @return self
    
     */
    public function setWarehouseRotationType($warehouseRotationType)
    {
        if (is_null($warehouseRotationType)) {
            throw new \InvalidArgumentException('non-nullable warehouseRotationType cannot be null');
        }

        $this->container['warehouseRotationType'] = $warehouseRotationType;
        return $this;
    }

    /**
     * Gets eachDataCarriers
     *
     * @return \Walmart\Models\Supplier\US\Items\EachDataCarriers[]|null
    
     */
    public function getEachDataCarriers()
    {
        return $this->container['eachDataCarriers'];
    }

    /**
     * Sets eachDataCarriers
     *
     * @param \Walmart\Models\Supplier\US\Items\EachDataCarriers[]|null $eachDataCarriers Indicates an array of objects representing data in a machine readable form.  This is used to enable automatic reading of the element strings.
     *
     * @return self
    
     */
    public function setEachDataCarriers($eachDataCarriers)
    {
        if (is_null($eachDataCarriers)) {
            throw new \InvalidArgumentException('non-nullable eachDataCarriers cannot be null');
        }

        $this->container['eachDataCarriers'] = $eachDataCarriers;
        return $this;
    }
}
