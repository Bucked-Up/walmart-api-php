<?php

/**
 * StateRestrictions
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Item Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\Supplier\US\Items;

use Walmart\Models\BaseModel;

/**
 * StateRestrictions Class Doc Comment
 *
 * @category Class

 * @description Indicates a list of states and ZIP codes that the item cannot be sold in.

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class StateRestrictions extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'StateRestrictions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'states' => 'string',
        'zipCodes' => 'string',
        'stateRestrictionsText' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'states' => null,
        'zipCodes' => null,
        'stateRestrictionsText' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'states' => false,
        'zipCodes' => false,
        'stateRestrictionsText' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'states' => 'states',
        'zipCodes' => 'zipCodes',
        'stateRestrictionsText' => 'stateRestrictionsText'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'states' => 'setStates',
        'zipCodes' => 'setZipCodes',
        'stateRestrictionsText' => 'setStateRestrictionsText'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'states' => 'getStates',
        'zipCodes' => 'getZipCodes',
        'stateRestrictionsText' => 'getStateRestrictionsText'
    ];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('states', $data ?? [], null);
        $this->setIfExists('zipCodes', $data ?? [], null);
        $this->setIfExists('stateRestrictionsText', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];


        return $invalidProperties;
    }

    /**
     * Gets states
     *
     * @return string|null
    
     */
    public function getStates()
    {
        return $this->container['states'];
    }

    /**
     * Sets states
     *
     * @param string|null $states Indicates a state that the item cannot be sold in.
     *
     * @return self
    
     */
    public function setStates($states)
    {
        if (is_null($states)) {
            throw new \InvalidArgumentException('non-nullable states cannot be null');
        }

        $this->container['states'] = $states;
        return $this;
    }

    /**
     * Gets zipCodes
     *
     * @return string|null
    
     */
    public function getZipCodes()
    {
        return $this->container['zipCodes'];
    }

    /**
     * Sets zipCodes
     *
     * @param string|null $zipCodes Indicates a specific ZIP code within that state that the item cannot be sold in.  The ZIP code is limited to the five digit format.
     *
     * @return self
    
     */
    public function setZipCodes($zipCodes)
    {
        if (is_null($zipCodes)) {
            throw new \InvalidArgumentException('non-nullable zipCodes cannot be null');
        }

        $this->container['zipCodes'] = $zipCodes;
        return $this;
    }

    /**
     * Gets stateRestrictionsText
     *
     * @return string|null
    
     */
    public function getStateRestrictionsText()
    {
        return $this->container['stateRestrictionsText'];
    }

    /**
     * Sets stateRestrictionsText
     *
     * @param string|null $stateRestrictionsText Indicates a specific reason that the item cannot be sold.
     *
     * @return self
    
     */
    public function setStateRestrictionsText($stateRestrictionsText)
    {
        if (is_null($stateRestrictionsText)) {
            throw new \InvalidArgumentException('non-nullable stateRestrictionsText cannot be null');
        }

        $this->container['stateRestrictionsText'] = $stateRestrictionsText;
        return $this;
    }
}
