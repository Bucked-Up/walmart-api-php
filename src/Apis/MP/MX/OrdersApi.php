<?php

/**
 * OrdersApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 */

/**
 * Order Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Apis\MP\MX;

use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use Walmart\Apis\BaseApi;
use Walmart\ApiException;
use Walmart\ObjectSerializer;

require_once __DIR__ . '/../../../../vendor/autoload.php';

/**
 * OrdersApi Class Doc Comment
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class OrdersApi extends BaseApi
{
    /**
     * @var string[] $contentTypes
     */
    public const contentTypes = [
        'acknowledgeOrders' => 'application/json',
        'cancelOrderLines' => 'application/json',
        'deliveryUpdates' => 'application/json',
        'getAllOrders' => 'application/json',
        'getAllOrdersUsingCursor' => 'application/json',
        'getAllWFSOrders' => 'application/json',
        'getShippingLabel' => 'application/json',
        'postBulkShippingLabel' => 'application/json',
        'shippingUpdates' => 'application/json',
    ];

    /**
     * Operation acknowledgeOrders
     *
     * Acknowledge Orders
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  \Walmart\Models\MP\MX\Orders\AcknowledgeOrdersRequest $acknowledgeOrdersRequest (required)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string|\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response|\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response
     */
    public function acknowledgeOrders(
        string $purchaseOrderId,
        \Walmart\Models\MP\MX\Orders\AcknowledgeOrdersRequest $acknowledgeOrdersRequest
    ): string {
        return $this->acknowledgeOrdersWithHttpInfo($purchaseOrderId, $acknowledgeOrdersRequest);
    }

    /**
     * Operation acknowledgeOrdersWithHttpInfo
     *
     * Acknowledge Orders
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  \Walmart\Models\MP\MX\Orders\AcknowledgeOrdersRequest $acknowledgeOrdersRequest (required)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string|\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response|\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response
     */
    protected function acknowledgeOrdersWithHttpInfo(
        string $purchaseOrderId,
        \Walmart\Models\MP\MX\Orders\AcknowledgeOrdersRequest $acknowledgeOrdersRequest,
    ): string {
        $request = $this->acknowledgeOrdersRequest($purchaseOrderId, $acknowledgeOrdersRequest, );
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 202:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, 'string', $response->getHeaders());
                case 400:
                    if ('\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response', $response->getHeaders());
                case 500:
                    if ('\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response', $response->getHeaders());
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation acknowledgeOrdersAsync
     *
     * Acknowledge Orders
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  \Walmart\Models\MP\MX\Orders\AcknowledgeOrdersRequest $acknowledgeOrdersRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acknowledgeOrdersAsync(
        string $purchaseOrderId,
        \Walmart\Models\MP\MX\Orders\AcknowledgeOrdersRequest $acknowledgeOrdersRequest
    ): PromiseInterface {
        return $this->acknowledgeOrdersAsyncWithHttpInfo($purchaseOrderId, $acknowledgeOrdersRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation acknowledgeOrdersAsyncWithHttpInfo
     *
     *
     * Acknowledge Orders
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  \Walmart\Models\MP\MX\Orders\AcknowledgeOrdersRequest $acknowledgeOrdersRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function acknowledgeOrdersAsyncWithHttpInfo(
        string $purchaseOrderId,
        \Walmart\Models\MP\MX\Orders\AcknowledgeOrdersRequest $acknowledgeOrdersRequest,
    ): PromiseInterface {
        $returnType = 'string';
        $request = $this->acknowledgeOrdersRequest($purchaseOrderId, $acknowledgeOrdersRequest, );
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'acknowledgeOrders'
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  \Walmart\Models\MP\MX\Orders\AcknowledgeOrdersRequest $acknowledgeOrdersRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function acknowledgeOrdersRequest(
        string $purchaseOrderId,
        \Walmart\Models\MP\MX\Orders\AcknowledgeOrdersRequest $acknowledgeOrdersRequest,
    ): Request {
        $contentType = self::contentTypes['acknowledgeOrders'];

        // verify the required parameter 'purchaseOrderId' is set
        if ($purchaseOrderId === null || (is_array($purchaseOrderId) && count($purchaseOrderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchaseOrderId when calling acknowledgeOrders'
            );
        }
        // verify the required parameter 'acknowledgeOrdersRequest' is set
        if ($acknowledgeOrdersRequest === null || (is_array($acknowledgeOrdersRequest) && count($acknowledgeOrdersRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $acknowledgeOrdersRequest when calling acknowledgeOrders'
            );
        }
        $resourcePath = '/v3/orders/{purchaseOrderId}/acknowledge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($purchaseOrderId !== null) {
            $resourcePath = str_replace(
                '{' . 'purchaseOrderId' . '}',
                ObjectSerializer::toPathValue($purchaseOrderId),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($acknowledgeOrdersRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($acknowledgeOrdersRequest));
            } else {
                $httpBody = $acknowledgeOrdersRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getClientId()) || !(empty($this->config->getClientSecret()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getClientId() . ":" . $this->config->getClientSecret());
        }

        // this endpoint requires Bearer authentication (access token)
        $token = $this->config->getAccessToken();
        if ($token) {
            $headers['WM_SEC.ACCESS_TOKEN'] = $token->accessToken;
        }

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelOrderLines
     *
     * Cancel Order Lines
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  \Walmart\Models\MP\MX\Orders\CancelOrderLinesRequest $cancelOrderLinesRequest File fields (required)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string|\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response|\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response
     */
    public function cancelOrderLines(
        string $purchaseOrderId,
        \Walmart\Models\MP\MX\Orders\CancelOrderLinesRequest $cancelOrderLinesRequest
    ): string {
        return $this->cancelOrderLinesWithHttpInfo($purchaseOrderId, $cancelOrderLinesRequest);
    }

    /**
     * Operation cancelOrderLinesWithHttpInfo
     *
     * Cancel Order Lines
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  \Walmart\Models\MP\MX\Orders\CancelOrderLinesRequest $cancelOrderLinesRequest File fields (required)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string|\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response|\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response
     */
    protected function cancelOrderLinesWithHttpInfo(
        string $purchaseOrderId,
        \Walmart\Models\MP\MX\Orders\CancelOrderLinesRequest $cancelOrderLinesRequest,
    ): string {
        $request = $this->cancelOrderLinesRequest($purchaseOrderId, $cancelOrderLinesRequest, );
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 202:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, 'string', $response->getHeaders());
                case 400:
                    if ('\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response', $response->getHeaders());
                case 500:
                    if ('\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response', $response->getHeaders());
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation cancelOrderLinesAsync
     *
     * Cancel Order Lines
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  \Walmart\Models\MP\MX\Orders\CancelOrderLinesRequest $cancelOrderLinesRequest File fields (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelOrderLinesAsync(
        string $purchaseOrderId,
        \Walmart\Models\MP\MX\Orders\CancelOrderLinesRequest $cancelOrderLinesRequest
    ): PromiseInterface {
        return $this->cancelOrderLinesAsyncWithHttpInfo($purchaseOrderId, $cancelOrderLinesRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelOrderLinesAsyncWithHttpInfo
     *
     *
     * Cancel Order Lines
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  \Walmart\Models\MP\MX\Orders\CancelOrderLinesRequest $cancelOrderLinesRequest File fields (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function cancelOrderLinesAsyncWithHttpInfo(
        string $purchaseOrderId,
        \Walmart\Models\MP\MX\Orders\CancelOrderLinesRequest $cancelOrderLinesRequest,
    ): PromiseInterface {
        $returnType = 'string';
        $request = $this->cancelOrderLinesRequest($purchaseOrderId, $cancelOrderLinesRequest, );
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelOrderLines'
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  \Walmart\Models\MP\MX\Orders\CancelOrderLinesRequest $cancelOrderLinesRequest File fields (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelOrderLinesRequest(
        string $purchaseOrderId,
        \Walmart\Models\MP\MX\Orders\CancelOrderLinesRequest $cancelOrderLinesRequest,
    ): Request {
        $contentType = self::contentTypes['cancelOrderLines'];

        // verify the required parameter 'purchaseOrderId' is set
        if ($purchaseOrderId === null || (is_array($purchaseOrderId) && count($purchaseOrderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchaseOrderId when calling cancelOrderLines'
            );
        }
        // verify the required parameter 'cancelOrderLinesRequest' is set
        if ($cancelOrderLinesRequest === null || (is_array($cancelOrderLinesRequest) && count($cancelOrderLinesRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cancelOrderLinesRequest when calling cancelOrderLines'
            );
        }
        $resourcePath = '/v3/orders/{purchaseOrderId}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($purchaseOrderId !== null) {
            $resourcePath = str_replace(
                '{' . 'purchaseOrderId' . '}',
                ObjectSerializer::toPathValue($purchaseOrderId),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cancelOrderLinesRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cancelOrderLinesRequest));
            } else {
                $httpBody = $cancelOrderLinesRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getClientId()) || !(empty($this->config->getClientSecret()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getClientId() . ":" . $this->config->getClientSecret());
        }

        // this endpoint requires Bearer authentication (access token)
        $token = $this->config->getAccessToken();
        if ($token) {
            $headers['WM_SEC.ACCESS_TOKEN'] = $token->accessToken;
        }

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deliveryUpdates
     *
     * Delivery Updates
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  \Walmart\Models\MP\MX\Orders\DeliveryUpdatesRequest $deliveryUpdatesRequest File fields (required)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string|\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response|\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response
     */
    public function deliveryUpdates(
        string $purchaseOrderId,
        \Walmart\Models\MP\MX\Orders\DeliveryUpdatesRequest $deliveryUpdatesRequest
    ): string {
        return $this->deliveryUpdatesWithHttpInfo($purchaseOrderId, $deliveryUpdatesRequest);
    }

    /**
     * Operation deliveryUpdatesWithHttpInfo
     *
     * Delivery Updates
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  \Walmart\Models\MP\MX\Orders\DeliveryUpdatesRequest $deliveryUpdatesRequest File fields (required)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string|\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response|\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response
     */
    protected function deliveryUpdatesWithHttpInfo(
        string $purchaseOrderId,
        \Walmart\Models\MP\MX\Orders\DeliveryUpdatesRequest $deliveryUpdatesRequest,
    ): string {
        $request = $this->deliveryUpdatesRequest($purchaseOrderId, $deliveryUpdatesRequest, );
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 202:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, 'string', $response->getHeaders());
                case 400:
                    if ('\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response', $response->getHeaders());
                case 500:
                    if ('\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response', $response->getHeaders());
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation deliveryUpdatesAsync
     *
     * Delivery Updates
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  \Walmart\Models\MP\MX\Orders\DeliveryUpdatesRequest $deliveryUpdatesRequest File fields (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deliveryUpdatesAsync(
        string $purchaseOrderId,
        \Walmart\Models\MP\MX\Orders\DeliveryUpdatesRequest $deliveryUpdatesRequest
    ): PromiseInterface {
        return $this->deliveryUpdatesAsyncWithHttpInfo($purchaseOrderId, $deliveryUpdatesRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deliveryUpdatesAsyncWithHttpInfo
     *
     *
     * Delivery Updates
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  \Walmart\Models\MP\MX\Orders\DeliveryUpdatesRequest $deliveryUpdatesRequest File fields (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function deliveryUpdatesAsyncWithHttpInfo(
        string $purchaseOrderId,
        \Walmart\Models\MP\MX\Orders\DeliveryUpdatesRequest $deliveryUpdatesRequest,
    ): PromiseInterface {
        $returnType = 'string';
        $request = $this->deliveryUpdatesRequest($purchaseOrderId, $deliveryUpdatesRequest, );
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'deliveryUpdates'
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  \Walmart\Models\MP\MX\Orders\DeliveryUpdatesRequest $deliveryUpdatesRequest File fields (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deliveryUpdatesRequest(
        string $purchaseOrderId,
        \Walmart\Models\MP\MX\Orders\DeliveryUpdatesRequest $deliveryUpdatesRequest,
    ): Request {
        $contentType = self::contentTypes['deliveryUpdates'];

        // verify the required parameter 'purchaseOrderId' is set
        if ($purchaseOrderId === null || (is_array($purchaseOrderId) && count($purchaseOrderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchaseOrderId when calling deliveryUpdates'
            );
        }
        // verify the required parameter 'deliveryUpdatesRequest' is set
        if ($deliveryUpdatesRequest === null || (is_array($deliveryUpdatesRequest) && count($deliveryUpdatesRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deliveryUpdatesRequest when calling deliveryUpdates'
            );
        }
        $resourcePath = '/v3/orders/{purchaseOrderId}/deliver';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($purchaseOrderId !== null) {
            $resourcePath = str_replace(
                '{' . 'purchaseOrderId' . '}',
                ObjectSerializer::toPathValue($purchaseOrderId),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($deliveryUpdatesRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($deliveryUpdatesRequest));
            } else {
                $httpBody = $deliveryUpdatesRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getClientId()) || !(empty($this->config->getClientSecret()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getClientId() . ":" . $this->config->getClientSecret());
        }

        // this endpoint requires Bearer authentication (access token)
        $token = $this->config->getAccessToken();
        if ($token) {
            $headers['WM_SEC.ACCESS_TOKEN'] = $token->accessToken;
        }

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllOrders
     *
     * Get all orders
     *
     * @param  string $createdStartDate Start Date for querying all purchase orders after this date. Use epoch time format in seconds. (optional, default to 'NOW-180DAYS')
     * @param  string $createdEndDate End Date for querying all purchase orders after this date. Use epoch time format in seconds. (optional, default to 'NOW')
     * @param  string $limit The number of orders to be returned. Cannot be greater than 100. (optional, default to '10')
     * @param  string $offset The starting offset of the first order required in the response. Cannot be greater than 1000 (optional, default to '0')
     * @param  string $customerOrderId The customer order ID. (optional)
     * @param  string $purchaseOrderId The purchase order ID. (optional)
     * @param  string $statusCodeFilter The status code filter to apply. Valid values will be Created, Acknowledged, Shipped, Cancelled, OnHold, Delivered. (optional)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\MX\Orders\GetAllOrders200Response|\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response|\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response
     */
    public function getAllOrders(
        ?string $createdStartDate = 'NOW-180DAYS',
        ?string $createdEndDate = 'NOW',
        ?string $limit = '10',
        ?string $offset = '0',
        ?string $customerOrderId = null,
        ?string $purchaseOrderId = null,
        ?string $statusCodeFilter = null
    ): \Walmart\Models\MP\MX\Orders\GetAllOrders200Response {
        return $this->getAllOrdersWithHttpInfo($createdStartDate, $createdEndDate, $limit, $offset, $customerOrderId, $purchaseOrderId, $statusCodeFilter);
    }

    /**
     * Operation getAllOrdersWithHttpInfo
     *
     * Get all orders
     *
     * @param  string $createdStartDate Start Date for querying all purchase orders after this date. Use epoch time format in seconds. (optional, default to 'NOW-180DAYS')
     * @param  string $createdEndDate End Date for querying all purchase orders after this date. Use epoch time format in seconds. (optional, default to 'NOW')
     * @param  string $limit The number of orders to be returned. Cannot be greater than 100. (optional, default to '10')
     * @param  string $offset The starting offset of the first order required in the response. Cannot be greater than 1000 (optional, default to '0')
     * @param  string $customerOrderId The customer order ID. (optional)
     * @param  string $purchaseOrderId The purchase order ID. (optional)
     * @param  string $statusCodeFilter The status code filter to apply. Valid values will be Created, Acknowledged, Shipped, Cancelled, OnHold, Delivered. (optional)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\MX\Orders\GetAllOrders200Response|\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response|\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response
     */
    protected function getAllOrdersWithHttpInfo(
        ?string $createdStartDate = 'NOW-180DAYS',
        ?string $createdEndDate = 'NOW',
        ?string $limit = '10',
        ?string $offset = '0',
        ?string $customerOrderId = null,
        ?string $purchaseOrderId = null,
        ?string $statusCodeFilter = null,
    ): \Walmart\Models\MP\MX\Orders\GetAllOrders200Response {
        $request = $this->getAllOrdersRequest($createdStartDate, $createdEndDate, $limit, $offset, $customerOrderId, $purchaseOrderId, $statusCodeFilter, );
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 200:
                    if ('\Walmart\Models\MP\MX\Orders\GetAllOrders200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Walmart\Models\MP\MX\Orders\GetAllOrders200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\MX\Orders\GetAllOrders200Response', $response->getHeaders());
                case 400:
                    if ('\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response', $response->getHeaders());
                case 500:
                    if ('\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response', $response->getHeaders());
            }

            $returnType = '\Walmart\Models\MP\MX\Orders\GetAllOrders200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\MX\Orders\GetAllOrders200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation getAllOrdersAsync
     *
     * Get all orders
     *
     * @param  string $createdStartDate Start Date for querying all purchase orders after this date. Use epoch time format in seconds. (optional, default to 'NOW-180DAYS')
     * @param  string $createdEndDate End Date for querying all purchase orders after this date. Use epoch time format in seconds. (optional, default to 'NOW')
     * @param  string $limit The number of orders to be returned. Cannot be greater than 100. (optional, default to '10')
     * @param  string $offset The starting offset of the first order required in the response. Cannot be greater than 1000 (optional, default to '0')
     * @param  string $customerOrderId The customer order ID. (optional)
     * @param  string $purchaseOrderId The purchase order ID. (optional)
     * @param  string $statusCodeFilter The status code filter to apply. Valid values will be Created, Acknowledged, Shipped, Cancelled, OnHold, Delivered. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllOrdersAsync(
        ?string $createdStartDate = 'NOW-180DAYS',
        ?string $createdEndDate = 'NOW',
        ?string $limit = '10',
        ?string $offset = '0',
        ?string $customerOrderId = null,
        ?string $purchaseOrderId = null,
        ?string $statusCodeFilter = null
    ): PromiseInterface {
        return $this->getAllOrdersAsyncWithHttpInfo($createdStartDate, $createdEndDate, $limit, $offset, $customerOrderId, $purchaseOrderId, $statusCodeFilter)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllOrdersAsyncWithHttpInfo
     *
     *
     * Get all orders
     *
     * @param  string $createdStartDate Start Date for querying all purchase orders after this date. Use epoch time format in seconds. (optional, default to 'NOW-180DAYS')
     * @param  string $createdEndDate End Date for querying all purchase orders after this date. Use epoch time format in seconds. (optional, default to 'NOW')
     * @param  string $limit The number of orders to be returned. Cannot be greater than 100. (optional, default to '10')
     * @param  string $offset The starting offset of the first order required in the response. Cannot be greater than 1000 (optional, default to '0')
     * @param  string $customerOrderId The customer order ID. (optional)
     * @param  string $purchaseOrderId The purchase order ID. (optional)
     * @param  string $statusCodeFilter The status code filter to apply. Valid values will be Created, Acknowledged, Shipped, Cancelled, OnHold, Delivered. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function getAllOrdersAsyncWithHttpInfo(
        ?string $createdStartDate = 'NOW-180DAYS',
        ?string $createdEndDate = 'NOW',
        ?string $limit = '10',
        ?string $offset = '0',
        ?string $customerOrderId = null,
        ?string $purchaseOrderId = null,
        ?string $statusCodeFilter = null,
    ): PromiseInterface {
        $returnType = '\Walmart\Models\MP\MX\Orders\GetAllOrders200Response';
        $request = $this->getAllOrdersRequest($createdStartDate, $createdEndDate, $limit, $offset, $customerOrderId, $purchaseOrderId, $statusCodeFilter, );
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllOrders'
     *
     * @param  string $createdStartDate Start Date for querying all purchase orders after this date. Use epoch time format in seconds. (optional, default to 'NOW-180DAYS')
     * @param  string $createdEndDate End Date for querying all purchase orders after this date. Use epoch time format in seconds. (optional, default to 'NOW')
     * @param  string $limit The number of orders to be returned. Cannot be greater than 100. (optional, default to '10')
     * @param  string $offset The starting offset of the first order required in the response. Cannot be greater than 1000 (optional, default to '0')
     * @param  string $customerOrderId The customer order ID. (optional)
     * @param  string $purchaseOrderId The purchase order ID. (optional)
     * @param  string $statusCodeFilter The status code filter to apply. Valid values will be Created, Acknowledged, Shipped, Cancelled, OnHold, Delivered. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllOrdersRequest(
        ?string $createdStartDate = 'NOW-180DAYS',
        ?string $createdEndDate = 'NOW',
        ?string $limit = '10',
        ?string $offset = '0',
        ?string $customerOrderId = null,
        ?string $purchaseOrderId = null,
        ?string $statusCodeFilter = null,
    ): Request {
        $contentType = self::contentTypes['getAllOrders'];

        $resourcePath = '/v3/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = [
            ObjectSerializer::toQueryValue(
                $createdStartDate,
                'createdStartDate', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $createdEndDate,
                'createdEndDate', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $limit,
                'limit', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $offset,
                'offset', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $customerOrderId,
                'customerOrderId', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $purchaseOrderId,
                'purchaseOrderId', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $statusCodeFilter,
                'statusCodeFilter', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
        ];

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getClientId()) || !(empty($this->config->getClientSecret()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getClientId() . ":" . $this->config->getClientSecret());
        }

        // this endpoint requires Bearer authentication (access token)
        $token = $this->config->getAccessToken();
        if ($token) {
            $headers['WM_SEC.ACCESS_TOKEN'] = $token->accessToken;
        }

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllOrdersUsingCursor
     *
     * Get all orders using cursor mark
     *
     * @param  string $statusCodeFilter The status code filter to apply. Valid values will be Created, Acknowledged, Shipped, Cancelled, OnHold, Delivered. (required)
     * @param  string $createdStartDate Start Date for querying all purchase orders after this date. Either both the createdStartDate, createdEndDate must be present in the query params or none present. If passed must be in the format - 'yyyy-MM-dd'T'HH:mm:ss.SSSXXX' (Ex. 2022-01-29T10:53:12.355-09:30 ). Use URI encoded time format. (optional, default to 'NOW-180DAYS')
     * @param  string $createdEndDate End Date for querying all purchase orders after this date. Either both the createdStartDate, createdEndDate must be present in the query params or none present. If passed must be in the format - 'yyyy-MM-dd'T'HH:mm:ss.SSSXXX' (Ex. 2022-03-29T16:43:12.355+05:30 ). Use URI encoded time format. (optional, default to 'NOW')
     * @param  string $limit The number of orders to be returned. Cannot be larger than 100. (optional, default to '10')
     * @param  string $cursorMark The cursor from which next set of records to be retrieved. (optional, default to '*')
     * @param  string $customerOrderId The customer order ID. (optional)
     * @param  string $purchaseOrderId The purchase order ID. (optional)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\MX\Orders\GetAllOrdersUsingCursor200Response|\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response|\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response
     */
    public function getAllOrdersUsingCursor(
        string $statusCodeFilter,
        ?string $createdStartDate = 'NOW-180DAYS',
        ?string $createdEndDate = 'NOW',
        ?string $limit = '10',
        ?string $cursorMark = '*',
        ?string $customerOrderId = null,
        ?string $purchaseOrderId = null
    ): \Walmart\Models\MP\MX\Orders\GetAllOrdersUsingCursor200Response {
        return $this->getAllOrdersUsingCursorWithHttpInfo($statusCodeFilter, $createdStartDate, $createdEndDate, $limit, $cursorMark, $customerOrderId, $purchaseOrderId);
    }

    /**
     * Operation getAllOrdersUsingCursorWithHttpInfo
     *
     * Get all orders using cursor mark
     *
     * @param  string $statusCodeFilter The status code filter to apply. Valid values will be Created, Acknowledged, Shipped, Cancelled, OnHold, Delivered. (required)
     * @param  string $createdStartDate Start Date for querying all purchase orders after this date. Either both the createdStartDate, createdEndDate must be present in the query params or none present. If passed must be in the format - 'yyyy-MM-dd'T'HH:mm:ss.SSSXXX' (Ex. 2022-01-29T10:53:12.355-09:30 ). Use URI encoded time format. (optional, default to 'NOW-180DAYS')
     * @param  string $createdEndDate End Date for querying all purchase orders after this date. Either both the createdStartDate, createdEndDate must be present in the query params or none present. If passed must be in the format - 'yyyy-MM-dd'T'HH:mm:ss.SSSXXX' (Ex. 2022-03-29T16:43:12.355+05:30 ). Use URI encoded time format. (optional, default to 'NOW')
     * @param  string $limit The number of orders to be returned. Cannot be larger than 100. (optional, default to '10')
     * @param  string $cursorMark The cursor from which next set of records to be retrieved. (optional, default to '*')
     * @param  string $customerOrderId The customer order ID. (optional)
     * @param  string $purchaseOrderId The purchase order ID. (optional)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\MX\Orders\GetAllOrdersUsingCursor200Response|\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response|\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response
     */
    protected function getAllOrdersUsingCursorWithHttpInfo(
        string $statusCodeFilter,
        ?string $createdStartDate = 'NOW-180DAYS',
        ?string $createdEndDate = 'NOW',
        ?string $limit = '10',
        ?string $cursorMark = '*',
        ?string $customerOrderId = null,
        ?string $purchaseOrderId = null,
    ): \Walmart\Models\MP\MX\Orders\GetAllOrdersUsingCursor200Response {
        $request = $this->getAllOrdersUsingCursorRequest($statusCodeFilter, $createdStartDate, $createdEndDate, $limit, $cursorMark, $customerOrderId, $purchaseOrderId, );
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 200:
                    if ('\Walmart\Models\MP\MX\Orders\GetAllOrdersUsingCursor200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Walmart\Models\MP\MX\Orders\GetAllOrdersUsingCursor200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\MX\Orders\GetAllOrdersUsingCursor200Response', $response->getHeaders());
                case 400:
                    if ('\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response', $response->getHeaders());
                case 500:
                    if ('\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response', $response->getHeaders());
            }

            $returnType = '\Walmart\Models\MP\MX\Orders\GetAllOrdersUsingCursor200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\MX\Orders\GetAllOrdersUsingCursor200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation getAllOrdersUsingCursorAsync
     *
     * Get all orders using cursor mark
     *
     * @param  string $statusCodeFilter The status code filter to apply. Valid values will be Created, Acknowledged, Shipped, Cancelled, OnHold, Delivered. (required)
     * @param  string $createdStartDate Start Date for querying all purchase orders after this date. Either both the createdStartDate, createdEndDate must be present in the query params or none present. If passed must be in the format - 'yyyy-MM-dd'T'HH:mm:ss.SSSXXX' (Ex. 2022-01-29T10:53:12.355-09:30 ). Use URI encoded time format. (optional, default to 'NOW-180DAYS')
     * @param  string $createdEndDate End Date for querying all purchase orders after this date. Either both the createdStartDate, createdEndDate must be present in the query params or none present. If passed must be in the format - 'yyyy-MM-dd'T'HH:mm:ss.SSSXXX' (Ex. 2022-03-29T16:43:12.355+05:30 ). Use URI encoded time format. (optional, default to 'NOW')
     * @param  string $limit The number of orders to be returned. Cannot be larger than 100. (optional, default to '10')
     * @param  string $cursorMark The cursor from which next set of records to be retrieved. (optional, default to '*')
     * @param  string $customerOrderId The customer order ID. (optional)
     * @param  string $purchaseOrderId The purchase order ID. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllOrdersUsingCursorAsync(
        string $statusCodeFilter,
        ?string $createdStartDate = 'NOW-180DAYS',
        ?string $createdEndDate = 'NOW',
        ?string $limit = '10',
        ?string $cursorMark = '*',
        ?string $customerOrderId = null,
        ?string $purchaseOrderId = null
    ): PromiseInterface {
        return $this->getAllOrdersUsingCursorAsyncWithHttpInfo($statusCodeFilter, $createdStartDate, $createdEndDate, $limit, $cursorMark, $customerOrderId, $purchaseOrderId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllOrdersUsingCursorAsyncWithHttpInfo
     *
     *
     * Get all orders using cursor mark
     *
     * @param  string $statusCodeFilter The status code filter to apply. Valid values will be Created, Acknowledged, Shipped, Cancelled, OnHold, Delivered. (required)
     * @param  string $createdStartDate Start Date for querying all purchase orders after this date. Either both the createdStartDate, createdEndDate must be present in the query params or none present. If passed must be in the format - 'yyyy-MM-dd'T'HH:mm:ss.SSSXXX' (Ex. 2022-01-29T10:53:12.355-09:30 ). Use URI encoded time format. (optional, default to 'NOW-180DAYS')
     * @param  string $createdEndDate End Date for querying all purchase orders after this date. Either both the createdStartDate, createdEndDate must be present in the query params or none present. If passed must be in the format - 'yyyy-MM-dd'T'HH:mm:ss.SSSXXX' (Ex. 2022-03-29T16:43:12.355+05:30 ). Use URI encoded time format. (optional, default to 'NOW')
     * @param  string $limit The number of orders to be returned. Cannot be larger than 100. (optional, default to '10')
     * @param  string $cursorMark The cursor from which next set of records to be retrieved. (optional, default to '*')
     * @param  string $customerOrderId The customer order ID. (optional)
     * @param  string $purchaseOrderId The purchase order ID. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function getAllOrdersUsingCursorAsyncWithHttpInfo(
        string $statusCodeFilter,
        ?string $createdStartDate = 'NOW-180DAYS',
        ?string $createdEndDate = 'NOW',
        ?string $limit = '10',
        ?string $cursorMark = '*',
        ?string $customerOrderId = null,
        ?string $purchaseOrderId = null,
    ): PromiseInterface {
        $returnType = '\Walmart\Models\MP\MX\Orders\GetAllOrdersUsingCursor200Response';
        $request = $this->getAllOrdersUsingCursorRequest($statusCodeFilter, $createdStartDate, $createdEndDate, $limit, $cursorMark, $customerOrderId, $purchaseOrderId, );
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllOrdersUsingCursor'
     *
     * @param  string $statusCodeFilter The status code filter to apply. Valid values will be Created, Acknowledged, Shipped, Cancelled, OnHold, Delivered. (required)
     * @param  string $createdStartDate Start Date for querying all purchase orders after this date. Either both the createdStartDate, createdEndDate must be present in the query params or none present. If passed must be in the format - 'yyyy-MM-dd'T'HH:mm:ss.SSSXXX' (Ex. 2022-01-29T10:53:12.355-09:30 ). Use URI encoded time format. (optional, default to 'NOW-180DAYS')
     * @param  string $createdEndDate End Date for querying all purchase orders after this date. Either both the createdStartDate, createdEndDate must be present in the query params or none present. If passed must be in the format - 'yyyy-MM-dd'T'HH:mm:ss.SSSXXX' (Ex. 2022-03-29T16:43:12.355+05:30 ). Use URI encoded time format. (optional, default to 'NOW')
     * @param  string $limit The number of orders to be returned. Cannot be larger than 100. (optional, default to '10')
     * @param  string $cursorMark The cursor from which next set of records to be retrieved. (optional, default to '*')
     * @param  string $customerOrderId The customer order ID. (optional)
     * @param  string $purchaseOrderId The purchase order ID. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllOrdersUsingCursorRequest(
        string $statusCodeFilter,
        ?string $createdStartDate = 'NOW-180DAYS',
        ?string $createdEndDate = 'NOW',
        ?string $limit = '10',
        ?string $cursorMark = '*',
        ?string $customerOrderId = null,
        ?string $purchaseOrderId = null,
    ): Request {
        $contentType = self::contentTypes['getAllOrdersUsingCursor'];

        // verify the required parameter 'statusCodeFilter' is set
        if ($statusCodeFilter === null || (is_array($statusCodeFilter) && count($statusCodeFilter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $statusCodeFilter when calling getAllOrdersUsingCursor'
            );
        }
        $resourcePath = '/v3/orders/cursor';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = [
            ObjectSerializer::toQueryValue(
                $createdStartDate,
                'createdStartDate', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $createdEndDate,
                'createdEndDate', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $limit,
                'limit', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $cursorMark,
                'cursorMark', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $customerOrderId,
                'customerOrderId', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $purchaseOrderId,
                'purchaseOrderId', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $statusCodeFilter,
                'statusCodeFilter', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                true // required
            ) ?? [],
        ];

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getClientId()) || !(empty($this->config->getClientSecret()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getClientId() . ":" . $this->config->getClientSecret());
        }

        // this endpoint requires Bearer authentication (access token)
        $token = $this->config->getAccessToken();
        if ($token) {
            $headers['WM_SEC.ACCESS_TOKEN'] = $token->accessToken;
        }

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllWFSOrders
     *
     * Get all WFS orders
     *
     * @param  string $createdStartDate Start Date for querying all purchase orders after this date. Use epoch time format in seconds. (optional)
     * @param  string $createdEndDate End Date for querying all purchase orders after this date. Use epoch time format in seconds. (optional)
     * @param  string $limit The number of orders to be returned. Cannot be larger than 200. (optional, default to '10')
     * @param  string $offset The starting offset of the first order required in the response. (optional, default to '0')
     * @param  string $customerOrderId The customer order ID. (optional, default to '0')
     * @param  string $statusCodeFilter The status code filter to apply. Valid values will be Created, SentForFulfillment, Shipped, Cancelled, Delivered (optional)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\MX\Orders\GetAllWFSOrders200Response
     */
    public function getAllWFSOrders(
        ?string $createdStartDate = null,
        ?string $createdEndDate = null,
        ?string $limit = '10',
        ?string $offset = '0',
        ?string $customerOrderId = '0',
        ?string $statusCodeFilter = null
    ): \Walmart\Models\MP\MX\Orders\GetAllWFSOrders200Response {
        return $this->getAllWFSOrdersWithHttpInfo($createdStartDate, $createdEndDate, $limit, $offset, $customerOrderId, $statusCodeFilter);
    }

    /**
     * Operation getAllWFSOrdersWithHttpInfo
     *
     * Get all WFS orders
     *
     * @param  string $createdStartDate Start Date for querying all purchase orders after this date. Use epoch time format in seconds. (optional)
     * @param  string $createdEndDate End Date for querying all purchase orders after this date. Use epoch time format in seconds. (optional)
     * @param  string $limit The number of orders to be returned. Cannot be larger than 200. (optional, default to '10')
     * @param  string $offset The starting offset of the first order required in the response. (optional, default to '0')
     * @param  string $customerOrderId The customer order ID. (optional, default to '0')
     * @param  string $statusCodeFilter The status code filter to apply. Valid values will be Created, SentForFulfillment, Shipped, Cancelled, Delivered (optional)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\MX\Orders\GetAllWFSOrders200Response
     */
    protected function getAllWFSOrdersWithHttpInfo(
        ?string $createdStartDate = null,
        ?string $createdEndDate = null,
        ?string $limit = '10',
        ?string $offset = '0',
        ?string $customerOrderId = '0',
        ?string $statusCodeFilter = null,
    ): \Walmart\Models\MP\MX\Orders\GetAllWFSOrders200Response {
        $request = $this->getAllWFSOrdersRequest($createdStartDate, $createdEndDate, $limit, $offset, $customerOrderId, $statusCodeFilter, );
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 200:
                    if ('\Walmart\Models\MP\MX\Orders\GetAllWFSOrders200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Walmart\Models\MP\MX\Orders\GetAllWFSOrders200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\MX\Orders\GetAllWFSOrders200Response', $response->getHeaders());
            }

            $returnType = '\Walmart\Models\MP\MX\Orders\GetAllWFSOrders200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\MX\Orders\GetAllWFSOrders200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation getAllWFSOrdersAsync
     *
     * Get all WFS orders
     *
     * @param  string $createdStartDate Start Date for querying all purchase orders after this date. Use epoch time format in seconds. (optional)
     * @param  string $createdEndDate End Date for querying all purchase orders after this date. Use epoch time format in seconds. (optional)
     * @param  string $limit The number of orders to be returned. Cannot be larger than 200. (optional, default to '10')
     * @param  string $offset The starting offset of the first order required in the response. (optional, default to '0')
     * @param  string $customerOrderId The customer order ID. (optional, default to '0')
     * @param  string $statusCodeFilter The status code filter to apply. Valid values will be Created, SentForFulfillment, Shipped, Cancelled, Delivered (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllWFSOrdersAsync(
        ?string $createdStartDate = null,
        ?string $createdEndDate = null,
        ?string $limit = '10',
        ?string $offset = '0',
        ?string $customerOrderId = '0',
        ?string $statusCodeFilter = null
    ): PromiseInterface {
        return $this->getAllWFSOrdersAsyncWithHttpInfo($createdStartDate, $createdEndDate, $limit, $offset, $customerOrderId, $statusCodeFilter)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllWFSOrdersAsyncWithHttpInfo
     *
     *
     * Get all WFS orders
     *
     * @param  string $createdStartDate Start Date for querying all purchase orders after this date. Use epoch time format in seconds. (optional)
     * @param  string $createdEndDate End Date for querying all purchase orders after this date. Use epoch time format in seconds. (optional)
     * @param  string $limit The number of orders to be returned. Cannot be larger than 200. (optional, default to '10')
     * @param  string $offset The starting offset of the first order required in the response. (optional, default to '0')
     * @param  string $customerOrderId The customer order ID. (optional, default to '0')
     * @param  string $statusCodeFilter The status code filter to apply. Valid values will be Created, SentForFulfillment, Shipped, Cancelled, Delivered (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function getAllWFSOrdersAsyncWithHttpInfo(
        ?string $createdStartDate = null,
        ?string $createdEndDate = null,
        ?string $limit = '10',
        ?string $offset = '0',
        ?string $customerOrderId = '0',
        ?string $statusCodeFilter = null,
    ): PromiseInterface {
        $returnType = '\Walmart\Models\MP\MX\Orders\GetAllWFSOrders200Response';
        $request = $this->getAllWFSOrdersRequest($createdStartDate, $createdEndDate, $limit, $offset, $customerOrderId, $statusCodeFilter, );
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllWFSOrders'
     *
     * @param  string $createdStartDate Start Date for querying all purchase orders after this date. Use epoch time format in seconds. (optional)
     * @param  string $createdEndDate End Date for querying all purchase orders after this date. Use epoch time format in seconds. (optional)
     * @param  string $limit The number of orders to be returned. Cannot be larger than 200. (optional, default to '10')
     * @param  string $offset The starting offset of the first order required in the response. (optional, default to '0')
     * @param  string $customerOrderId The customer order ID. (optional, default to '0')
     * @param  string $statusCodeFilter The status code filter to apply. Valid values will be Created, SentForFulfillment, Shipped, Cancelled, Delivered (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllWFSOrdersRequest(
        ?string $createdStartDate = null,
        ?string $createdEndDate = null,
        ?string $limit = '10',
        ?string $offset = '0',
        ?string $customerOrderId = '0',
        ?string $statusCodeFilter = null,
    ): Request {
        $contentType = self::contentTypes['getAllWFSOrders'];

        $resourcePath = '/v3/orders/wfsorders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = [
            ObjectSerializer::toQueryValue(
                $createdStartDate,
                'createdStartDate', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $createdEndDate,
                'createdEndDate', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $limit,
                'limit', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $offset,
                'offset', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $customerOrderId,
                'customerOrderId', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $statusCodeFilter,
                'statusCodeFilter', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
        ];

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getClientId()) || !(empty($this->config->getClientSecret()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getClientId() . ":" . $this->config->getClientSecret());
        }

        // this endpoint requires Bearer authentication (access token)
        $token = $this->config->getAccessToken();
        if ($token) {
            $headers['WM_SEC.ACCESS_TOKEN'] = $token->accessToken;
        }

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getShippingLabel
     *
     * Get Shipping Label
     *
     * @param  string $trackingNumber trackingNumber (required)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string|\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response|\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response
     */
    public function getShippingLabel(
        string $trackingNumber
    ): string {
        return $this->getShippingLabelWithHttpInfo($trackingNumber);
    }

    /**
     * Operation getShippingLabelWithHttpInfo
     *
     * Get Shipping Label
     *
     * @param  string $trackingNumber trackingNumber (required)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string|\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response|\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response
     */
    protected function getShippingLabelWithHttpInfo(
        string $trackingNumber,
    ): string {
        $request = $this->getShippingLabelRequest($trackingNumber, );
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, 'string', $response->getHeaders());
                case 400:
                    if ('\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response', $response->getHeaders());
                case 500:
                    if ('\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response', $response->getHeaders());
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation getShippingLabelAsync
     *
     * Get Shipping Label
     *
     * @param  string $trackingNumber trackingNumber (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShippingLabelAsync(
        string $trackingNumber
    ): PromiseInterface {
        return $this->getShippingLabelAsyncWithHttpInfo($trackingNumber)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getShippingLabelAsyncWithHttpInfo
     *
     *
     * Get Shipping Label
     *
     * @param  string $trackingNumber trackingNumber (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function getShippingLabelAsyncWithHttpInfo(
        string $trackingNumber,
    ): PromiseInterface {
        $returnType = 'string';
        $request = $this->getShippingLabelRequest($trackingNumber, );
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'getShippingLabel'
     *
     * @param  string $trackingNumber trackingNumber (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getShippingLabelRequest(
        string $trackingNumber,
    ): Request {
        $contentType = self::contentTypes['getShippingLabel'];

        // verify the required parameter 'trackingNumber' is set
        if ($trackingNumber === null || (is_array($trackingNumber) && count($trackingNumber) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trackingNumber when calling getShippingLabel'
            );
        }
        $resourcePath = '/v3/orders/label/{trackingNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($trackingNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'trackingNumber' . '}',
                ObjectSerializer::toPathValue($trackingNumber),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/octet-stream', 'application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getClientId()) || !(empty($this->config->getClientSecret()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getClientId() . ":" . $this->config->getClientSecret());
        }

        // this endpoint requires Bearer authentication (access token)
        $token = $this->config->getAccessToken();
        if ($token) {
            $headers['WM_SEC.ACCESS_TOKEN'] = $token->accessToken;
        }

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postBulkShippingLabel
     *
     * Bulk Shipping Label
     *
     * @param  \Walmart\Models\MP\MX\Orders\PostBulkShippingLabelRequest $postBulkShippingLabelRequest Request body with list of tracking numbers (required)
     * @param  string $fORMAT format in which you want to download bulk labels, expected values are ZIP/ PDF only (optional, default to 'ZIP')
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string|mixed|\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response
     */
    public function postBulkShippingLabel(
        \Walmart\Models\MP\MX\Orders\PostBulkShippingLabelRequest $postBulkShippingLabelRequest,
        ?string $fORMAT = 'ZIP'
    ): string {
        return $this->postBulkShippingLabelWithHttpInfo($postBulkShippingLabelRequest, $fORMAT);
    }

    /**
     * Operation postBulkShippingLabelWithHttpInfo
     *
     * Bulk Shipping Label
     *
     * @param  \Walmart\Models\MP\MX\Orders\PostBulkShippingLabelRequest $postBulkShippingLabelRequest Request body with list of tracking numbers (required)
     * @param  string $fORMAT format in which you want to download bulk labels, expected values are ZIP/ PDF only (optional, default to 'ZIP')
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string|mixed|\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response
     */
    protected function postBulkShippingLabelWithHttpInfo(
        \Walmart\Models\MP\MX\Orders\PostBulkShippingLabelRequest $postBulkShippingLabelRequest,
        ?string $fORMAT = 'ZIP',
    ): string {
        $request = $this->postBulkShippingLabelRequest($postBulkShippingLabelRequest, $fORMAT, );
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, 'string', $response->getHeaders());
                case 400:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, 'mixed', $response->getHeaders());
                case 500:
                    if ('\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response', $response->getHeaders());
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation postBulkShippingLabelAsync
     *
     * Bulk Shipping Label
     *
     * @param  \Walmart\Models\MP\MX\Orders\PostBulkShippingLabelRequest $postBulkShippingLabelRequest Request body with list of tracking numbers (required)
     * @param  string $fORMAT format in which you want to download bulk labels, expected values are ZIP/ PDF only (optional, default to 'ZIP')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postBulkShippingLabelAsync(
        \Walmart\Models\MP\MX\Orders\PostBulkShippingLabelRequest $postBulkShippingLabelRequest,
        ?string $fORMAT = 'ZIP'
    ): PromiseInterface {
        return $this->postBulkShippingLabelAsyncWithHttpInfo($postBulkShippingLabelRequest, $fORMAT)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postBulkShippingLabelAsyncWithHttpInfo
     *
     *
     * Bulk Shipping Label
     *
     * @param  \Walmart\Models\MP\MX\Orders\PostBulkShippingLabelRequest $postBulkShippingLabelRequest Request body with list of tracking numbers (required)
     * @param  string $fORMAT format in which you want to download bulk labels, expected values are ZIP/ PDF only (optional, default to 'ZIP')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function postBulkShippingLabelAsyncWithHttpInfo(
        \Walmart\Models\MP\MX\Orders\PostBulkShippingLabelRequest $postBulkShippingLabelRequest,
        ?string $fORMAT = 'ZIP',
    ): PromiseInterface {
        $returnType = 'string';
        $request = $this->postBulkShippingLabelRequest($postBulkShippingLabelRequest, $fORMAT, );
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'postBulkShippingLabel'
     *
     * @param  \Walmart\Models\MP\MX\Orders\PostBulkShippingLabelRequest $postBulkShippingLabelRequest Request body with list of tracking numbers (required)
     * @param  string $fORMAT format in which you want to download bulk labels, expected values are ZIP/ PDF only (optional, default to 'ZIP')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postBulkShippingLabelRequest(
        \Walmart\Models\MP\MX\Orders\PostBulkShippingLabelRequest $postBulkShippingLabelRequest,
        ?string $fORMAT = 'ZIP',
    ): Request {
        $contentType = self::contentTypes['postBulkShippingLabel'];

        // verify the required parameter 'postBulkShippingLabelRequest' is set
        if ($postBulkShippingLabelRequest === null || (is_array($postBulkShippingLabelRequest) && count($postBulkShippingLabelRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $postBulkShippingLabelRequest when calling postBulkShippingLabel'
            );
        }
        $resourcePath = '/v3/orders/labels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($fORMAT !== null) {
            $headerParams['FORMAT'] = ObjectSerializer::toHeaderValue($fORMAT);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/octet-stream', 'application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($postBulkShippingLabelRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($postBulkShippingLabelRequest));
            } else {
                $httpBody = $postBulkShippingLabelRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getClientId()) || !(empty($this->config->getClientSecret()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getClientId() . ":" . $this->config->getClientSecret());
        }

        // this endpoint requires Bearer authentication (access token)
        $token = $this->config->getAccessToken();
        if ($token) {
            $headers['WM_SEC.ACCESS_TOKEN'] = $token->accessToken;
        }

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shippingUpdates
     *
     * Shipping Updates
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  \Walmart\Models\MP\MX\Orders\ShippingUpdatesRequest $shippingUpdatesRequest File fields (required)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string|\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response|\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response
     */
    public function shippingUpdates(
        string $purchaseOrderId,
        \Walmart\Models\MP\MX\Orders\ShippingUpdatesRequest $shippingUpdatesRequest
    ): string {
        return $this->shippingUpdatesWithHttpInfo($purchaseOrderId, $shippingUpdatesRequest);
    }

    /**
     * Operation shippingUpdatesWithHttpInfo
     *
     * Shipping Updates
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  \Walmart\Models\MP\MX\Orders\ShippingUpdatesRequest $shippingUpdatesRequest File fields (required)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string|\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response|\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response
     */
    protected function shippingUpdatesWithHttpInfo(
        string $purchaseOrderId,
        \Walmart\Models\MP\MX\Orders\ShippingUpdatesRequest $shippingUpdatesRequest,
    ): string {
        $request = $this->shippingUpdatesRequest($purchaseOrderId, $shippingUpdatesRequest, );
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 202:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, 'string', $response->getHeaders());
                case 400:
                    if ('\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response', $response->getHeaders());
                case 500:
                    if ('\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response', $response->getHeaders());
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\MX\Orders\ShippingUpdates400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation shippingUpdatesAsync
     *
     * Shipping Updates
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  \Walmart\Models\MP\MX\Orders\ShippingUpdatesRequest $shippingUpdatesRequest File fields (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shippingUpdatesAsync(
        string $purchaseOrderId,
        \Walmart\Models\MP\MX\Orders\ShippingUpdatesRequest $shippingUpdatesRequest
    ): PromiseInterface {
        return $this->shippingUpdatesAsyncWithHttpInfo($purchaseOrderId, $shippingUpdatesRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shippingUpdatesAsyncWithHttpInfo
     *
     *
     * Shipping Updates
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  \Walmart\Models\MP\MX\Orders\ShippingUpdatesRequest $shippingUpdatesRequest File fields (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function shippingUpdatesAsyncWithHttpInfo(
        string $purchaseOrderId,
        \Walmart\Models\MP\MX\Orders\ShippingUpdatesRequest $shippingUpdatesRequest,
    ): PromiseInterface {
        $returnType = 'string';
        $request = $this->shippingUpdatesRequest($purchaseOrderId, $shippingUpdatesRequest, );
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'shippingUpdates'
     *
     * @param  string $purchaseOrderId purchaseOrderId (required)
     * @param  \Walmart\Models\MP\MX\Orders\ShippingUpdatesRequest $shippingUpdatesRequest File fields (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shippingUpdatesRequest(
        string $purchaseOrderId,
        \Walmart\Models\MP\MX\Orders\ShippingUpdatesRequest $shippingUpdatesRequest,
    ): Request {
        $contentType = self::contentTypes['shippingUpdates'];

        // verify the required parameter 'purchaseOrderId' is set
        if ($purchaseOrderId === null || (is_array($purchaseOrderId) && count($purchaseOrderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchaseOrderId when calling shippingUpdates'
            );
        }
        // verify the required parameter 'shippingUpdatesRequest' is set
        if ($shippingUpdatesRequest === null || (is_array($shippingUpdatesRequest) && count($shippingUpdatesRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shippingUpdatesRequest when calling shippingUpdates'
            );
        }
        $resourcePath = '/v3/orders/{purchaseOrderId}/ship';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($purchaseOrderId !== null) {
            $resourcePath = str_replace(
                '{' . 'purchaseOrderId' . '}',
                ObjectSerializer::toPathValue($purchaseOrderId),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($shippingUpdatesRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($shippingUpdatesRequest));
            } else {
                $httpBody = $shippingUpdatesRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getClientId()) || !(empty($this->config->getClientSecret()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getClientId() . ":" . $this->config->getClientSecret());
        }

        // this endpoint requires Bearer authentication (access token)
        $token = $this->config->getAccessToken();
        if ($token) {
            $headers['WM_SEC.ACCESS_TOKEN'] = $token->accessToken;
        }

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }
}

