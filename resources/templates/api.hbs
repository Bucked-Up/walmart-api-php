<?php
/**
 * {{classname}}
 * PHP version 7.4
 *
 * @category Class
 * @package  {{invokerPackage}}
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 */

{{>partials/partial_header}}

namespace {{apiPackage}};

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use {{invokerPackage}}\ApiException;
use {{invokerPackage}}\Configuration;
use {{invokerPackage}}\HeaderSelector;
use {{invokerPackage}}\ObjectSerializer;

/**
 * {{classname}} Class Doc Comment
 *
 * @category Class
 * @package  {{invokerPackage}}
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
{{#operations~}}
class {{classname}}
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [{{#operation}}
        '{{{operationId}}}' => [{{#consumes}}
            '{{{mediaType}}}',{{/consumes}}
            {{#unless consumes~}}'application/json',{{/unless}}
        ],{{/operation}}
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

{{~#operation}}
    /**
     * Operation {{{operationId}}}
     *{{#if summary}}
     * {{summary}}
     *{{~/if}}
{{~#if description~}}
     * {{{description}}}
     *
{{~/if~}}
{{#if vendorExtensions.x-group-parameters~}}
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
{{~/if~}}
{{#each servers~}}
{{#if @first~}}
     * This operation contains host(s) defined in the OpenAPI spec. Use 'hostIndex' to select the host.
     * if needed, use the 'variables' parameter to pass variables to the host.
{{~/if~}}
     * URL: {{{url}}}
{{~#variables~}}
{{#if @first~}}
     *  Variables:
{{~/if~}}
     *    - {{{name}}}: {{{description}}}{{#unless description}} No description provided{{/unless}}
{{#each enumValues~}}
{{~#if @first~}}
     *      Allowed values:
{{~/if~}}
     *        - {{{this}}}
{{~/each~}}
{{~/variables~}}
{{#if @last~}}
     *
{{/if~}}
{{/each~}}
{{#each allParams}}
     * @param  {{{dataType}}} ${{paramName}}{{#if description}} {{{description}}}{{/if}} {{#if required}}(required){{else}}(optional{{#if defaultValue}}, default to {{{defaultValue}}}{{/if}}){{/if}}{{#if isDeprecated}} (deprecated){{/if}}
{{~#if @last}}
     *
{{~/if~}}
{{~/each~}}
{{#each servers~}}
{{#if @first~}}
     * @param  null|int $hostIndex Host index. Defaults to null. If null, then the library will use $this->hostIndex instead
     * @param  array $variables Associative array of variables to pass to the host. Defaults to empty array.
{{~/if~}}
{{/each}}
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['{{{operationId}}}'] to see the possible values for this operation
     *
     * @throws \
        {{~invokerPackage}}\ApiException on non-2xx response{{! invokerPackage is on a new line to avoid the backslash after Api being treated as a block escape }}
     * @throws \InvalidArgumentException
     * @return {{#if returnType}}{{#each responses}}{{#if dataType}}{{#unless @first}}|{{/unless}}{{/if}}{{{dataType}}}{{/each}}{{else}}void{{/if~}}
    {{#if isDeprecated~}}
     * @deprecated
    {{/if}}
     */
    public function {{operationId}}({{#if vendorExtensions.x-group-parameters}}$associative_array{{else}}{{#allParams}}${{paramName}}{{#unless required}} = {{#if defaultValue}}{{{defaultValue}}}{{else}}null{{/if}}{{/unless}}, {{/allParams}}{{#each servers}}{{#if @first}}?int $hostIndex = null, array $variables = [], {{/if}}{{/each}}string $contentType = self::contentTypes['{{{operationId}}}'][0]{{/if}})
    {
        {{#if returnType}}list($response) = {{/if}}$this->{{operationId}}WithHttpInfo({{#if vendorExtensions.x-group-parameters}}$associative_array{{else}}{{#allParams}}${{paramName}}, {{/allParams}}{{#each servers}}{{#if @first}}$hostIndex, $variables, {{/if}}{{/each}}$contentType{{/if}});{{#if returnType}}
        return $response;{{/if}}
    }

    /**
     * Operation {{{operationId}}}WithHttpInfo
     *{{#if summary}}
     * {{summary}}
     *{{~/if}}
{{~#if description~}}
     * {{{description}}}
     *
{{~/if~}}
{{#if vendorExtensions.x-group-parameters~}}
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
{{~/if~}}
{{#each servers~}}
{{#if @first~}}
     * This operation contains host(s) defined in the OpenAPI spec. Use 'hostIndex' to select the host.
     * if needed, use the 'variables' parameter to pass variables to the host.
{{~/if~}}
     * URL: {{{url}}}
{{~#variables~}}
{{#if @first~}}
     *  Variables:
{{~/if~}}
     *    - {{{name}}}: {{{description}}}{{#unless description}} No description provided{{/unless}}
{{#each enumValues~}}
{{~#if @first~}}
     *      Allowed values:
{{~/if~}}
     *        - {{{this}}}
{{~/each~}}
{{~/variables~}}
{{#if @last~}}
     *
{{/if~}}
{{/each~}}
{{#each allParams}}
     * @param  {{{dataType}}} ${{paramName}}{{#if description}} {{{description}}}{{/if}} {{#if required}}(required){{else}}(optional{{#if defaultValue}}, default to {{{defaultValue}}}{{/if}}){{/if}}{{#if isDeprecated}} (deprecated){{/if}}
{{~#if @last}}
     *
{{~/if~}}
{{~/each~}}
{{#each servers~}}
{{#if @first~}}
     * @param  null|int $hostIndex Host index. Defaults to null. If null, then the library will use $this->hostIndex instead
     * @param  array $variables Associative array of variables to pass to the host. Defaults to empty array.
{{~/if~}}
{{/each}}
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['{{{operationId}}}'] to see the possible values for this operation
     *
     * @throws \
{{~invokerPackage}}\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of {{#if returnType}}{{#each responses}}{{#if dataType}}{{#unless @first}}|{{/unless}}{{/if}}{{{dataType}}}{{/each}}{{else}}null{{/if}}, HTTP status code, HTTP response headers (array of strings)
    {{~#if isDeprecated}}
     * @deprecated
    {{~/if}}
     */
    protected function {{operationId}}WithHttpInfo({{#if vendorExtensions.x-group-parameters}}$associative_array{{else}}{{#allParams}}${{paramName}}{{#unless required}} = {{#if defaultValue}}{{{defaultValue}}}{{else}}null{{/if}}{{/unless}}, {{/allParams}}{{#each servers}}{{#if @first}}?int $hostIndex = null, array $variables = [], {{/if}}{{/each}}string $contentType = self::contentTypes['{{{operationId}}}'][0]{{/if}})
    {
        $request = $this->{{operationId}}Request({{#if vendorExtensions.x-group-parameters}}$associative_array{{else}}{{#allParams}}${{paramName}}, {{/allParams}}{{#each servers}}{{#if @first}}$hostIndex, $variables, {{/if}}{{/each}}$contentType{{/if}});

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            {{#if returnType~}}
            {{#each responses~}}
            {{#if @first~}}

            switch($statusCode) {
            {{~/if~}}
            {{#if dataType}}
                {{#unless isRange~}}
                {{#if isWildcard}}default:{{else}}case {{code}}:{{/if}}
                    if ('{{{dataType}}}' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('{{{dataType}}}' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '{{{dataType}}}', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                {{~/unless~}}
            {{/if~}}
            {{#if @last}}
            }
            {{~/if}}{{/each}}

            $returnType = '{{{returnType}}}';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
            {{~else~}}

            return [null, $statusCode, $response->getHeaders()];
            {{~/if}}
        } catch (ApiException $e) {
            switch ($e->getCode()) {
        {{~#responses}}
            {{~#if dataType~}}
                {{~#unless isRange}}
                {{#if isWildcard}}default:{{else}}case {{code}}:{{/if}}
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '{{{dataType}}}',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                {{~/unless~}}
            {{/if~}}
        {{/responses}}
            }
            throw $e;
        }
    }

    /**
     * Operation {{{operationId}}}Async
     *{{#if summary}}
     * {{summary}}
     *{{~/if}}
{{~#if description~}}
     * {{{description}}}
     *
{{~/if~}}
{{#if vendorExtensions.x-group-parameters~}}
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
{{~/if~}}
{{#each servers~}}
{{#if @first~}}
     * This operation contains host(s) defined in the OpenAPI spec. Use 'hostIndex' to select the host.
     * if needed, use the 'variables' parameter to pass variables to the host.
{{~/if~}}
     * URL: {{{url}}}
{{~#variables~}}
{{#if @first~}}
     *  Variables:
{{~/if~}}
     *    - {{{name}}}: {{{description}}}{{#unless description}} No description provided{{/unless}}
{{#each enumValues~}}
{{~#if @first~}}
     *      Allowed values:
{{~/if~}}
     *        - {{{this}}}
{{~/each~}}
{{~/variables~}}
{{#if @last~}}
     *
{{/if~}}
{{/each~}}
{{#each allParams}}
     * @param  {{{dataType}}} ${{paramName}}{{#if description}} {{{description}}}{{/if}} {{#if required}}(required){{else}}(optional{{#if defaultValue}}, default to {{{defaultValue}}}{{/if}}){{/if}}{{#if isDeprecated}} (deprecated){{/if}}
{{~#if @last}}
     *
{{~/if~}}
{{~/each~}}
{{#each servers~}}
{{#if @first~}}
     * @param  null|int $hostIndex Host index. Defaults to null. If null, then the library will use $this->hostIndex instead
     * @param  array $variables Associative array of variables to pass to the host. Defaults to empty array.
{{~/if~}}
{{/each}}
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['{{{operationId}}}'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
    {{~#if isDeprecated~}}
     * @deprecated
    {{~/if}}
     */
    public function {{operationId}}Async({{#if vendorExtensions.x-group-parameters}}$associative_array{{else}}{{#allParams}}${{paramName}}{{#unless required}} = {{#if defaultValue}}{{{defaultValue}}}{{else}}null{{/if}}{{/unless}}, {{/allParams}}{{#each servers}}{{#if @first}}?int $hostIndex = null, array $variables = [], {{/if}}{{/each}}string $contentType = self::contentTypes['{{{operationId}}}'][0]{{/if}})
    {
        return $this->{{operationId}}AsyncWithHttpInfo({{#if vendorExtensions.x-group-parameters}}$associative_array{{else}}{{#allParams}}${{paramName}}, {{/allParams}}{{#each servers}}{{#if @first}}$hostIndex, $variables, {{/if}}{{/each}}$contentType{{/if}})
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation {{{operationId}}}AsyncWithHttpInfo
     *
     *{{#if summary}}
     * {{summary}}
     *{{~/if}}
{{~#if description~}}
     * {{{description}}}
     *
{{~/if~}}
{{#if vendorExtensions.x-group-parameters~}}
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
{{~/if~}}
{{#each servers~}}
{{#if @first~}}
     * This operation contains host(s) defined in the OpenAPI spec. Use 'hostIndex' to select the host.
     * if needed, use the 'variables' parameter to pass variables to the host.
{{~/if~}}
     * URL: {{{url}}}
{{~#variables~}}
{{#if @first~}}
     *  Variables:
{{~/if~}}
     *    - {{{name}}}: {{{description}}}{{#unless description}} No description provided{{/unless}}
{{#each enumValues~}}
{{~#if @first~}}
     *      Allowed values:
{{~/if~}}
     *        - {{{this}}}
{{~/each~}}
{{~/variables~}}
{{#if @last~}}
     *
{{/if~}}
{{/each~}}
{{#each allParams}}
     * @param  {{{dataType}}} ${{paramName}}{{#if description}} {{{description}}}{{/if}} {{#if required}}(required){{else}}(optional{{#if defaultValue}}, default to {{{defaultValue}}}{{/if}}){{/if}}{{#if isDeprecated}} (deprecated){{/if}}
{{~#if @last}}
     *
{{~/if~}}
{{~/each~}}
{{#each servers~}}
{{#if @first~}}
     * @param  null|int $hostIndex Host index. Defaults to null. If null, then the library will use $this->hostIndex instead
     * @param  array $variables Associative array of variables to pass to the host. Defaults to empty array.
{{~/if~}}
{{/each}}
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['{{{operationId}}}'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
    {{~#if isDeprecated~}}
     * @deprecated
    {{~/if}}
     */
    protected function {{operationId}}AsyncWithHttpInfo({{#if vendorExtensions.x-group-parameters}}$associative_array{{else}}{{#allParams}}${{paramName}}{{#unless required}} = {{#if defaultValue}}{{{defaultValue}}}{{else}}null{{/if}}{{/unless}}, {{/allParams}}{{#each servers}}{{#if @first}}?int $hostIndex = null, array $variables = [], {{/if}}{{/each}}string $contentType = self::contentTypes['{{{operationId}}}'][0]{{/if}})
    {
        $returnType = '{{{returnType}}}';
        $request = $this->{{operationId}}Request({{#if vendorExtensions.x-group-parameters}}$associative_array{{else}}{{#allParams}}${{paramName}}, {{/allParams}}{{#each servers}}{{#if @first}}$hostIndex, $variables, {{/if}}{{/each}}$contentType{{/if}});

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    {{~#if returnType~}}
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                    {{~else~}}
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                    {{~/if~}}
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation '{{{operationId}}}'
     *
{{#if vendorExtensions.x-group-parameters~}}
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
{{~/if~}}
{{#each servers~}}
{{#if @first~}}
     * This operation contains host(s) defined in the OpenAPI spec. Use 'hostIndex' to select the host.
     * if needed, use the 'variables' parameter to pass variables to the host.
{{~/if~}}
     * URL: {{{url}}}
{{~#variables~}}
{{#if @first~}}
     *  Variables:
{{~/if~}}
     *    - {{{name}}}: {{{description}}}{{#unless description}} No description provided{{/unless}}
{{#each enumValues~}}
{{~#if @first~}}
     *      Allowed values:
{{~/if~}}
     *        - {{{this}}}
{{~/each~}}
{{~/variables~}}
{{#if @last~}}
     *
{{/if~}}
{{/each~}}
{{#each allParams}}
     * @param  {{{dataType}}} ${{paramName}}{{#if description}} {{{description}}}{{/if}} {{#if required}}(required){{else}}(optional{{#if defaultValue}}, default to {{{defaultValue}}}{{/if}}){{/if}}{{#if isDeprecated}} (deprecated){{/if}}
{{~#if @last}}
     *
{{~/if~}}
{{~/each~}}
{{#each servers~}}
{{#if @first~}}
     * @param  null|int $hostIndex Host index. Defaults to null. If null, then the library will use $this->hostIndex instead
     * @param  array $variables Associative array of variables to pass to the host. Defaults to empty array.
{{~/if~}}
{{/each}}
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['{{{operationId}}}'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
    {{~#if isDeprecated~}}
     * @deprecated
    {{~/if}}
     */
    protected function {{operationId}}Request({{#if vendorExtensions.x-group-parameters}}$associative_array{{else}}{{#allParams}}${{paramName}}{{#unless required}} = {{#if defaultValue}}{{{defaultValue}}}{{else}}null{{/if}}{{/unless}}, {{/allParams}}{{#each servers}}{{#if @first}}?int $hostIndex = null, array $variables = [], {{/if}}{{/each}}string $contentType = self::contentTypes['{{{operationId}}}'][0]{{/if}})
    {
        {{~#if vendorExtensions.x-group-parameters~}}
        // unbox the parameters from the associative array
{{~#allParams~}}
        ${{paramName}} = array_key_exists('{{paramName}}', $associative_array) ? $associative_array['{{paramName}}'] : {{{defaultValue}}}{{#unless defaultValue}}null{{/unless}};
{{~/allParams}}{{#if servers.0~}}
        $hostIndex = $associative_array['hostIndex'];
        $variables = array_key_exists('variables', $associative_array) ? $associative_array['variables'] : [];
{{~/if~}}
        $contentType = $associative_array['contentType'] ?? self::contentTypes['{{{operationId}}}'][0];
        {{~/if}}{{#allParams~}}
        {{#if required}}
        // verify the required parameter '{{paramName}}' is set
        if (${{paramName}} === null || (is_array(${{paramName}}) && count(${{paramName}}) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter ${{paramName}} when calling {{operationId}}'
            );
        }
        {{~/if~}}
        {{#if hasValidation~}}
        {{#if maxLength~}}
        if ({{#unless required}}${{paramName}} !== null && {{/unless}}strlen(${{paramName}}) > {{maxLength}}) {
            throw new \InvalidArgumentException('invalid length for "${{paramName}}" when calling {{classname}}.{{operationId}}, must be smaller than or equal to {{maxLength}}.');
        }
        {{~/if}}
        {{#if minLength~}}
        if ({{#unless required}}${{paramName}} !== null && {{/unless}}strlen(${{paramName}}) < {{minLength}}) {
            throw new \InvalidArgumentException('invalid length for "${{paramName}}" when calling {{classname}}.{{operationId}}, must be bigger than or equal to {{minLength}}.');
        }
        {{~/if}}
        {{#if maximum~}}
        if ({{#unless required}}${{paramName}} !== null && {{/unless}}${{paramName}} >{{#if exclusiveMaximum}}={{/if}} {{maximum}}) {
            throw new \InvalidArgumentException('invalid value for "${{paramName}}" when calling {{classname}}.{{operationId}}, must be smaller than {{#unless exclusiveMaximum}}or equal to {{/unless}}{{maximum}}.');
        }
        {{~/if}}
        {{#if minimum~}}
        if ({{#unless required}}${{paramName}} !== null && {{/unless}}${{paramName}} <{{#if exclusiveMinimum}}={{/if}} {{minimum}}) {
            throw new \InvalidArgumentException('invalid value for "${{paramName}}" when calling {{classname}}.{{operationId}}, must be bigger than {{#unless exclusiveMinimum}}or equal to {{/unless}}{{minimum}}.');
        }
        {{~/if}}
        {{#if pattern~}}
        if ({{#unless required}}${{paramName}} !== null && {{/unless}}!preg_match("{{{pattern}}}", ${{paramName}})) {
            throw new \InvalidArgumentException("invalid value for \"{{paramName}}\" when calling {{classname}}.{{operationId}}, must conform to the pattern {{{pattern}}}.");
        }
        {{~/if}}
        {{#if maxItems~}}
        if ({{#unless required}}${{paramName}} !== null && {{/unless}}count(${{paramName}}) > {{maxItems}}) {
            throw new \InvalidArgumentException('invalid value for "${{paramName}}" when calling {{classname}}.{{operationId}}, number of items must be less than or equal to {{maxItems}}.');
        }
        {{~/if}}
        {{#if minItems~}}
        if ({{#unless required}}${{paramName}} !== null && {{/unless}}count(${{paramName}}) < {{minItems}}) {
            throw new \InvalidArgumentException('invalid value for "${{paramName}}" when calling {{classname}}.{{operationId}}, number of items must be greater than or equal to {{minItems}}.');
        }
        {{/if}}
        {{/if}}{{/allParams}}
        $resourcePath = '{{{path}}}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        {{#if queryParams}}// query params
        $queryParams = [
        {{~#queryParams}}
            ObjectSerializer::toQueryValue(
                ${{paramName}},
                '{{baseName}}', // param base name
                '{{#schema}}{{openApiType}}{{/schema}}', // openApiType
                '{{style}}', // style
                {{#if isExplode}}true{{else}}false{{/if}}, // explode
                {{required}} // required
            ) ?? [],
        {{~/queryParams}}
        ];
        {{~/if}}

        {{#if headerParams}}// header params{{/if}}
        {{~#headerParams}}
        {{~#if collectionFormat~}}
        if (is_array(${{paramName}})) {
            ${{paramName}} = ObjectSerializer::serializeCollection(${{paramName}}, '{{collectionFormat}}');
        }
        {{~/if}}
        if (${{paramName}} !== null) {
            $headerParams['{{baseName}}'] = ObjectSerializer::toHeaderValue(${{paramName}});
        }
        {{~/headerParams~}}

        {{#if pathParams}}// path params{{/if}}
        {{#pathParams~}}
        {{~#if collectionFormat~}}
        if (is_array(${{paramName}})) {
            ${{paramName}} = ObjectSerializer::serializeCollection(${{paramName}}, '{{collectionFormat}}');
        }
        {{~/if~}}
        if (${{paramName}} !== null) {
            $resourcePath = str_replace(
                '{' . '{{baseName}}' . '}',
                ObjectSerializer::toPathValue(${{paramName}}),
                $resourcePath
            );
        }
        {{~/pathParams~}}

        {{#if formParams}}// form params{{/if}}
        {{#formParams~}}
        if (${{paramName}} !== null) {
            {{~#if isFile~}}
            $multipart = true;
            $formParams['{{baseName}}'] = [];
            $paramFiles = is_array(${{paramName}}) ? ${{paramName}} : [${{paramName}}];
            foreach ($paramFiles as $paramFile) {
                $formParams['{{baseName}}'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
            {{~else~}}
            $formParams['{{baseName}}'] = ObjectSerializer::toFormValue(${{paramName}});
            {{~/if~}}
        }
        {{~/formParams~}}

        $headers = $this->headerSelector->selectHeaders(
            [{{#each produces}}'{{{mediaType}}}'{{#unless @last}}, {{/unless}}{{/each}}],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        {{~#each bodyParams~}}
        if (isset(${{paramName}})) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization(${{paramName}}));
            } else {
                $httpBody = ${{paramName}};
        }
        } elseif (count($formParams) > 0) {
        {{~/each~}}
        {{#unless bodyParams}}
        if (count($formParams) > 0) {
        {{~/unless~}}
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        {{~#if authMethods~}}
        {{#if isApiKey~}}
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('{{keyParamName}}');
        if ($apiKey !== null) {
            {{~#if isKeyInHeader}}$headers['{{keyParamName}}'] = $apiKey;{{/if}}
            {{~#if isKeyInQuery}}$queryParams['{{keyParamName}}'] = $apiKey;{{/if}}
        }
        {{/if~}}
        {{#if isBasic~}}
        {{#if isBasicBasic~}}
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        {{/if~}}
        {{#if isBasicBearer~}}
        // this endpoint requires Bearer{{#if bearerFormat}} ({{{bearerFormat}}}){{/if}} authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        {{/if~}}
        {{/if~}}
        {{#if isOAuth~}}
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        {{/if~}}
        {{/if}}

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        {{#if servers.0~}}
        # Preserve the original behavior of server indexing.
        if ($hostIndex === null) {
            $hostIndex = $this->hostIndex;
        }

        $hostSettings = $this->getHostSettingsFor{{operationId}}();

        if ($hostIndex < 0 || $hostIndex >= count($hostSettings)) {
            throw new \InvalidArgumentException("Invalid index {$hostIndex} when selecting the host. Must be less than ".count($hostSettings));
        }
        $operationHost = Configuration::getHostString($hostSettings, $hostIndex, $variables);
        {{else~}}
        $operationHost = $this->config->getHost();
        {{/if~}}
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            '{{httpMethod}}',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    {{#if servers.0~}}
    /**
     * Returns an array of host settings for Operation {{operationId}}
     *
     * @return array an array of host settings
     */
    protected function getHostSettingsFor{{operationId}}(): array
    {
        return [
        {{#servers}}
            [
                "url" => "{{{url}}}",
                "description" => "{{{description}}}{{#unless description}}No description provided{{/unless}}",
                {{#each variables}}
                {{#if @first}}
                "variables" => [
                {{/if}}
                    "{{{name}}}" => [
                    "description" => "{{{description}}}{{#unless description}}No description provided{{/unless}}",
                    "default_value" => "{{{defaultValue}}}",
                    {{~#each enumValues~}}
                    {{#if @first~}}
                    "enum_values" => [
                    {{~/if~}}
                        "{{{this}}}",
                    {{~#if @last~}}
                    ]
                    {{~/if~}}
                    {{/each~}}
                    ]{{#unless @last}},{{/unless}}
                {{~#if @last~}}
                ]
                {{~/if~}}
                {{/each~}}
            ]{{#unless @last}},{{/unless}}
        {{~/servers~}}
        ];
    }

    {{~/if~}}
    {{/operation~}}
    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
{{/operations}}
